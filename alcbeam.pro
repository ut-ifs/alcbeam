;dum functions for code to compile on a platform where no MDPSLUS installed
;-----------------------------------------------------------------------
function mdsvalue,a
  return,a
end

pro mdsopen,a
end

pro mdsput,a
end
pro mdstcl,a
end
;------------------------------------------------------------------------


;------------------------------------------------------------------------
;+	LOCATE.PRO
;NAME:		LOCATE
;PURPOSE:	Do a binary search for the index(es) in a sorted table.
;	Finds Index such that Value is between Table(Index) and Table(Index+1).
;	If Table ascends then:
;		Table(Index) LE Value LT Table(Index+1)
;		Index is -1 only for Value LT Table(0) -- too low
;		Index is n-1 only for Value GE Table(n-1) -- high or too high
;	For a descending series, result is (n-1) - the_ascending_series.
;CATEGORY:	Searching and sorting.
;CALL:		Index = LOCATE(Table, Value)
;INPUTS:	Table		sorted list of number/text values (a vector)
;		Value		scalar/array of number/text to look up
;OPTIONAL INPUTS:
;KEYWORDS:
;OUTPUTS:	Index		the index(es) of Value in Table, from 0 to n.
;				Long integer of same shape as Value.
;OPTIONAL OUTPUTS:
;RESTRICTIONS:	Must compare text with text, numbers with numbers
;PROCEDURE:	Adapted and vectorized from Numerical Recipes.
;		Approx. worst timing: (Ceiling(Log2(N_ELEMENTS*(Table))+1)
;		* vector(divide, 2*add, 4*compare, 2*WHERE) on Value
;EXAMPLES:	j = LOCATE([1,2,3,4], 3.5) returns 2L.
;		j = LOCATE([4,3,2,1], [.5,1,4,4.5]) is [3L,3L,0L,-1]
;NOTE:		Should be useful in constructing reverse lookup
;		like arbitrary axis subscripting.
;HISTORY:	09-Apr-1993	Ken Klare, LANL P-4 (c)1993
;		5-Apr-1993	KAK	use MAKE_ARRAY
;	7-Sep-1993	KAK logic for descending. (Labombard@edge1.pfc.mit)
;	7-Sep-1993	KAK allow scalar lookup
;-
FUNCTION LOCATE, Table, Value

 sz = SIZE(Value)
 n = N_ELEMENTS(Table)					;size of the table
 asc = Table(0L) LE Table(n-1L)				;ascending flag
 IF sz(0) EQ 0 THEN BEGIN
	jl = -1L
	ju = n
 ENDIF ELSE BEGIN
	sz = sz(1:sz(0))
	jl = MAKE_ARRAY(DIMENSION=sz, VALUE=-1L)	;initial lower bounds
	ju = MAKE_ARRAY(DIMENSION=sz, VALUE=n)		;initial upper bounds
 ENDELSE
 WHILE (MAX(ju-jl) GT 1L) DO BEGIN			;binary search loop
	jm = (jl + ju)/2L				;midpoints
	IF asc THEN temp = Value GE Table(jm) ELSE temp = VALUE LE Table(jm)
	test = WHERE(temp, ntest)
	IF (ntest GT 0) THEN jl(test) = jm(test)
	test = WHERE(temp EQ 0, ntest)
	IF (ntest GT 0) THEN ju(test) = jm(test)
 ENDWHILE
 RETURN, jl
END
;-------------------------------------------------------------

;-------------------------------------------------------------
;+
; NAME:
;       SIGN
; PURPOSE:
;       Return the mathematical sign of the argument.
; CATEGORY:
; CALLING SEQUENCE:
;       s = sign(x)
; INPUTS:
;       x = value of array of values.     in
; KEYWORD PARAMETERS:
; OUTPUTS:
;       s = sign of value(s).             out
; COMMON BLOCKS:
; NOTES:
;       Note:
;         s = -1 for x < 0
;         s =  0 for x = 0
;         s =  1 for x > 0
; MODIFICATION HISTORY:
;       R. Sterner, 7 May, 1986.
;       Johns Hopkins University Applied Physics Laboratory.
;       RES 15 Sep, 1989 --- converted to SUN.
;	RES 23 Sep, 1991 --- rewrote, reducing 11 lines of code to 1.
;
; Copyright (C) 1986, Johns Hopkins University/Applied Physics Laboratory
; This software may be used, copied, or redistributed as long as it is not
; sold and this copyright notice is reproduced on each copy made.  This
; routine is provided as is without any express or implied warranties
; whatsoever.  Other limitations apply as described in the file disclaimer.txt.
;-
;-------------------------------------------------------------

	FUNCTION SIGN, X, help=hlp

	if (n_params(0) lt 1) or keyword_set(hlp) then begin
	  print,' Return the mathematical sign of the argument.'
	  print,' s = sign(x)'
	  print,'   x = value of array of values.     in'
	  print,'   s = sign of value(s).             out'
	  print,' Note:'
	  print,'   s = -1 for x < 0'
	  print,'   s =  0 for x = 0'
	  print,'   s =  1 for x > 0'
	  return, -1
	endif

	return, fix(x gt 0.) - fix(x lt 0.)
	end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which saves all the excitation data (read from ADAS files)
;into common block of variables
;flag eq 0: read beam_stoppping files
;flag eq 1: read exc2 files
;flag eq 2: read exc3 file
;-------------------------------------------------------------------------------------------------------------------------
pro read_adas, flag, adas_str
;The following block contains structures of ADAS data
common adas_data, adas_stop,adas_exc2,adas_exc3
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation.
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, $
stop_plasma_type_names,exc_plasma_type, exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
;The following common block contains the parameters which describe
;some relative non-geometrical global parameters of the plasma
common plasma_param, main_ion,n_impur,impur_table
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------
; data from adas adf21 and adf22 files located in the folder specified in
; var: adas_folder
; first extract all the ADAS data from available adas files
if flag eq 0 then file_ext=''
if flag eq 1 then file_ext='_exc2'
if flag eq 2 then file_ext='_exc3'
;extraction of the file for main ion
if flag eq 0 then adas_lbl=(stop_plasma_type_names(stop_plasma_type))(0) else adas_lbl=(exc_plasma_type_names(exc_plasma_type))(0)
;adas_file1='*'+(strsplit(exc_plasma_type_names(where(strmatch(exc_plasma_type_names,'*ADAS*') eq 1)),' ',/extract))(1)+'*'+main_ion+file_ext+'.pass'
adas_file1='*'+(strsplit(adas_lbl,' ',/extract))(1)+'*'+main_ion+file_ext+'.pass'
if strmid(adas_dir,strlen(adas_dir)-1,1) eq '/' then adas_dir=strmid(adas_dir,0,strlen(adas_dir)-1) 
adas_file=adas_dir+'/'+adas_file1
get_adas_adf21_22,adas_file=adas_file,e_ref=e_ref,e_arr=e_arr, t_ref=t_ref,t_arr=t_arr,n_ref=n_ref,n_arr=n_arr, fract_arr=fract_arr, ref_fract_arr=ref_fract_arr
;define structure of data
data_form={e_ref:e_ref,e_arr:e_arr, t_ref:t_ref,t_arr:t_arr,n_ref:n_ref,n_arr:n_arr, fract_arr:fract_arr, ref_fract_arr:ref_fract_arr}
adas_str=replicate(data_form,n_impur+1)

adas_str(0)=data_form

for i=0, n_impur-1 do begin
  ;extraction of the files for the impurity 
  ;adas_file1='*'+(strsplit(exc_plasma_type_names(where(strmatch(exc_plasma_type_names,'*ADAS*') eq 1)),' ',/extract))(1)+'*'+impur_table(i,0)+file_ext+'.pass'
  adas_file1='*'+(strsplit(adas_lbl,' ',/extract))(1)+'*'+impur_table(i,0)+file_ext+'.pass
  if strmid(adas_dir,strlen(adas_dir)-1,1) eq '/' then adas_dir=strmid(adas_dir,0,strlen(adas_dir)-1) 
  adas_file=adas_dir+'/'+adas_file1
  get_adas_adf21_22,adas_file=adas_file,e_ref=e_ref,e_arr=e_arr, t_ref=t_ref,t_arr=t_arr,n_ref=n_ref,n_arr=n_arr, fract_arr=fract_arr, ref_fract_arr=ref_fract_arr
  adas_str(i+1)={e_ref:e_ref,e_arr:e_arr, t_ref:t_ref,t_arr:t_arr,n_ref:n_ref,n_arr:n_arr, fract_arr:fract_arr, ref_fract_arr:ref_fract_arr} 
endfor
end
;-----------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which extracts data from adf21 or adf22 adas files
;-------------------------------------------------------------------------------------------------------------------------
pro get_adas_adf21_22,adas_file=adas_file,e_ref=e_ref,e_arr=e_arr, t_ref=t_ref,t_arr=t_arr,n_ref=n_ref,n_arr=n_arr, fract_arr=fract_arr, ref_fract_arr=ref_fract_arr
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------

val='template'
close,1
openr,1,adas_file

readf,1,val
readf,1,val
;read t_ref
readf,1,val
t_ref=float((strsplit(val,'/TREF=',/extract,/regex))(1))/1000.0 ;keV
readf,1,val
;read e_arr
readf,1,val
e_arr=0.0
repeat begin
  e_arr=[e_arr,float(strsplit(val,' ',/extract))]
  readf,1,val
endrep until mean(float(strsplit(val,' ',/extract))) gt 1e9
e_arr=e_arr(1:*)/1000.0 ; keV
n_arr=0.0
repeat begin
  n_arr=[n_arr,float(strsplit(val,' ',/extract))]
  readf,1,val
endrep until (strpos(val,'-'))(0) eq 0 
n_arr=n_arr(1:*)
fract_arr=fltarr(n_elements(e_arr),n_elements(n_arr))
readf,1,fract_arr
readf,1,val
readf,1,val
e_ref=float((strsplit((strsplit(val,'/EREF=',/extract,/regex))(1),' ',/extract))(0))/1000.0 ; keV
n_ref=float((strsplit((strsplit(val,'/NREF=',/extract,/regex))(1),' ',/extract))(0))
readf,1,val
readf,1,val
t_arr=0.0
repeat begin
  t_arr=[t_arr,float(strsplit(val,' ',/extract))]
  readf,1,val
endrep until (strpos(val,'-'))(0) eq 0 
t_arr=t_arr(1:*)/1000.0 ; keV
ref_fract_arr=fltarr(n_elements(t_arr))
readf,1,ref_fract_arr
close,1
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;This part the code is the copy of the smooth_function/pro routine
;is used to smooth the 1D data
;------------------------------------------------------------------------------------------------------------------------- 
;  function setupq, x, dx, y, npoint
;  from  * a practical guide to splines *  by c. de boor
;  to be called in  s m o o t h
;  put  delx(i) = x(i+1) - x(i)  into  v(i,3),
;  put  the three bands of  q-transp*d  into  v(i,0-2), and
;  put the three bands of  (d*q)-transp*(d*q)  at and above the diagonal
;  into  v(i,4-6) .
;  here,  q is  the tridiagonal matrix of order (npoint-2,npoint)
;  with general row  1/delx(i)
;  and   d  is the diagonal matrix  with general row  dx(i)

FUNCTION setupq, x, dx, y, npoint
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return,0
   endif
 endif
;----------------------------------------------------- 
npm1 = npoint - 2
v=make_array(npoint,8,/DOUBLE)
qty=make_array(npoint,/DOUBLE)
v(0,3) = x(1) - x(0)
FOR I=1, npm1 DO BEGIN
    v(i,3) = x(i+1) - x(i)
    v(i,0) = dx(i-1)/v(i-1,3)
    v(i,1) = - dx(i)/v(i,3) - dx(i)/v(i-1,3)
    v(i,2) = dx(i+1)/v(i,3)
ENDFOR
v(npoint-1,0) = 0
FOR I=1,npm1 DO BEGIN
    v(i,4) = v(i,0)^2 + v(i,1)^2 + v(i,2)^2
ENDFOR
IF (npm1 GE 3) THEN BEGIN
  FOR I=2,npm1 DO BEGIN
     v(i-1,5) = v(i-1,1)*v(i,0) + v(i-1,2)*v(i,1)
  ENDFOR
ENDIF
v(npm1,5) = 0
IF (npm1 GE 4) THEN BEGIN
  FOR I=3,npm1 DO BEGIN
     v(i-2,6) = v(i-2,2)*v(i,0)
  ENDFOR
ENDIF
v(npm1-1,6) = 0
v(npm1,6) = 0
; construct  q-transp. * y  in  v (i,7)=qty(i)
prev = (y(1) - y(0))/v(0,3)
FOR I=1,npm1 DO BEGIN
    diff = (y(i+1)-y(i))/v(i,3)
    qty(i) = diff - prev
    prev = diff
    v(i,7)= qty(i)
ENDFOR
Return, v
END

;  function chol1d, p, v, qty, npoint
;  from  * a practical guide to splines *  by c. de boor
;  to be called in  s m o o t h
;  constructs the upper three diags. in v(i,j), i=1,,npoint-2, j=0,2, of
;  the matrix  6*(1-p)*q-transp.*(d**2)*q + p*r, then computes its
;  l*l-transp. decomposition and stores it also in v, then applies
;  forward and backsubstitution to the right side q-transp.*y in  qty
;  to obtain the solution in  u .

FUNCTION chol1d, p, v, qty, npoint
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  
;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return,0
   endif
 endif
;----------------------------------------------------- 
npm1 = npoint - 2
; construct 6*(1-p)*q-transp.*(d**2)*q  +  p*r
six1mp = 6.*(1.-p)
twop = 2.*p
vnew1=make_array(npoint,5,/DOUBLE)
FOR I=1,npm1 DO BEGIN
    vnew1(i,0) = six1mp*v(i,4) + twop*(v(i-1,3)+v(i,3))
    vnew1(i,1) = six1mp*v(i,5) + p*v(i,3)
    vnew1(i,2) = six1mp*v(i,6)
ENDFOR
npm2 = npoint - 3
IF (npm1 LT 2) THEN BEGIN
    vnew1(0,3) = 0.
    vnew1(1,3) = qty(1)/v(1,0)
    vnew1(2,3) = 0.
  prev = 0

    FOR I=1,npoint-1 DO BEGIN
         vnew1(i,4) = (vnew1(i,3) - vnew1(i-1,3))/v(i-1,3)
         vnew1(i-1,4) = vnew1(i,4) - prev
         prev = vnew1(i,4)
    ENDFOR
    ENDIF ELSE BEGIN
  ; factorization
    FOR I=1,npm2 DO BEGIN
            ratio = vnew1(i,1)/vnew1(i,0)
            vnew1(i+1,0) = vnew1(i+1,0) - ratio*vnew1(i,1)
            vnew1(i+1,1) = vnew1(i+1,1) - ratio*vnew1(i,2)
            vnew1(i,1) = ratio
            ratio = vnew1(i,2)/vnew1(i,0)
            vnew1(i+2,0) = vnew1(i+2,0) - ratio*vnew1(i,2)
            vnew1(i,2) = ratio
    ENDFOR
  ; forward substitution
    vnew1(0,3) = 0
    vnew1(0,2) = 0
    vnew1(1,3) = qty(1)
    FOR I=1,npm2 DO BEGIN
        vnew1(i+1,3) = qty(i+1) - vnew1(i,1)*vnew1(i,3) - vnew1(i-1,2)*vnew1(i-1,3)
    ENDFOR
  ;  back substitution
    vnew1(npoint-1,3) = 0.
    vnew1(npm1,3) = vnew1(npm1,3)/vnew1(npm1,0)
    i = npm2
    FOR I=npm2,1,-1 DO BEGIN
        vnew1(i,3) = vnew1(i,3)/vnew1(i,0)-vnew1(i+1,3)*vnew1(i,1)-vnew1(i+2,3)*vnew1(i,2)
    ENDFOR
   ; construct q*u
    prev = 0
    FOR I=1,npoint-1 DO BEGIN
         vnew1(i,4) = (vnew1(i,3) - vnew1(i-1,3))/v(i-1,3)
         vnew1(i-1,4) = vnew1(i,4) - prev
         prev = vnew1(i,4)
    ENDFOR
  ENDELSE
 vnew1(npoint-1,4) = -vnew1(npoint-1,4)
return, vnew1
END

; Function smooth_func, x, y, dy, npoint, s
; from  * a practical guide to splines *  by c. de boor
; calls  setupq, chol1d
;
;  constructs the cubic smoothing spline  f  to given data  (x(i),y(i)),
;  i=0,...,npoint-1, which has as small a second derivative as possible
;  while
;  s(f) = sum( ((y(i)-f(x(i)))/dy(i))**2 , i=0,...,npoint-1 ) .le. s .
;
; ******  i n p u t  ******
;  x(0),...,x(npoint-1)   data abscissae,  a s s u m e d  to be strictly
;       increasing .
;  y(0),...,y(npoint-1)     corresponding data ordinates .
;  dy(0),...,dy(npoint-1)     estimate of uncertainty in data,  a s s u m-
;        e d  to be positive .
;  npoint.....number of data points,  a s s u m e d  .gt. 1
;  s.....upper bound on the discrete weighted mean square distance of
;        the approximation  f  from the data .
;
; ******  w o r k  a r r a y s  *****
;  v.....of size (npoint,7)
;  a.....of size (npoint,4)
;
; *****  o u t p u t  *****
;  a(.,0).....contains the sequence of smoothed ordinates .
;  a(i,j) = f^(j)(x(i)), j=1,2,3, i=0,...,npoint-2 ,  i.e., the
;        first three derivatives of the smoothing spline  f  at the
;        left end of each of the data intervals .
;     w a r n i n g . . .   a  would have to be transposed before it
;        could be used in  ppvalu .
;
; ******  m e t h o d  ******
;     The matrices  Q-transp*d  and  Q-transp*D**2*Q  are constructed in
;   s e t u p q  from  x  and  dy , as is the vector  qty = Q-transp*y .
;  Then, for given  p , the vector  u  is determined in  c h o l 1 d  as
;  the solution of the linear system
;               (6(1-p)Q-transp*D**2*Q + p*Q)u  = qty  .
;  From  u , the smoothing spline  f  (for this choice of smoothing par-
;  ameter  p ) is obtained in the sense that
;                        f(x(.))  =  y - 6(1-p)D**2*Q*u        and
;                      f''(x(.))  =  6*p*u                      .
;     The smoothing parameter  p  is found (if possible) so that
;                sf(p)  =  s ,
;  with  sf(p) = s(f) , where  f  is the smoothing spline as it depends
;  on  p .  if  s = 0, then p = 1 . if  sf(0) .le. s , then p = 0 .
;  Otherwise, the secant method is used to locate an appropriate  p  in
;  the open interval  (0,1) . However, straightforward application of
;  the secant method, as done in the original version of this program,
;  can be very slow and is influenced by the units in which  x  and  y
;  are measured, as C. Reinsch has pointed out. Instead, on recommend-
;  ation from C. Reinsch, the secant method is applied to the function
;           g:q |--> 1/sqrt{sfq(q)} - 1/sqrt{s} ,
;  with  sfq(q) := sf(q/(1+q)), since  1/sqrt{sfq}  is monotone increasing
;  and close to linear for larger  q . One starts at  q = 0  with a
;  Newton step, i.e.,
;                q_0 = 0,  q_1 = -g(0)/g'(0)
;  with  g'(0) = -(1/2) sfq(0)^{-3/2} dsfq, where dsfq = -12*u-transp*r*u ,
;  and  u  as obtained for  p = 0 . Iteration terminates as soon as
;   abs(sf - s) .le. .01*s .

Function smooth_func, x, y, dy, npoint, s
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return,0
   endif
 endif
;----------------------------------------------------- 
vnew = setupq (x, dy, y, npoint)
if st_err then return,0
v = make_array(npoint,7,/DOUBLE)
a = make_array(npoint,4,/DOUBLE)
FOR i=0,npoint-1 DO BEGIN
  FOR J=0,6 DO BEGIN
     v(i,j)=vnew(i,j)
  ENDFOR
  a(i,3)=vnew(i,7)
ENDFOR
IF (s LE 0) THEN BEGIN
  p=1
  vnew1=chol1d (p, v, a(0:npoint-1,3), npoint)
  if st_err then return,0
  FOR i=0,npoint-1 DO BEGIN
     FOR J=0,2 DO BEGIN
        v(i,j)=vnew1(i,j)
     ENDFOR
     a(i,2)=vnew1(i,3)
     a(i,0)=vnew1(i,4)
  ENDFOR
  sfq=0
ENDIF ELSE BEGIN
    p = 0
    vnew1=chol1d( p, v, a(0:npoint-1,3), npoint)
    if st_err then return,0
    FOR i=0,npoint-1 DO BEGIN
      FOR J=0,2 DO BEGIN
         v(i,j)=vnew1(i,j)
      ENDFOR
      a(i,2)=vnew1(i,3)
      a(i,0)=vnew1(i,4)
    ENDFOR
    sfq=0
    FOR I=0,npoint-1 DO BEGIN
      sfq = sfq + (a(i,0)*dy(i))^2
    ENDFOR
    sfq = sfq*36
    IF (sfq GT s) THEN BEGIN
      utru = 0
      FOR I=1,npoint-1 DO BEGIN
        utru = utru + v(i-1,3)*(a(i-1,2)*(a(i-1,2)+a(i,2))+a(i,2)^2)
      ENDFOR
      ooss = 1./sqrt(s)
      oosf = 1./sqrt(sfq)
      q = -(oosf-ooss)*sfq/(6.*utru*oosf)
   ; secant iteration for the determination of p starts here.
      prevq = 0
      prevsf = oosf
      vnew1=chol1d( q/(1.+q), v, a(0:npoint-1,3), npoint)
      if st_err then return,0
      FOR i=0,npoint-1 DO BEGIN
        FOR J=0,2 DO BEGIN
          v(i,j)=vnew1(i,j)
        ENDFOR
        a(i,2)=vnew1(i,3)
        a(i,0)=vnew1(i,4)
      ENDFOR
      sfq = 0
      FOR I=0,npoint-1 DO BEGIN
        sfq = sfq + (a(i,0)*dy(i))^2
      ENDFOR
      sfq = sfq*36./(1.+q)^2
      IF (abs(sfq-s) LE 0.01*s) THEN BEGIN
          oosf = 1./sqrt(sfq)
          change = (q-prevq)/(oosf-prevsf)*(oosf-ooss)
       prevq = q
          q = q - change
          prevsf = oosf
          vnew1=chol1d( q/(1.+q), v, a(0:npoint-1,3), npoint)
          if st_err then return,0
          FOR i=0,npoint-1 DO BEGIN
            FOR J=0,2 DO BEGIN
              v(i,j)=vnew1(i,j)
            ENDFOR
            a(i,2)=vnew1(i,3)
            a(i,0)=vnew1(i,4)
          ENDFOR
          sfq = 0
          FOR I=0,npoint-1 DO BEGIN
              sfq = sfq + (a(i,0)*dy(i))^2
          ENDFOR
          sfq = sfq*36./(1.+q)^2
      ENDIF
      p = q/(1.+q)
;  correct value of p has been found.
;  compute pol.coefficients from  Q*u (in a(i,0)).

     ENDIF ELSE BEGIN
     q=p
     ENDELSE
 ENDELSE

  sm = sfq
  six1mp = 6./(1.+q)
  FOR I=0,npoint-1 DO BEGIN
     a(i,0) = y(i) - six1mp*dy(i)^2*a(i,0)
  ENDFOR
  sixp = 6.*p
  FOR I=0,npoint-1 DO BEGIN
     a(i,2) = a(i,2)*sixp
  ENDFOR
  npm1 = npoint - 2
  FOR I=0,npm1 DO BEGIN
     a(i,3) = (a(i+1,2)-a(i,2))/v(i,3)
     a(i,1) = (a(i+1,0)-a(i,0))/v(i,3)- (a(i,2)+a(i,3)/3.*v(i,3))/2.*v(i,3)
  ENDFOR
 return, a
 END
;------------------------------------------------------------------------------------------------------------------------- 


;-------------------------------------------------------------------------------------------------------------------------
;Fuction is used to average the 2D array over the second dimension, NANs
;are not included in the averading 
;------------------------------------------------------------------------------------------------------------------------- 
function mean2d, arr
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return,0
   endif
 endif
;----------------------------------------------------- 
;returns the mean of the 2D array along the second dimension
arr_out=arr(*,0)
for i=0, n_elements(arr(*,0))-1 do arr_out(i)=mean(arr(i,*),/NAN)
return,arr_out
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Fuction is used to calculate the n=2,3 excitation fractions of the
;beam traveling through plasma defined by local parameters of ne,te,z_eff
;------------------------------------------------------------------------------------------------------------------------- 
function exc_adas,E,n_e,t_e,z_eff
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution)
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
;The following block contains structures of ADAS data
common adas_data, adas_stop,adas_exc2,adas_exc3
;The following common block contains the parameters which describe
;some relative non-geometrical global parameters of the plasma
common plasma_param, main_ion,n_impur,impur_table
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return,[n_e<0,n_e<0]
   endif
 endif
;----------------------------------------------------- 
main_ion_table=['D','H','He']
main_ion_z=[1.0,1.0,2.0]
ion_z=[main_ion_z(where(main_ion_table eq main_ion)),float(impur_table(*,1))]
imp_fr=float(impur_table(*,2))

;beam atom
beam_atom_table=['H','D','T']
beam_atom_mass=[1.0,2.0,3.0]
m_atom=(beam_atom_mass(where(beam_atom_table eq beam_atom)))(0)
E=E/m_atom

;firts set of data

T_e=(T_e>0.1)<3.0 ; 3keV is the limit for this set of the excitation cross sections


;calculation of the real fraction (density of each plasma ion
;(including impurities) divided by the summ of all densities of all
;ions

;z_eff=1.5
;n_e=3.3e14
;E=48.8
;t_e=1.7
if (where(z_eff lt ion_z(0)))(0) ne -1 then begin
   Widget_control, status_wid, Get_Value=status_tx
   Widget_Control, status_wid,$
   Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Z_eff is lower than main ion charge']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
endif

data_fr={fr:z_eff<1.0}
ion_fr=replicate(data_fr,n_impur+1)
ion_fr(0).fr(where(z_eff ne 0.0))=1/ion_z(0)
for i=1,n_impur do begin
  if max(z_eff) ne 0.0 then ion_fr(i).fr(where(z_eff ne 0.0))=imp_fr(i-1)*(z_eff(where(z_eff ne 0.0))-ion_z(0))/(total(imp_fr*ion_z(1:*)^2.0)-ion_z(0)*total(imp_fr*ion_z(1:*)))
  ion_fr(0).fr(where(z_eff ne 0.0))=ion_fr(0).fr(where(z_eff ne 0.0))-1.0/ion_z(0)*ion_fr(i).fr(where(z_eff ne 0.0))*ion_z(i)
endfor
;calculation of the used sums
sum1=ion_z(0)*ion_fr(0).fr
sum2=ion_z(0)^2.0*ion_fr(0).fr
for i=1,n_impur do begin
  sum1=sum1+ion_z(i)*ion_fr(i).fr
  sum2=sum2+ion_z(i)^2.0*ion_fr(i).fr
endfor
;calculation of the euqivavent electron densities
exc_2_total=n_e*0.0 ;new array
exc_3_total=n_e*0.0 ;new array

for i=0,n_impur do begin
  n_e_equiv=n_e/sum1*sum2/ion_z(i)
  exc_2=interpolate(adas_exc2(i).fract_arr,interpol(indgen(n_elements(adas_exc2(i).E_arr)),adas_exc2(i).E_arr,E),interpol(indgen(n_elements(adas_exc2(i).n_arr)),adas_exc2(i).n_arr,n_e_equiv),/Grid)*$
  interpol(adas_exc2(i).ref_fract_arr,adas_exc2(i).t_arr,T_e)/$
  interpol(adas_exc2(i).ref_fract_arr,adas_exc2(i).t_arr,adas_exc2(i).t_ref)

  exc_3=interpolate(adas_exc3(i).fract_arr,interpol(indgen(n_elements(adas_exc3(i).E_arr)),adas_exc3(i).E_arr,E),interpol(indgen(n_elements(adas_exc3(i).n_arr)),adas_exc3(i).n_arr,n_e_equiv),/Grid)*$
  interpol(adas_exc3(i).ref_fract_arr,adas_exc3(i).t_arr,T_e)/$
  interpol(adas_exc3(i).ref_fract_arr,adas_exc3(i).t_arr,adas_exc3(i).t_ref)

  exc_2_total=exc_2_total+ion_z(i)*ion_fr(i).fr*exc_2/sum1
  exc_3_total=exc_3_total+ion_z(i)*ion_fr(i).fr*exc_3/sum1
endfor
return,[exc_2_total,exc_3_total]
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Fuction is used to calculate the n=2,3 excitation fractions of the
;beam traveling through plasma defined by local parameters of ne,te,z_eff
;------------------------------------------------------------------------------------------------------------------------- 
function exc_hutch,E,n_e,t_e,z_eff
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution)
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
;The following common block contains the parameters which describe
;some relative non-geometrical global parameters of the plasma
common plasma_param, main_ion,n_impur,impur_table
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return,[n_e<0,n_e<0]
   endif
 endif
;----------------------------------------------------- 
; data from output save files /home/bespam/hutchcode/hutch_exc_z1.sav
; and /home/bespam/hutchcode/hutch_exc_z5.sav
if (main_ion ne 'H' and main_ion ne 'D') or impur_table(0) ne 'B' or n_elements(impur_table) gt 3 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Hutchinson excitation fractions can be only used for H plasma and B impurity']], Set_text_top_line=n_elements(status_tx)-4
     st_err=1
     ;return,[n_e<0,n_e<0]
endif
;beam atom
beam_atom_table=['H','D','T']
beam_atom_mass=[1.0,2.0,3.0]
m_atom=(beam_atom_mass(where(beam_atom_table eq beam_atom)))(0)
E=E/m_atom

;Input beam excitation data in hydrogen and boron plasmas
Z_H=1.0
Z_B=5.0
;firts set of data

;electron density cm-3
n_e_arr=[1.000E+12, 3.000E+12, 5.000E+12, 7.000E+12, 9.000E+12, 1.000E+13, 3.000E+13, 6.000E+13,$
         7.000E+13, 9.000E+13, 1.000E+14, 1.200E+14, 1.400E+14, 1.500E+14, 1.700E+14, 2.000E+14,$
         2.300E+14, 2.600E+14, 2.800E+14, 3.000E+14, 3.300E+14, 3.800E+14, 4.000E+14, 5.000E+14,$
         8.000E+14]
;beam energy keV
E_arr=[2.000E+03, 3.000E+03, 5.000E+03, 1.000E+04, 1.500E+04, 2.000E+04, 2.500E+04, 3.000E+04,$
       3.500E+04, 4.000E+04, 4.500E+04, 5.000E+04, 5.500E+04, 6.500E+04, 7.500E+04, 8.500E+04,$
       1.000E+05, 1.200E+05]/1000.0

T_e_ref=5e2/1000.0; reference t_e for following arrays keV
T_e=(T_e>0.05)<10.0 ; 3keV is the limit for this set of the excitation cross sections

;beam exc n=2 coef cm3/sec (hydrogen)
exc_2_E_n_H=[[7.129E-05, 2.115E-04, 3.490E-04, 4.839E-04, 6.166E-04, 6.821E-04, 1.900E-03, 3.473E-03, 3.943E-03, 4.814E-03, 5.218E-03, 5.972E-03, $
6.661E-03, 6.984E-03, 7.590E-03, 8.412E-03, 9.145E-03, 9.804E-03, 1.021E-02, 1.058E-02, 1.110E-02, 1.188E-02, 1.215E-02, 1.335E-02, 1.565E-02],$
[7.138E-05, 2.119E-04, 3.499E-04, 4.855E-04, 6.189E-04, 6.848E-04, 1.917E-03, 3.525E-03, 4.009E-03, 4.911E-03, 5.332E-03, 6.120E-03, 6.844E-03, $
7.185E-03, 7.827E-03, 8.704E-03, 9.490E-03, 1.020E-02, 1.064E-02, 1.104E-02, 1.161E-02, 1.246E-02, 1.277E-02, 1.408E-02, 1.667E-02],$
[7.184E-05, 2.134E-04, 3.524E-04, 4.891E-04, 6.237E-04, 6.904E-04, 1.940E-03, 3.585E-03, 4.084E-03, 5.017E-03, 5.454E-03, 6.276E-03, 7.035E-03, $
7.393E-03, 8.070E-03, 8.999E-03, 9.836E-03, 1.060E-02, 1.106E-02, 1.151E-02, 1.212E-02, 1.304E-02, 1.337E-02, 1.482E-02, 1.768E-02],$
[7.677E-05, 2.278E-04, 3.760E-04, 5.217E-04, 6.651E-04, 7.360E-04, 2.067E-03, 3.817E-03, 4.347E-03, 5.339E-03, 5.803E-03, 6.675E-03, 7.479E-03, $
7.859E-03, 8.575E-03, 9.557E-03, 1.044E-02, 1.124E-02, 1.174E-02, 1.220E-02, 1.285E-02, 1.381E-02, 1.417E-02, 1.568E-02, 1.868E-02],$
[8.734E-05, 2.590E-04, 4.271E-04, 5.922E-04, 7.547E-04, 8.350E-04, 2.337E-03, 4.300E-03, 4.891E-03, 5.992E-03, 6.506E-03, 7.468E-03, 8.352E-03, $
8.768E-03, 9.551E-03, 1.062E-02, 1.158E-02, 1.244E-02, 1.297E-02, 1.347E-02, 1.416E-02, 1.519E-02, 1.557E-02, 1.717E-02, 2.031E-02],$
[1.002E-04, 2.969E-04, 4.894E-04, 6.784E-04, 8.642E-04, 9.561E-04, 2.669E-03, 4.896E-03, 5.564E-03, 6.805E-03, 7.383E-03, 8.462E-03, 9.450E-03, $
9.913E-03, 1.079E-02, 1.197E-02, 1.303E-02, 1.399E-02, 1.457E-02, 1.512E-02, 1.588E-02, 1.700E-02, 1.741E-02, 1.915E-02, 2.254E-02],$
[1.126E-04, 3.335E-04, 5.497E-04, 7.618E-04, 9.703E-04, 1.073E-03, 2.992E-03, 5.479E-03, 6.223E-03, 7.603E-03, 8.244E-03, 9.440E-03, 1.053E-02, $
1.105E-02, 1.201E-02, 1.331E-02, 1.448E-02, 1.553E-02, 1.617E-02, 1.677E-02, 1.760E-02, 1.882E-02, 1.927E-02, 2.116E-02, 2.483E-02],$
[1.234E-04, 3.656E-04, 6.026E-04, 8.351E-04, 1.064E-03, 1.176E-03, 3.277E-03, 5.995E-03, 6.806E-03, 8.311E-03, 9.009E-03, 1.031E-02, 1.150E-02, $
1.206E-02, 1.310E-02, 1.452E-02, 1.578E-02, 1.691E-02, 1.761E-02, 1.825E-02, 1.915E-02, 2.048E-02, 2.095E-02, 2.300E-02, 2.694E-02],$
[1.326E-04, 3.927E-04, 6.472E-04, 8.969E-04, 1.142E-03, 1.263E-03, 3.519E-03, 6.433E-03, 7.303E-03, 8.914E-03, 9.662E-03, 1.106E-02, 1.233E-02, $
1.292E-02, 1.404E-02, 1.555E-02, 1.690E-02, 1.811E-02, 1.885E-02, 1.954E-02, 2.050E-02, 2.191E-02, 2.242E-02, 2.460E-02, 2.880E-02],$
[1.401E-04, 4.151E-04, 6.842E-04, 9.481E-04, 1.208E-03, 1.336E-03, 3.720E-03, 6.799E-03, 7.719E-03, 9.421E-03, 1.021E-02, 1.168E-02, 1.303E-02, $
1.365E-02, 1.483E-02, 1.643E-02, 1.786E-02, 1.913E-02, 1.991E-02, 2.064E-02, 2.165E-02, 2.314E-02, 2.368E-02, 2.598E-02, 3.040E-02],$
[1.464E-04, 4.336E-04, 7.147E-04, 9.904E-04, 1.261E-03, 1.395E-03, 3.886E-03, 7.105E-03, 8.065E-03, 9.845E-03, 1.067E-02, 1.221E-02, 1.361E-02, $
1.427E-02, 1.550E-02, 1.717E-02, 1.866E-02, 2.000E-02, 2.081E-02, 2.158E-02, 2.263E-02, 2.419E-02, 2.475E-02, 2.716E-02, 3.179E-02],$
[1.515E-04, 4.488E-04, 7.398E-04, 1.025E-03, 1.306E-03, 1.445E-03, 4.024E-03, 7.359E-03, 8.354E-03, 1.020E-02, 1.105E-02, 1.265E-02, 1.411E-02, $
1.479E-02, 1.607E-02, 1.780E-02, 1.935E-02, 2.073E-02, 2.158E-02, 2.237E-02, 2.347E-02, 2.509E-02, 2.567E-02, 2.817E-02, 3.298E-02],$
[1.557E-04, 4.614E-04, 7.606E-04, 1.054E-03, 1.343E-03, 1.485E-03, 4.139E-03, 7.571E-03, 8.596E-03, 1.050E-02, 1.138E-02, 1.302E-02, 1.452E-02, $
1.523E-02, 1.654E-02, 1.833E-02, 1.993E-02, 2.136E-02, 2.223E-02, 2.305E-02, 2.418E-02, 2.586E-02, 2.646E-02, 2.904E-02, 3.402E-02],$
[1.621E-04, 4.804E-04, 7.921E-04, 1.098E-03, 1.399E-03, 1.547E-03, 4.315E-03, 7.899E-03, 8.970E-03, 1.096E-02, 1.188E-02, 1.360E-02, 1.518E-02, $
1.591E-02, 1.730E-02, 1.918E-02, 2.085E-02, 2.236E-02, 2.328E-02, 2.414E-02, 2.533E-02, 2.709E-02, 2.773E-02, 3.045E-02, 3.572E-02],$
[1.665E-04, 4.936E-04, 8.139E-04, 1.128E-03, 1.438E-03, 1.590E-03, 4.438E-03, 8.132E-03, 9.238E-03, 1.129E-02, 1.224E-02, 1.403E-02, 1.565E-02, $
1.642E-02, 1.785E-02, 1.980E-02, 2.154E-02, 2.310E-02, 2.406E-02, 2.495E-02, 2.620E-02, 2.803E-02, 2.870E-02, 3.154E-02, 3.704E-02],$
[1.696E-04, 5.028E-04, 8.292E-04, 1.150E-03, 1.465E-03, 1.621E-03, 4.526E-03, 8.301E-03, 9.432E-03, 1.153E-02, 1.251E-02, 1.434E-02, 1.601E-02, $
1.679E-02, 1.827E-02, 2.027E-02, 2.206E-02, 2.367E-02, 2.466E-02, 2.558E-02, 2.686E-02, 2.876E-02, 2.944E-02, 3.238E-02, 3.808E-02],$
[1.725E-04, 5.116E-04, 8.439E-04, 1.170E-03, 1.491E-03, 1.650E-03, 4.614E-03, 8.472E-03, 9.630E-03, 1.178E-02, 1.279E-02, 1.466E-02, 1.638E-02, $
1.719E-02, 1.871E-02, 2.078E-02, 2.263E-02, 2.429E-02, 2.531E-02, 2.627E-02, 2.760E-02, 2.956E-02, 3.028E-02, 3.333E-02, 3.929E-02],$
[1.745E-04, 5.176E-04, 8.540E-04, 1.185E-03, 1.510E-03, 1.671E-03, 4.677E-03, 8.603E-03, 9.784E-03, 1.198E-02, 1.301E-02, 1.493E-02, 1.669E-02, $
1.752E-02, 1.908E-02, 2.121E-02, 2.312E-02, 2.484E-02, 2.589E-02, 2.688E-02, 2.826E-02, 3.030E-02, 3.104E-02, 3.422E-02, 4.044E-02]]
exc_2_E_n_H=transpose(exc_2_E_n_H)

;beam exc n=3 coef cm3/sec (hydrogen)
exc_3_E_n_H=[[5.082E-05, 1.395E-04, 2.152E-04, 2.811E-04, 3.394E-04, 3.661E-04, 7.164E-04, 9.902E-04, 1.056E-03, 1.168E-03, 1.217E-03, 1.303E-03, $
1.378E-03, 1.412E-03, 1.475E-03, 1.558E-03, 1.631E-03, 1.695E-03, 1.733E-03, 1.769E-03, 1.818E-03, 1.890E-03, 1.916E-03, 2.025E-03, 2.233E-03],$
[5.089E-05, 1.400E-04, 2.165E-04, 2.836E-04, 3.431E-04, 3.705E-04, 7.352E-04, 1.027E-03, 1.098E-03, 1.220E-03, 1.273E-03, 1.368E-03, 1.451E-03, $
1.489E-03, 1.559E-03, 1.653E-03, 1.735E-03, 1.807E-03, 1.851E-03, 1.892E-03, 1.949E-03, 2.032E-03, 2.062E-03, 2.190E-03, 2.437E-03],$
[5.105E-05, 1.400E-04, 2.163E-04, 2.831E-04, 3.424E-04, 3.697E-04, 7.345E-04, 1.032E-03, 1.106E-03, 1.233E-03, 1.289E-03, 1.390E-03, 1.480E-03, $
1.521E-03, 1.597E-03, 1.699E-03, 1.790E-03, 1.870E-03, 1.919E-03, 1.965E-03, 2.029E-03, 2.124E-03, 2.158E-03, 2.304E-03, 2.591E-03],$
[5.446E-05, 1.474E-04, 2.256E-04, 2.931E-04, 3.523E-04, 3.794E-04, 7.387E-04, 1.041E-03, 1.118E-03, 1.254E-03, 1.315E-03, 1.426E-03, 1.525E-03, $
1.571E-03, 1.657E-03, 1.772E-03, 1.875E-03, 1.967E-03, 2.023E-03, 2.075E-03, 2.149E-03, 2.257E-03, 2.296E-03, 2.465E-03, 2.797E-03],$
[6.243E-05, 1.677E-04, 2.553E-04, 3.303E-04, 3.959E-04, 4.259E-04, 8.239E-04, 1.169E-03, 1.260E-03, 1.419E-03, 1.491E-03, 1.623E-03, 1.741E-03, $
1.795E-03, 1.897E-03, 2.035E-03, 2.157E-03, 2.266E-03, 2.333E-03, 2.395E-03, 2.481E-03, 2.609E-03, 2.655E-03, 2.853E-03, 3.239E-03],$
[7.208E-05, 1.931E-04, 2.934E-04, 3.790E-04, 4.538E-04, 4.880E-04, 9.455E-04, 1.351E-03, 1.458E-03, 1.649E-03, 1.734E-03, 1.891E-03, 2.032E-03, $
2.097E-03, 2.219E-03, 2.383E-03, 2.528E-03, 2.658E-03, 2.737E-03, 2.811E-03, 2.913E-03, 3.064E-03, 3.118E-03, 3.351E-03, 3.800E-03],$
[8.128E-05, 2.176E-04, 3.304E-04, 4.269E-04, 5.112E-04, 5.497E-04, 1.069E-03, 1.536E-03, 1.660E-03, 1.881E-03, 1.981E-03, 2.163E-03, 2.327E-03, $
2.403E-03, 2.544E-03, 2.734E-03, 2.903E-03, 3.053E-03, 3.144E-03, 3.229E-03, 3.348E-03, 3.521E-03, 3.584E-03, 3.851E-03, 4.366E-03],$
[8.925E-05, 2.390E-04, 3.631E-04, 4.693E-04, 5.622E-04, 6.047E-04, 1.181E-03, 1.705E-03, 1.845E-03, 2.094E-03, 2.206E-03, 2.412E-03, 2.597E-03, $
2.682E-03, 2.842E-03, 3.056E-03, 3.245E-03, 3.414E-03, 3.517E-03, 3.613E-03, 3.746E-03, 3.941E-03, 4.011E-03, 4.311E-03, 4.887E-03],$
[9.589E-05, 2.570E-04, 3.907E-04, 5.053E-04, 6.057E-04, 6.516E-04, 1.279E-03, 1.852E-03, 2.006E-03, 2.280E-03, 2.404E-03, 2.630E-03, 2.833E-03, $
2.927E-03, 3.103E-03, 3.338E-03, 3.547E-03, 3.732E-03, 3.845E-03, 3.951E-03, 4.097E-03, 4.311E-03, 4.389E-03, 4.718E-03, 5.350E-03],$
[1.013E-04, 2.719E-04, 4.137E-04, 5.354E-04, 6.422E-04, 6.911E-04, 1.362E-03, 1.979E-03, 2.145E-03, 2.440E-03, 2.573E-03, 2.818E-03, 3.037E-03, $
3.139E-03, 3.328E-03, 3.583E-03, 3.808E-03, 4.008E-03, 4.131E-03, 4.245E-03, 4.402E-03, 4.634E-03, 4.717E-03, 5.073E-03, 5.754E-03],$
[1.058E-04, 2.842E-04, 4.328E-04, 5.605E-04, 6.727E-04, 7.242E-04, 1.432E-03, 2.087E-03, 2.263E-03, 2.577E-03, 2.719E-03, 2.979E-03, 3.213E-03, $
3.321E-03, 3.523E-03, 3.794E-03, 4.033E-03, 4.247E-03, 4.377E-03, 4.499E-03, 4.666E-03, 4.913E-03, 5.002E-03, 5.381E-03, 6.108E-03],$
[1.094E-04, 2.943E-04, 4.486E-04, 5.814E-04, 6.983E-04, 7.520E-04, 1.492E-03, 2.180E-03, 2.365E-03, 2.695E-03, 2.844E-03, 3.118E-03, 3.364E-03, $
3.478E-03, 3.690E-03, 3.976E-03, 4.228E-03, 4.453E-03, 4.591E-03, 4.719E-03, 4.896E-03, 5.156E-03, 5.250E-03, 5.649E-03, 6.417E-03],$
[1.124E-04, 3.027E-04, 4.618E-04, 5.989E-04, 7.198E-04, 7.753E-04, 1.544E-03, 2.260E-03, 2.452E-03, 2.797E-03, 2.952E-03, 3.238E-03, 3.494E-03, $
3.613E-03, 3.835E-03, 4.133E-03, 4.397E-03, 4.633E-03, 4.776E-03, 4.910E-03, 5.095E-03, 5.368E-03, 5.466E-03, 5.884E-03, 6.688E-03],$
[1.169E-04, 3.154E-04, 4.821E-04, 6.261E-04, 7.533E-04, 8.119E-04, 1.626E-03, 2.388E-03, 2.593E-03, 2.961E-03, 3.127E-03, 3.432E-03, 3.706E-03, $
3.834E-03, 4.071E-03, 4.391E-03, 4.674E-03, 4.926E-03, 5.080E-03, 5.224E-03, 5.423E-03, 5.716E-03, 5.822E-03, 6.272E-03, 7.139E-03],$
[1.200E-04, 3.244E-04, 4.965E-04, 6.457E-04, 7.777E-04, 8.385E-04, 1.687E-03, 2.485E-03, 2.701E-03, 3.086E-03, 3.261E-03, 3.581E-03, 3.869E-03, $
4.003E-03, 4.253E-03, 4.590E-03, 4.888E-03, 5.154E-03, 5.317E-03, 5.469E-03, 5.679E-03, 5.989E-03, 6.100E-03, 6.577E-03, 7.497E-03],$
[1.221E-04, 3.307E-04, 5.069E-04, 6.599E-04, 7.956E-04, 8.581E-04, 1.734E-03, 2.560E-03, 2.784E-03, 3.183E-03, 3.365E-03, 3.697E-03, 3.997E-03, $
4.136E-03, 4.396E-03, 4.746E-03, 5.057E-03, 5.335E-03, 5.504E-03, 5.663E-03, 5.882E-03, 6.206E-03, 6.323E-03, 6.822E-03, 7.787E-03],$
[1.241E-04, 3.370E-04, 5.174E-04, 6.746E-04, 8.142E-04, 8.787E-04, 1.786E-03, 2.644E-03, 2.877E-03, 3.293E-03, 3.482E-03, 3.828E-03, 4.141E-03, $
4.286E-03, 4.558E-03, 4.925E-03, 5.250E-03, 5.542E-03, 5.720E-03, 5.886E-03, 6.117E-03, 6.458E-03, 6.581E-03, 7.108E-03, 8.129E-03],$
[1.254E-04, 3.415E-04, 5.254E-04, 6.863E-04, 8.295E-04, 8.957E-04, 1.832E-03, 2.721E-03, 2.961E-03, 3.393E-03, 3.589E-03, 3.950E-03, 4.275E-03, $
4.427E-03, 4.710E-03, 5.093E-03, 5.433E-03, 5.738E-03, 5.925E-03, 6.099E-03, 6.342E-03, 6.700E-03, 6.830E-03, 7.385E-03, 8.466E-03]]
exc_3_E_n_H=transpose(exc_3_E_n_H)

;beam exc n=2 coef cm3/sec (boron)
exc_2_E_n_B=[[3.472E-04, 1.017E-03, 1.660E-03, 2.281E-03, 2.884E-03, 3.179E-03, 8.348E-03, 1.424E-02, 1.585E-02, 1.867E-02, 1.992E-02, 2.213E-02, $
2.404E-02, 2.490E-02, 2.646E-02, 2.847E-02, 3.016E-02, 3.161E-02, 3.246E-02, 3.324E-02, 3.429E-02, 3.577E-02, 3.629E-02, 3.840E-02, 4.208E-02],$
[3.479E-04, 1.017E-03, 1.659E-03, 2.279E-03, 2.879E-03, 3.173E-03, 8.300E-03, 1.410E-02, 1.567E-02, 1.842E-02, 1.962E-02, 2.176E-02, 2.360E-02, $
2.443E-02, 2.593E-02, 2.785E-02, 2.946E-02, 3.084E-02, 3.165E-02, 3.239E-02, 3.338E-02, 3.478E-02, 3.527E-02, 3.726E-02, 4.070E-02],$
[3.539E-04, 1.030E-03, 1.675E-03, 2.295E-03, 2.893E-03, 3.185E-03, 8.184E-03, 1.361E-02, 1.505E-02, 1.751E-02, 1.858E-02, 2.045E-02, 2.204E-02, $
2.274E-02, 2.401E-02, 2.562E-02, 2.695E-02, 2.808E-02, 2.874E-02, 2.933E-02, 3.013E-02, 3.124E-02, 3.163E-02, 3.318E-02, 3.583E-02],$
[4.241E-04, 1.221E-03, 1.971E-03, 2.682E-03, 3.360E-03, 3.688E-03, 8.997E-03, 1.416E-02, 1.543E-02, 1.753E-02, 1.841E-02, 1.991E-02, 2.113E-02, $
2.167E-02, 2.261E-02, 2.377E-02, 2.471E-02, 2.549E-02, 2.594E-02, 2.634E-02, 2.686E-02, 2.759E-02, 2.784E-02, 2.882E-02, 3.044E-02],$
[5.611E-04, 1.607E-03, 2.581E-03, 3.497E-03, 4.363E-03, 4.778E-03, 1.128E-02, 1.721E-02, 1.861E-02, 2.088E-02, 2.182E-02, 2.338E-02, 2.465E-02, $
2.519E-02, 2.614E-02, 2.731E-02, 2.823E-02, 2.899E-02, 2.943E-02, 2.981E-02, 3.032E-02, 3.101E-02, 3.124E-02, 3.217E-02, 3.367E-02],$
[7.091E-04, 2.025E-03, 3.245E-03, 4.388E-03, 5.462E-03, 5.977E-03, 1.389E-02, 2.087E-02, 2.249E-02, 2.510E-02, 2.616E-02, 2.793E-02, 2.935E-02, $
2.995E-02, 3.101E-02, 3.230E-02, 3.332E-02, 3.416E-02, 3.463E-02, 3.505E-02, 3.560E-02, 3.635E-02, 3.661E-02, 3.761E-02, 3.923E-02],$
[8.358E-04, 2.384E-03, 3.816E-03, 5.155E-03, 6.412E-03, 7.012E-03, 1.618E-02, 2.416E-02, 2.600E-02, 2.894E-02, 3.013E-02, 3.212E-02, 3.370E-02, $
3.438E-02, 3.557E-02, 3.700E-02, 3.814E-02, 3.906E-02, 3.958E-02, 4.005E-02, 4.066E-02, 4.149E-02, 4.177E-02, 4.288E-02, 4.465E-02],$
[9.340E-04, 2.664E-03, 4.263E-03, 5.756E-03, 7.156E-03, 7.825E-03, 1.801E-02, 2.683E-02, 2.886E-02, 3.210E-02, 3.341E-02, 3.559E-02, 3.734E-02, $
3.808E-02, 3.938E-02, 4.095E-02, 4.220E-02, 4.321E-02, 4.378E-02, 4.429E-02, 4.496E-02, 4.586E-02, 4.617E-02, 4.738E-02, 4.932E-02],$
[1.007E-03, 2.872E-03, 4.596E-03, 6.206E-03, 7.717E-03, 8.438E-03, 1.942E-02, 2.893E-02, 3.112E-02, 3.461E-02, 3.603E-02, 3.838E-02, 4.026E-02, $
4.107E-02, 4.247E-02, 4.416E-02, 4.550E-02, 4.659E-02, 4.721E-02, 4.776E-02, 4.848E-02, 4.945E-02, 4.979E-02, 5.109E-02, 5.318E-02],$
[1.060E-03, 3.025E-03, 4.841E-03, 6.538E-03, 8.131E-03, 8.892E-03, 2.049E-02, 3.057E-02, 3.288E-02, 3.659E-02, 3.809E-02, 4.059E-02, 4.259E-02, $
4.345E-02, 4.493E-02, 4.674E-02, 4.816E-02, 4.932E-02, 4.998E-02, 5.057E-02, 5.133E-02, 5.238E-02, 5.273E-02, 5.412E-02, 5.635E-02],$
[1.098E-03, 3.134E-03, 5.018E-03, 6.780E-03, 8.433E-03, 9.224E-03, 2.130E-02, 3.183E-02, 3.426E-02, 3.814E-02, 3.972E-02, 4.234E-02, 4.445E-02, $
4.535E-02, 4.691E-02, 4.881E-02, 5.031E-02, 5.154E-02, 5.223E-02, 5.285E-02, 5.366E-02, 5.476E-02, 5.513E-02, 5.660E-02, 5.895E-02],$
[1.125E-03, 3.212E-03, 5.145E-03, 6.953E-03, 8.652E-03, 9.464E-03, 2.190E-02, 3.281E-02, 3.533E-02, 3.936E-02, 4.100E-02, 4.374E-02, 4.593E-02, $
4.687E-02, 4.851E-02, 5.049E-02, 5.206E-02, 5.334E-02, 5.406E-02, 5.471E-02, 5.555E-02, 5.671E-02, 5.710E-02, 5.864E-02, 6.110E-02],$
[1.143E-03, 3.266E-03, 5.234E-03, 7.075E-03, 8.807E-03, 9.636E-03, 2.236E-02, 3.357E-02, 3.616E-02, 4.033E-02, 4.203E-02, 4.486E-02, 4.713E-02, $
4.810E-02, 4.980E-02, 5.185E-02, 5.348E-02, 5.481E-02, 5.557E-02, 5.624E-02, 5.712E-02, 5.832E-02, 5.873E-02, 6.033E-02, 6.290E-02],$
[1.162E-03, 3.325E-03, 5.333E-03, 7.215E-03, 8.988E-03, 9.836E-03, 2.294E-02, 3.461E-02, 3.733E-02, 4.171E-02, 4.349E-02, 4.648E-02, 4.888E-02, $
4.991E-02, 5.171E-02, 5.389E-02, 5.563E-02, 5.704E-02, 5.785E-02, 5.856E-02, 5.950E-02, 6.079E-02, 6.122E-02, 6.293E-02, 6.569E-02],$
[1.167E-03, 3.343E-03, 5.367E-03, 7.266E-03, 9.057E-03, 9.915E-03, 2.325E-02, 3.523E-02, 3.804E-02, 4.258E-02, 4.443E-02, 4.754E-02, 5.005E-02, $
5.112E-02, 5.300E-02, 5.529E-02, 5.711E-02, 5.860E-02, 5.945E-02, 6.020E-02, 6.119E-02, 6.254E-02, 6.300E-02, 6.481E-02, 6.773E-02],$
[1.164E-03, 3.338E-03, 5.362E-03, 7.264E-03, 9.061E-03, 9.922E-03, 2.338E-02, 3.558E-02, 3.846E-02, 4.312E-02, 4.503E-02, 4.824E-02, 5.083E-02, $
5.195E-02, 5.389E-02, 5.627E-02, 5.816E-02, 5.971E-02, 6.059E-02, 6.138E-02, 6.241E-02, 6.382E-02, 6.430E-02, 6.619E-02, 6.925E-02],$
[1.152E-03, 3.306E-03, 5.316E-03, 7.209E-03, 8.999E-03, 9.859E-03, 2.338E-02, 3.581E-02, 3.876E-02, 4.356E-02, 4.553E-02, 4.886E-02, 5.155E-02, $
5.271E-02, 5.474E-02, 5.722E-02, 5.921E-02, 6.083E-02, 6.176E-02, 6.258E-02, 6.367E-02, 6.516E-02, 6.566E-02, 6.766E-02, 7.090E-02],$
[1.128E-03, 3.244E-03, 5.222E-03, 7.088E-03, 8.857E-03, 9.708E-03, 2.320E-02, 3.579E-02, 3.880E-02, 4.373E-02, 4.577E-02, 4.920E-02, 5.200E-02, $
5.320E-02, 5.532E-02, 5.791E-02, 5.999E-02, 6.170E-02, 6.267E-02, 6.354E-02, 6.469E-02, 6.626E-02, 6.679E-02, 6.891E-02, 7.234E-02]]
exc_2_E_n_B=transpose(exc_2_E_n_B)

;beam exc n=3 coef cm3/sec (boron)
exc_3_E_n_B=[[2.987E-04, 7.543E-04, 1.099E-03, 1.375E-03, 1.607E-03, 1.710E-03, 3.016E-03, 4.107E-03, 4.381E-03, 4.848E-03, 5.049E-03, 5.404E-03, $
5.706E-03, 5.842E-03, 6.086E-03, 6.398E-03, 6.660E-03, 6.883E-03, 7.015E-03, 7.134E-03, 7.294E-03, 7.520E-03, 7.599E-03, 7.921E-03, 8.479E-03],$
[2.950E-04, 7.332E-04, 1.057E-03, 1.314E-03, 1.527E-03, 1.621E-03, 2.814E-03, 3.815E-03, 4.067E-03, 4.495E-03, 4.680E-03, 5.004E-03, 5.280E-03, $
5.403E-03, 5.626E-03, 5.909E-03, 6.147E-03, 6.348E-03, 6.466E-03, 6.574E-03, 6.718E-03, 6.921E-03, 6.992E-03, 7.280E-03, 7.777E-03],$
[2.901E-04, 6.918E-04, 9.721E-04, 1.188E-03, 1.364E-03, 1.442E-03, 2.424E-03, 3.254E-03, 3.460E-03, 3.809E-03, 3.958E-03, 4.217E-03, 4.435E-03, $
4.532E-03, 4.705E-03, 4.924E-03, 5.104E-03, 5.256E-03, 5.345E-03, 5.425E-03, 5.532E-03, 5.682E-03, 5.733E-03, 5.942E-03, 6.296E-03],$
[3.298E-04, 7.333E-04, 9.951E-04, 1.193E-03, 1.355E-03, 1.427E-03, 2.369E-03, 3.158E-03, 3.346E-03, 3.654E-03, 3.782E-03, 3.999E-03, 4.176E-03, $
4.254E-03, 4.389E-03, 4.557E-03, 4.692E-03, 4.803E-03, 4.867E-03, 4.924E-03, 4.999E-03, 5.103E-03, 5.138E-03, 5.279E-03, 5.510E-03],$
[4.307E-04, 9.373E-04, 1.263E-03, 1.512E-03, 1.718E-03, 1.810E-03, 3.030E-03, 4.024E-03, 4.253E-03, 4.623E-03, 4.774E-03, 5.027E-03, 5.231E-03, $
5.318E-03, 5.471E-03, 5.658E-03, 5.806E-03, 5.928E-03, 5.997E-03, 6.058E-03, 6.139E-03, 6.250E-03, 6.287E-03, 6.436E-03, 6.675E-03],$
[5.442E-04, 1.180E-03, 1.591E-03, 1.907E-03, 2.170E-03, 2.288E-03, 3.856E-03, 5.112E-03, 5.397E-03, 5.853E-03, 6.038E-03, 6.346E-03, 6.593E-03, $
6.698E-03, 6.882E-03, 7.104E-03, 7.281E-03, 7.425E-03, 7.506E-03, 7.579E-03, 7.674E-03, 7.803E-03, 7.847E-03, 8.020E-03, 8.298E-03],$
[6.436E-04, 1.398E-03, 1.889E-03, 2.268E-03, 2.585E-03, 2.728E-03, 4.621E-03, 6.125E-03, 6.465E-03, 7.006E-03, 7.225E-03, 7.588E-03, 7.878E-03, $
8.001E-03, 8.217E-03, 8.477E-03, 8.683E-03, 8.851E-03, 8.946E-03, 9.030E-03, 9.140E-03, 9.291E-03, 9.342E-03, 9.542E-03, 9.863E-03],$
[7.225E-04, 1.575E-03, 2.133E-03, 2.566E-03, 2.928E-03, 3.092E-03, 5.261E-03, 6.980E-03, 7.368E-03, 7.984E-03, 8.232E-03, 8.645E-03, 8.974E-03, $
9.115E-03, 9.359E-03, 9.655E-03, 9.888E-03, 1.008E-02, 1.019E-02, 1.028E-02, 1.041E-02, 1.058E-02, 1.063E-02, 1.086E-02, 1.122E-02],$
[7.824E-04, 1.713E-03, 2.325E-03, 2.801E-03, 3.201E-03, 3.381E-03, 5.776E-03, 7.674E-03, 8.103E-03, 8.783E-03, 9.058E-03, 9.514E-03, 9.878E-03, $
1.003E-02, 1.030E-02, 1.063E-02, 1.089E-02, 1.110E-02, 1.122E-02, 1.132E-02, 1.146E-02, 1.165E-02, 1.171E-02, 1.196E-02, 1.236E-02],$
[8.271E-04, 1.819E-03, 2.475E-03, 2.985E-03, 3.414E-03, 3.608E-03, 6.184E-03, 8.232E-03, 8.694E-03, 9.429E-03, 9.726E-03, 1.022E-02, 1.061E-02, $
1.078E-02, 1.107E-02, 1.143E-02, 1.171E-02, 1.193E-02, 1.206E-02, 1.218E-02, 1.233E-02, 1.253E-02, 1.260E-02, 1.287E-02, 1.330E-02],$
[8.601E-04, 1.899E-03, 2.590E-03, 3.128E-03, 3.581E-03, 3.785E-03, 6.507E-03, 8.678E-03, 9.169E-03, 9.950E-03, 1.027E-02, 1.079E-02, 1.121E-02, $
1.139E-02, 1.170E-02, 1.208E-02, 1.238E-02, 1.262E-02, 1.276E-02, 1.288E-02, 1.304E-02, 1.326E-02, 1.333E-02, 1.362E-02, 1.409E-02],$
[8.842E-04, 1.960E-03, 2.678E-03, 3.239E-03, 3.710E-03, 3.923E-03, 6.763E-03, 9.036E-03, 9.551E-03, 1.037E-02, 1.071E-02, 1.126E-02, 1.170E-02, $
1.189E-02, 1.222E-02, 1.262E-02, 1.293E-02, 1.319E-02, 1.333E-02, 1.346E-02, 1.363E-02, 1.386E-02, 1.394E-02, 1.425E-02, 1.474E-02],$
[9.016E-04, 2.007E-03, 2.747E-03, 3.325E-03, 3.811E-03, 4.031E-03, 6.967E-03, 9.324E-03, 9.861E-03, 1.072E-02, 1.106E-02, 1.164E-02, 1.210E-02, $
1.230E-02, 1.264E-02, 1.306E-02, 1.339E-02, 1.366E-02, 1.381E-02, 1.395E-02, 1.413E-02, 1.437E-02, 1.445E-02, 1.478E-02, 1.529E-02],$
[9.224E-04, 2.068E-03, 2.839E-03, 3.443E-03, 3.952E-03, 4.181E-03, 7.258E-03, 9.748E-03, 1.032E-02, 1.123E-02, 1.160E-02, 1.222E-02, 1.271E-02, $
1.292E-02, 1.329E-02, 1.374E-02, 1.410E-02, 1.439E-02, 1.455E-02, 1.470E-02, 1.489E-02, 1.515E-02, 1.524E-02, 1.559E-02, 1.616E-02],$
[9.312E-04, 2.100E-03, 2.892E-03, 3.513E-03, 4.036E-03, 4.273E-03, 7.445E-03, 1.003E-02, 1.062E-02, 1.158E-02, 1.197E-02, 1.262E-02, 1.314E-02, $
1.336E-02, 1.375E-02, 1.423E-02, 1.460E-02, 1.491E-02, 1.509E-02, 1.524E-02, 1.545E-02, 1.572E-02, 1.582E-02, 1.619E-02, 1.679E-02],$
[9.329E-04, 2.116E-03, 2.921E-03, 3.553E-03, 4.086E-03, 4.327E-03, 7.563E-03, 1.022E-02, 1.083E-02, 1.182E-02, 1.222E-02, 1.290E-02, 1.344E-02, $
1.367E-02, 1.408E-02, 1.458E-02, 1.497E-02, 1.529E-02, 1.548E-02, 1.564E-02, 1.586E-02, 1.615E-02, 1.625E-02, 1.664E-02, 1.728E-02],$
[9.279E-04, 2.120E-03, 2.937E-03, 3.579E-03, 4.120E-03, 4.365E-03, 7.661E-03, 1.039E-02, 1.103E-02, 1.205E-02, 1.247E-02, 1.317E-02, 1.374E-02, $
1.399E-02, 1.442E-02, 1.494E-02, 1.535E-02, 1.570E-02, 1.589E-02, 1.606E-02, 1.629E-02, 1.660E-02, 1.671E-02, 1.713E-02, 1.780E-02],$
[9.146E-04, 2.106E-03, 2.929E-03, 3.577E-03, 4.124E-03, 4.371E-03, 7.707E-03, 1.050E-02, 1.115E-02, 1.221E-02, 1.265E-02, 1.338E-02, 1.397E-02, $
1.423E-02, 1.468E-02, 1.523E-02, 1.567E-02, 1.603E-02, 1.624E-02, 1.642E-02, 1.666E-02, 1.699E-02, 1.711E-02, 1.755E-02, 1.828E-02]]
exc_3_E_n_B=transpose(exc_3_E_n_B)

;second set of data 

;electron temperature keV

T_e_arr=[5.000E+01, 1.000E+02, 2.000E+02, 3.000E+02, 5.000E+02, 6.000E+02, 7.000E+02, 8.000E+02, $
         9.000E+02, 1.000E+03, 1.100E+03, 1.200E+03, 1.300E+03, 1.400E+03, 1.500E+03, 1.600E+03, $
         1.800E+03, 2.000E+03, 2.300E+03, 2.700E+03, 3.000E+03, 5.000E+03, 7.000E+03, 1.000E+04]/1000.0

E_ref=40.0;reference E keV
n_e_ref=1.5e14; reference n_e cm-3
;beam exc n=2 coef cm3/sec (hydrogen)
exc_2_T_H=[1.180E-02, 1.325E-02, 1.391E-02, 1.393E-02, 1.365E-02, 1.350E-02, 1.336E-02, 1.322E-02,$
           1.309E-02, 1.298E-02, 1.287E-02, 1.277E-02, 1.268E-02, 1.259E-02, 1.251E-02, 1.243E-02,$
           1.230E-02, 1.218E-02, 1.202E-02, 1.184E-02, 1.173E-02, 1.124E-02, 1.099E-02, 1.080E-02]

;beam exc n=3 coef cm3/sec (hydrogen)
exc_3_T_H=[2.490E-03, 2.901E-03, 3.126E-03, 3.165E-03, 3.139E-03, 3.114E-03, 3.089E-03, 3.064E-03,$
           3.040E-03, 3.018E-03, 2.997E-03, 2.978E-03, 2.959E-03, 2.942E-03, 2.926E-03, 2.910E-03,$
           2.883E-03, 2.858E-03, 2.825E-03, 2.789E-03, 2.766E-03, 2.670E-03, 2.627E-03, 2.603E-03]

;beam exc n=2 coef cm3/sec (boron)
exc_2_T_B=[4.057E-02, 4.279E-02, 4.382E-02, 4.386E-02, 4.345E-02, 4.321E-02, 4.298E-02, 4.276E-02,$
           4.256E-02, 4.237E-02, 4.219E-02, 4.203E-02, 4.188E-02, 4.174E-02, 4.160E-02, 4.148E-02,$
           4.125E-02, 4.105E-02, 4.079E-02, 4.050E-02, 4.032E-02, 3.958E-02, 3.928E-02, 3.918E-02]

;beam exc n=3 coef cm3/sec (boron)
exc_3_T_B=[9.564E-03, 1.037E-02, 1.078E-02, 1.084E-02, 1.078E-02, 1.073E-02, 1.068E-02, 1.062E-02,$
           1.058E-02, 1.053E-02, 1.049E-02, 1.044E-02, 1.041E-02, 1.037E-02, 1.034E-02, 1.030E-02,$
           1.024E-02, 1.019E-02, 1.012E-02, 1.005E-02, 9.998E-03, 9.806E-03, 9.740E-03, 9.739E-03]


;calculation of total stopping coefficient
;calculation of the Boron and Hydrogen fractions based on the
;assumption of two species plasma. If density of the other ions can be
;measured it's cross sections can be easily added.
f_B=Z_H*(Z_eff-Z_H)/(Z_H*(Z_eff-Z_H)+Z_B*(Z_B-Z_eff))
f_H=1-f_B


n_e_equiv_B=(n_e/(Z_H*f_H+Z_B*F_B))*(Z_H^2*F_H+Z_B^2*f_B)/Z_B
n_e_equiv_H=(n_e/(Z_H*f_H+Z_B*F_B))*(Z_H^2*F_H+Z_B^2*f_B)/Z_H


exc_2_H=interpolate(exc_2_E_n_H,interpol(indgen(n_elements(E_arr)),E_arr,E),interpol(indgen(n_elements(n_e_arr)),n_e_arr,n_e_equiv_H),/Grid)*$
interpol(exc_2_T_H,T_e_arr,T_e)/$
interpol(exc_2_T_H,T_e_arr,T_e_ref)


exc_3_H=interpolate(exc_3_E_n_H,interpol(indgen(n_elements(E_arr)),E_arr,E),interpol(indgen(n_elements(n_e_arr)),n_e_arr,n_e_equiv_H),/Grid)*$
interpol(exc_3_T_H,T_e_arr,T_e)/$
interpol(exc_3_T_H,T_e_arr,T_e_ref)


exc_2_B=interpolate(exc_2_E_n_B,interpol(indgen(n_elements(E_arr)),E_arr,E),interpol(indgen(n_elements(n_e_arr)),n_e_arr,n_e_equiv_B),/Grid)*$
interpol(exc_2_T_B,T_e_arr,T_e)/$
interpol(exc_2_T_B,T_e_arr,T_e_ref)

exc_3_B=interpolate(exc_3_E_n_B,interpol(indgen(n_elements(E_arr)),E_arr,E),interpol(indgen(n_elements(n_e_arr)),n_e_arr,n_e_equiv_B),/Grid)*$
interpol(exc_3_T_B,T_e_arr,T_e)/$
interpol(exc_3_T_B,T_e_arr,T_e_ref)


exc_2_total=(Z_H*F_H*exc_2_H+Z_B*F_B*exc_2_B)/(Z_H*F_H+Z_B*F_B)
exc_3_total=(Z_H*F_H*exc_3_H+Z_B*F_B*exc_3_B)/(Z_H*F_H+Z_B*F_B)
return,[exc_2_total,exc_3_total]
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Fuction is used to calculate the stoppping of the
;beam traveling through plasma defined by local parameters of
;ne,te Suzuki, Plasma Physics and Controlled Fusion, 40(1988)
;------------------------------------------------------------------------------------------------------------------------- 
function S_Suzuki_full,E,n_e,t_e,Z_eff
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution)
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
;The following common block contains the parameters which describe
;some relative non-geometrical global parameters of the plasma
common plasma_param, main_ion,n_impur,impur_table
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return,[n_e<0]
   endif
 endif
;----------------------------------------------------- 
;beam atom
beam_atom_table=['H','D','T']
beam_atom_mass=[1.0,2.0,3.0]
m_atom=(beam_atom_mass(where(beam_atom_table eq beam_atom)))(0)
E=E/m_atom 

  n0=1e13
  t_e=reform(t_e>0.1)
  t_e=t_e>E/100.0
  n_e=reform(n_e>1e12)
  z_eff=reform(z_eff)
  eps=alog(E)
  U=alog(t_e)
  n=n_e/n0

  if (main_ion ne 'H' and main_ion ne 'D') or impur_table(0) ne 'B' or n_elements(impur_table) gt 3 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Suzuki stopping cross-sections can be only used for H or D plasma and B impurity']], Set_text_top_line=n_elements(status_tx)-4
     st_err=1
     return,[n_e<0]
  endif

  if main_ion eq 'H' then A=[0,-5.29e1,-1.36e0,7.19e-2,1.37e-2,4.54e-1,4.03e-1,-2.20e-1,6.66e-2,-6.77e-2,-1.48e-3]; for hydrogen plasmas
  if main_ion eq 'D' then A=[0,-6.79e1,-1.22e0,8.14e-2,1.39e-2,4.54e-1,4.65e-1,-2.73e-1,7.51e-2,-6.30e-2,-5.08e-4];for deuterium plasmas
  ;B=[[[-2.36,8.49e-1,-5.88e-2],[-2.5e-1,6.77e-2,-4.88e-3]],[[1.85e-1,-4.78e-2,4.34e-3],[-3.81e-2,1.05e-2,-6.76e-4]]];He impurity
  B=[[[1.22e-1,-1.51e-1,4.2e-2],[-4.3e-4,3.43e-3,-1.41e-3]],[[5.27e-2,-3.64e-2,6.92e-3],[-3.18e-3,1.51e-3,-2.90e-4]]];B impurity
  if (size(n_e))(0) eq 1 then dim=[1,1] 
  if (size(n_e))(0) eq 2 then dim=[(size(n_e))(1),1]
  if (size(n_e))(0) eq 3 then dim=(size(n_e))([1,2])
  stop_cross_sect=fltarr(dim)
  for i=0, dim(0)-1 do begin
    for j=0, dim(1)-1 do begin
      n=n_e(i,j)/n0
      T=T_e(i,j)
      X=[[[alog(E)^0*alog(n)^0*alog(T)^0],[alog(E)^1*alog(n)^0*alog(T)^0],[alog(E)^2*alog(n)^0*alog(T)^0],$
          [alog(E)^0*alog(n)^1*alog(T)^0],[alog(E)^1*alog(n)^1*alog(T)^0],[alog(E)^2*alog(n)^1*alog(T)^0]],$
         [[alog(E)^0*alog(n)^0*alog(T)^1],[alog(E)^1*alog(n)^0*alog(T)^1],[alog(E)^2*alog(n)^0*alog(T)^1],$
          [alog(E)^0*alog(n)^1*alog(T)^1],[alog(E)^1*alog(n)^1*alog(T)^1],[alog(E)^2*alog(n)^1*alog(T)^1]]]
      s_Z_Suzuki=total(B*X)
      stop_cross_sect(i,j)=A(1)*1e-16/E*(1+A(2)*eps+A(3)*eps^2)*(1+(1-exp(-A(4)*n))^A(5)*(A(6)+A(7)*eps+A(8)*eps^2))*$
      (1+A(9)*U(i,j)+A(10)*U(i,j)^2)*(1+(Z_eff(i,j)-1)*s_Z_Suzuki)
    endfor
  endfor
return,reform(stop_cross_sect)
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Fuction is used to calculate the stoppping of the
;beam traveling through plasma defined by local parameters of
;ne,te,z_eff (ADAS data)
;------------------------------------------------------------------------------------------------------------------------- 
function s_adas_full,E,n_e,t_e,z_eff
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution)
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
;The following block contains structures of ADAS data
common adas_data, adas_stop,adas_exc2,adas_exc3
;The following common block contains the parameters which describe
;some relative non-geometrical global parameters of the plasma
common plasma_param, main_ion,n_impur,impur_table
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return,[n_e<0]
   endif
 endif
;----------------------------------------------------- 
main_ion_table=['D','H','He']
main_ion_z=[1.0,1.0,2.0]
ion_z=[main_ion_z(where(main_ion_table eq main_ion)),float(impur_table(*,1))]
imp_fr=float(impur_table(*,2))

;beam atom
beam_atom_table=['H','D','T']
beam_atom_mass=[1.0,2.0,3.0]
m_atom=(beam_atom_mass(where(beam_atom_table eq beam_atom)))(0)
E=E/m_atom

;firts set of data

;T_e=(T_e>0.1)<3.0 ; 3keV is the limit for this set of the excitation cross sections


;calculation of the real fraction (density of each plasma ion
;(including impurities) divided by the summ of all densities of all
;ions
;z_eff=1.5
;n_e=8e14
;E=1.2e5
;t_e=0.5
if (where(z_eff lt ion_z(0)))(0) ne -1 then begin
   Widget_control, status_wid, Get_Value=status_tx
   Widget_Control, status_wid,$
   Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Z_eff is lower than main ion charge']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
endif
data_fr={fr:z_eff<0.0}
ion_fr=replicate(data_fr,n_impur+1)
ion_fr(0).fr(where(z_eff ne 0.0))=1/ion_z(0)
for i=1,n_impur do begin
  if max(z_eff) ne 0.0 then ion_fr(i).fr(where(z_eff ne 0.0))=imp_fr(i-1)*(z_eff(where(z_eff ne 0.0))-ion_z(0))/(total(imp_fr*ion_z(1:*)^2.0)-ion_z(0)*total(imp_fr*ion_z(1:*)))
  ion_fr(0).fr(where(z_eff ne 0.0))=ion_fr(0).fr(where(z_eff ne 0.0))-1.0/ion_z(0)*ion_fr(i).fr(where(z_eff ne 0.0))*ion_z(i)
endfor
;calculation of the used sums
sum1=ion_z(0)*ion_fr(0).fr
sum2=ion_z(0)^2.0*ion_fr(0).fr
for i=1,n_impur do begin
  sum1=sum1+ion_z(i)*ion_fr(i).fr
  sum2=sum2+ion_z(i)^2.0*ion_fr(i).fr
endfor
;calculation of the euqivavent electron densities
stop_total=n_e*0.0 ;new array
for i=0,n_impur do begin
  n_e_equiv=n_e/sum1*sum2/ion_z(i)
  st_c=interpolate(adas_stop(i).fract_arr,interpol(indgen(n_elements(adas_stop(i).E_arr)),adas_stop(i).E_arr,E),interpol(indgen(n_elements(adas_stop(i).n_arr)),adas_stop(i).n_arr,n_e_equiv),/Grid)*$
  interpol(adas_stop(i).ref_fract_arr,adas_stop(i).t_arr,T_e)/$
  interpol(adas_stop(i).ref_fract_arr,adas_stop(i).t_arr,adas_stop(i).t_ref)

  stop_total=stop_total+ion_z(i)*ion_fr(i).fr*st_c/sum1

endfor

vel=SQRT(2.0*1.602E-19*E*1000.0/1.673E-27)*100.0 ; cm/sec

Stop_cross_sect=stop_total/vel
return,stop_cross_sect
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which displays the "Save Parameters" window on event when "Save
;parameters to file" button is pressed.
;-------------------------------------------------------------------------------------------------------------------------
pro show_save_param_window, main_base
;The following common block contains some of the settings of "saving
;parameters to the file"
common save_param, save_param_file
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
    geom=Widget_Info(Main_Base,/Geometry)
    IF XREGISTERED('Save_Param_Widget') EQ 0 then begin
      Save_Param_Widget = WIDGET_BASE(/COLUMN, TITLE='Save_Param', Uname='Save_Param_Widget',/ALIGN_CENTER,XOFFSET=geom.xoffset+300,YOFFSET=geom.yoffset+geom.ysize-626,xsize=423,ysize=163)
      Save_Param_Base = Widget_base(Save_Param_Widget, UNAME='Save_Param_Base'  $
      ,XOFFSET=5,YOFFSET=5,Frame=1$
      ,XSIZE=410,YSIZE=158)
      
        
      Save_Param_label = Widget_Label(Save_Param_Base, UNAME='Save_Param_Label'  $
      ,XOFFSET=3, YOFFSET=1, SCR_XSIZE=407 , SCR_YSIZE=33 $
      ,VALUE= 'Save input parameters and data to an ALCBEAM input file (*.abi)', XSIZE=5 ,YSIZE=23, /Align_Center,/sunken_frame)    
 
      Filename_Text = Widget_text(Save_Param_Base, UNAME='Filename_Text'  $
      ,XOFFSET=70, YOFFSET=40,SCR_XSIZE=343 ,SCR_YSIZE=30,/editable $
      ,VALUE=save_param_file,XSIZE=20 ,YSIZE=1)

      Filename_Label = Widget_Label(Save_Param_Base, UNAME='Filename_Label'  $
      ,XOFFSET=8, YOFFSET=40, SCR_XSIZE=100 , SCR_YSIZE=33 $
      ,VALUE= 'Filename:' ,XSIZE=5 ,YSIZE=1,/align_left)     
     
      Save_Param_Save_Button = Widget_Button(Save_Param_Base, UNAME='Save_Param_Save_Button'  $
      ,XOFFSET=4, YOFFSET=120, SCR_XSIZE=120, SCR_YSIZE=25 $
      ,VALUE= 'Save to file' ,XSIZE=25 ,YSIZE=25, /Align_Center)
    
      Save_Param_Close_Button = Widget_Button(Save_Param_Base, UNAME='Save_Param_Close_Button'  $
      ,XOFFSET=148, YOFFSET=120, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Close' ,XSIZE=25 ,YSIZE=25, /Align_Center)


      WIDGET_CONTROL, Save_Param_Base, /REALIZE
      XMANAGER, 'Save_Param_Widget', Save_Param_Widget, /No_block,Group_Leader=Main_Base
    endif
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which displays the "Export" window on event when "Export"
; button is pressed.
;-------------------------------------------------------------------------------------------------------------------------
pro show_export_window, main_base
;the following commonblock contains the id of the main widget
common main_widget,widget_id, driver_id
;The following common block contains some of the settings of "export
;data to the file"
common export_file, export_file,export_sel,export_flag
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
    widget_id=Main_base
    geom=Widget_Info(Main_Base,/Geometry)
    IF XREGISTERED('Export_Widget') EQ 0 then begin
      Export_Widget = WIDGET_BASE(/COLUMN, TITLE='Export Graph Settings', Uname='Export_Widget',/ALIGN_CENTER,XOFFSET=geom.xoffset+462,YOFFSET=geom.yoffset+geom.ysize-300,xsize=423,ysize=163)
      Export_Base = Widget_base(Export_Widget, UNAME='Export_Base'  $
      ,XOFFSET=5,YOFFSET=5,Frame=1$
      ,XSIZE=410,YSIZE=158)
      
        
      Export_label = Widget_Label(Export_Base, UNAME='Export_Label'  $
      ,XOFFSET=3, YOFFSET=1, SCR_XSIZE=407 , SCR_YSIZE=33 $
      ,VALUE= 'Export graph to image(*.png) or ascii-text(*.adat) file', XSIZE=5 ,YSIZE=23, /Align_Center,/sunken_frame)    
 
      Export_Filename_Text = Widget_text(Export_Base, UNAME='Export_Filename_Text'  $
      ,XOFFSET=70, YOFFSET=40,SCR_XSIZE=343 ,SCR_YSIZE=30,/editable $
      ,VALUE=export_file,XSIZE=20 ,YSIZE=1)

      Export_Filename_Label = Widget_Label(Export_Base, UNAME='Export_Filename_Label'  $
      ,XOFFSET=8, YOFFSET=40, SCR_XSIZE=100 , SCR_YSIZE=33 $
      ,VALUE= 'Filename:' ,XSIZE=5 ,YSIZE=1,/align_left) 

      Export_Select = CW_BGROUP(Export_Base, ['graph (*.png)','ascii-text (*.adat)'], UNAME='Export_Select' ,XOFFSET=8$
      ,YOFFSET=80 ,/EXCLUSIVE, Space=10, Ypad=0,column=4)    
     
      Widget_Control, Export_Select,Set_value=export_sel
      

      Export_Save_Button = Widget_Button(Export_Base, UNAME='Export_Save_Button'  $
      ,XOFFSET=4, YOFFSET=120, SCR_XSIZE=120, SCR_YSIZE=25 $
      ,VALUE= 'Export to file' ,XSIZE=25 ,YSIZE=25, /Align_Center)
    
      Export_Close_Button = Widget_Button(Export_Base, UNAME='Export_Close_Button'  $
      ,XOFFSET=148, YOFFSET=120, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Close' ,XSIZE=25 ,YSIZE=25, /Align_Center)


      WIDGET_CONTROL, Export_Base, /REALIZE
      XMANAGER, 'Export_Widget', Export_Widget, /No_block,Group_Leader=Main_Base
    endif
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which displays the "Save Run Settings" window on event when "Save
;settings to file" button is pressed.
;-------------------------------------------------------------------------------------------------------------------------
pro show_save_set_window, main_base
;The following common block contains some of the settings of "saving
;run settings to the file"
common settings_file, save_set_file
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
    geom=Widget_Info(Main_Base,/Geometry)
    IF XREGISTERED('Save_Set_Widget') EQ 0 then begin
      Save_Set_Widget = WIDGET_BASE(/COLUMN, TITLE='Save Run Settings', Uname='Save_Set_Widget',/ALIGN_CENTER,XOFFSET=geom.xoffset+300,YOFFSET=geom.yoffset+geom.ysize-626,xsize=423,ysize=163)
      Save_Set_Base = Widget_base(Save_Set_Widget, UNAME='Save_Set_Base'  $
      ,XOFFSET=5,YOFFSET=5,Frame=1$
      ,XSIZE=410,YSIZE=158)
      
        
      Save_Set_label = Widget_Label(Save_Set_Base, UNAME='Save_Set_Label'  $
      ,XOFFSET=3, YOFFSET=1, SCR_XSIZE=407 , SCR_YSIZE=33 $
      ,VALUE= 'Save run settings to an ALCBEAM settings file (*.aset)', XSIZE=5 ,YSIZE=23, /Align_Center,/sunken_frame)    
 
      Save_Set_Filename_Text = Widget_text(Save_Set_Base, UNAME='Save_Set_Filename_Text'  $
      ,XOFFSET=70, YOFFSET=40,SCR_XSIZE=343 ,SCR_YSIZE=30,/editable $
      ,VALUE=save_set_file,XSIZE=20 ,YSIZE=1)

      Save_Set_Filename_Label = Widget_Label(Save_Set_Base, UNAME='Save_Set_Filename_Label'  $
      ,XOFFSET=8, YOFFSET=40, SCR_XSIZE=100 , SCR_YSIZE=33 $
      ,VALUE= 'Filename:' ,XSIZE=5 ,YSIZE=1,/align_left)     
     
      Save_Set_Save_Button = Widget_Button(Save_Set_Base, UNAME='Save_Set_Save_Button'  $
      ,XOFFSET=4, YOFFSET=120, SCR_XSIZE=120, SCR_YSIZE=25 $
      ,VALUE= 'Save to file' ,XSIZE=25 ,YSIZE=25, /Align_Center)
    
      Save_Set_Close_Button = Widget_Button(Save_Set_Base, UNAME='Save_Set_Close_Button'  $
      ,XOFFSET=148, YOFFSET=120, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Close' ,XSIZE=25 ,YSIZE=25, /Align_Center)


      WIDGET_CONTROL, Save_Set_Base, /REALIZE
      XMANAGER, 'Save_Set_Widget', Save_Set_Widget, /No_block,Group_Leader=Main_Base
    endif
end
;-------------------------------------------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------------------------------------------
;Procedure which displays the "Load Run Settings" window on event when "Load
;settings from file" button is pressed.
;-------------------------------------------------------------------------------------------------------------------------
pro show_load_set_window, main_base
;The following common block contains some of the settings of "saving
;run settings to the file"
common settings_file, save_set_file
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
    geom=Widget_Info(Main_Base,/Geometry)
    IF XREGISTERED('Load_Set_Widget') EQ 0 then begin
      Load_Set_Widget = WIDGET_BASE(/COLUMN, TITLE='Load Run Settings', Uname='Load_Set_Widget',/ALIGN_CENTER,XOFFSET=geom.xoffset+300,YOFFSET=geom.yoffset+geom.ysize-626,xsize=423,ysize=163)
      Load_Set_Base = Widget_base(Load_Set_Widget, UNAME='Load_Set_Base'  $
      ,XOFFSET=5,YOFFSET=5,Frame=1$
      ,XSIZE=410,YSIZE=158)
      
        
      Load_Set_label = Widget_Label(Load_Set_Base, UNAME='Load_Set_Label'  $
      ,XOFFSET=3, YOFFSET=1, SCR_XSIZE=407 , SCR_YSIZE=33 $
      ,VALUE= 'Load run settings from an ALCBEAM settings file (*.aset)', XSIZE=5 ,YSIZE=23, /Align_Center,/sunken_frame)    
 
      Load_Set_Filename_Text = Widget_text(Load_Set_Base, UNAME='Load_Set_Filename_Text'  $
      ,XOFFSET=70, YOFFSET=40,SCR_XSIZE=343 ,SCR_YSIZE=30,/editable $
      ,VALUE=save_set_file,XSIZE=20 ,YSIZE=1)

      Load_Set_Filename_Label = Widget_Label(Load_Set_Base, UNAME='Load_Set_Filename_Label'  $
      ,XOFFSET=8, YOFFSET=40, SCR_XSIZE=100 , SCR_YSIZE=33 $
      ,VALUE= 'Filename:' ,XSIZE=5 ,YSIZE=1,/align_left)     
     
      Load_Set_Load_Button = Widget_Button(Load_Set_Base, UNAME='Load_Set_Load_Button'  $
      ,XOFFSET=4, YOFFSET=120, SCR_XSIZE=120, SCR_YSIZE=25 $
      ,VALUE= 'Load from file' ,XSIZE=25 ,YSIZE=25, /Align_Center)
    
      Load_Set_Close_Button = Widget_Button(Load_Set_Base, UNAME='Load_Set_Close_Button'  $
      ,XOFFSET=148, YOFFSET=120, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Close' ,XSIZE=25 ,YSIZE=25, /Align_Center)


      WIDGET_CONTROL, Load_Set_Base, /REALIZE
      XMANAGER, 'Load_Set_Widget', Load_Set_Widget, /No_block,Group_Leader=Main_Base
    endif
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which displays the "Driver Settings" window on event when
;Driver "Settings" button is pressed.
;-------------------------------------------------------------------------------------------------------------------------
pro show_driver_window, main_base
;the following commonblock contains the id of the main widget
common main_widget,widget_id, driver_id
;The following common block which contains the settings for the
;ALCBEAM driver
common driver_settings, driver_shots, driver_set_file,driver_time
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
    geom=Widget_Info(Main_Base,/Geometry)
    IF XREGISTERED('Driver_Widget') EQ 0 then begin
      Driver_Widget = WIDGET_BASE(/COLUMN, TITLE='ALCBEAM driver', Uname='Driver_Widget',/ALIGN_CENTER,XOFFSET=geom.xoffset+470,YOFFSET=geom.yoffset+geom.ysize-790,xsize=495,ysize=365)
      Driver_Base = Widget_base(Driver_Widget, UNAME='Driver_Base'  $
      ,XOFFSET=5,YOFFSET=5,Frame=1$
      ,XSIZE=410,YSIZE=360)
      driver_id=driver_widget
        
      Driver_label = Widget_Label(Driver_Base, UNAME='Driver_Label'  $
      ,XOFFSET=3, YOFFSET=1, SCR_XSIZE=482 , SCR_YSIZE=33 $
      ,VALUE= 'ALCBEAM driver to run ALCBEAM for multiple shots', XSIZE=5 ,YSIZE=23, /Align_Center,/sunken_frame)    
 
      Driver_Filename_Label = Widget_Label(Driver_Base, UNAME='Driver_Filename_Label'  $
      ,XOFFSET=8, YOFFSET=40, SCR_XSIZE=460 , SCR_YSIZE=33 $
      ,VALUE= 'Select the (*.aset) file which holds ALCBEAM settings to be used by driver' ,XSIZE=5 ,YSIZE=1,/align_left)     

      Driver_Filename_Text = Widget_text(Driver_Base, UNAME='Driver_Filename_Text'  $
      ,XOFFSET=70, YOFFSET=75,SCR_XSIZE=420 ,SCR_YSIZE=30,/editable $
      ,VALUE=driver_set_file,XSIZE=20 ,YSIZE=1)

      Driver_Filename_Label = Widget_Label(Driver_Base, UNAME='Driver_Filename_Label'  $
      ,XOFFSET=8, YOFFSET=75, SCR_XSIZE=100 , SCR_YSIZE=33 $
      ,VALUE= 'Filename:' ,XSIZE=5 ,YSIZE=1,/align_left)     

      Driver_Shots_Label = Widget_Label(Driver_Base, UNAME='Driver_Shots_Label'  $
      ,XOFFSET=8, YOFFSET=110, SCR_XSIZE=460 , SCR_YSIZE=33 $
      ,VALUE= 'Select the shot numbers to be run by driver (1,2 or 3-5)' ,XSIZE=5 ,YSIZE=1,/align_left)     

      Driver_Shots_Text = Widget_text(Driver_Base, UNAME='Driver_Shots_Text'  $
      ,XOFFSET=70, YOFFSET=145,SCR_XSIZE=220 ,SCR_YSIZE=30,/editable $
      ,VALUE=driver_shots,XSIZE=20 ,YSIZE=1)

      Driver_Shots_Label = Widget_Label(Driver_Base, UNAME='Driver_Shots_Label'  $
      ,XOFFSET=8, YOFFSET=145, SCR_XSIZE=100 , SCR_YSIZE=33 $
      ,VALUE= 'Shots:' ,XSIZE=5 ,YSIZE=1,/align_left)      
 
      Driver_Time_Text = Widget_text(Driver_Base, UNAME='Driver_Time_Text'  $
      ,XOFFSET=120, YOFFSET=175,SCR_XSIZE=50 ,SCR_YSIZE=30,/editable $
      ,VALUE=driver_time,XSIZE=20 ,YSIZE=1) 
      
      Driver_Time_Label = Widget_Label(Driver_Base, UNAME='Driver_Time_Label'  $
      ,XOFFSET=8, YOFFSET=175, SCR_XSIZE=150 , SCR_YSIZE=33 $
      ,VALUE= 'Start from (sec):' ,XSIZE=5 ,YSIZE=1,/align_left)      

      Run_Driver_Button = Widget_Button(Driver_Base, UNAME='Run_Driver_Button'  $
      ,XOFFSET=4, YOFFSET=220, SCR_XSIZE=120, SCR_YSIZE=25 $
      ,VALUE= 'Run Driver' ,XSIZE=25 ,YSIZE=25, /Align_Center)
    
      Driver_Quit_Button = Widget_Button(Driver_Base, UNAME='Driver_Quit_Button'  $
      ,XOFFSET=370, YOFFSET=220, SCR_XSIZE=120, SCR_YSIZE=25 $
      ,VALUE= 'Quit Driver' ,XSIZE=25 ,YSIZE=25, /Align_Center)

      geom=Widget_Info(Driver_Base,/Geometry)
      Driver_Status_wid = Widget_Text(Driver_Base, UNAME='Driver_Status_Text'  $
      ,YOFFSET=geom.ysize-35-73, XOFFSET=6, SCR_YSIZE=33+70 ,SCR_XSIZE=geom.xsize-13$
      ,VALUE=[[''],[''],[''],['0:>>> Driver is ready']] ,XSIZE=20 ,YSIZE=1,/SCROLL)


      WIDGET_CONTROL, Driver_Base, /REALIZE
      XMANAGER, 'Driver_Widget', Driver_Widget, /No_block,Group_Leader=Main_Base
    endif
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which displays the "Neutral Gas" window on event when "Neutral
;Gas" button is pressed.
;-------------------------------------------------------------------------------------------------------------------------
pro show_neutral_gas_window, main_base
;The following common block contains neutral gas parameters used in
;calculation of the beam attenuation in the gas
common neutral_gas,tank_pressure,torus_pressure,duct_pressure,duct_pressure_loc,n0_arr,n0_stop_cross_section
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
    geom=Widget_Info(Main_Base,/Geometry)
    IF XREGISTERED('Neutral_Gas_Widget') EQ 0 then begin
      Neutral_Gas_Widget = WIDGET_BASE(/COLUMN, TITLE='Neutral Gas', Uname='Neutral_Gas_Widget',/ALIGN_CENTER,XOFFSET=geom.xoffset+300,YOFFSET=geom.yoffset+geom.ysize-626,xsize=423,ysize=263)
      Neutral_Gas_Base = Widget_base(Neutral_Gas_Widget, UNAME='Neutral_Gas_Base'  $
      ,XOFFSET=5,YOFFSET=5,Frame=1$
      ,XSIZE=410,YSIZE=258)
      
        
      Neutral_Gas_label = Widget_Label(Neutral_Gas_Base, UNAME='Neutral_Gas_Label'  $
      ,XOFFSET=3, YOFFSET=1, SCR_XSIZE=407 , SCR_YSIZE=33 $
      ,VALUE= 'Parameters specifying neutral gas distribution' ,XSIZE=5 ,YSIZE=23, /Align_Center,/sunken_frame)    
 
      P_Tank_Text = Widget_text(Neutral_Gas_Base, UNAME='P_Tank_Text'  $
      ,XOFFSET=366, YOFFSET=40,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(tank_pressure,format='(F10.3)'),1),XSIZE=20 ,YSIZE=1)

      P_Tank_Label = Widget_Label(Neutral_Gas_Base, UNAME='P_Tank_Label'  $
      ,XOFFSET=8, YOFFSET=40, SCR_XSIZE=350 , SCR_YSIZE=33, /Align_left $
      ,VALUE= 'Pressure in the beam tank (uniform in the tank), mtorr' ,XSIZE=5 ,YSIZE=1)     

      
      P_Torus_Text = Widget_Text(Neutral_Gas_Base, UNAME='P_Torus_Text'  $
      ,XOFFSET=366, YOFFSET=70,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(torus_pressure,format='(F10.3)'),1),XSIZE=20 ,YSIZE=1)

      
      P_Torus_Label = Widget_Label(Neutral_Gas_Base, UNAME='P_Torus_Label'  $
      ,XOFFSET=8, YOFFSET=70, SCR_XSIZE=350 , SCR_YSIZE=33, /Align_left $
      ,VALUE= 'Pressure in the torus (uniform in the torus), mtorr' ,XSIZE=5 ,YSIZE=1)

       
      Z_Duct_Text = Widget_Text(Neutral_Gas_Base, UNAME='Z_Duct_Text'  $
      ,XOFFSET=366, YOFFSET=130,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(duct_pressure_loc,format='(F10.3)'),1),XSIZE=20 ,YSIZE=1)
      
      Z_Duct_Label = Widget_Label(Neutral_Gas_Base, UNAME='Z_Duct_Label'  $
      ,XOFFSET=8, YOFFSET=130, SCR_XSIZE=350 , SCR_YSIZE=33, /Align_left $
      ,VALUE= 'Distance from tank wall to the pressure gauge, m' ,XSIZE=5 ,YSIZE=1)
   

      P_Duct_Text = Widget_Text(Neutral_Gas_Base, UNAME='P_Duct_Text'  $
      ,XOFFSET=366, YOFFSET=160,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(duct_pressure,format='(F10.3)'),1),XSIZE=20 ,YSIZE=1)

      
      P_Duct_Label = Widget_Label(Neutral_Gas_Base, UNAME='P_Duct_Label'  $
      ,XOFFSET=8, YOFFSET=160, SCR_XSIZE=350 , SCR_YSIZE=33, /Align_left $
      ,VALUE= 'Pressure in the duct, mtorr' ,XSIZE=5 ,YSIZE=1)
       

      Neutral_Gas_Save_Button = Widget_Button(Neutral_Gas_Base, UNAME='Neutral_Gas_Save_Button'  $
      ,XOFFSET=4, YOFFSET=230, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Save' ,XSIZE=25 ,YSIZE=25, /Align_Center)
    
      Neutral_Gas_Close_Button = Widget_Button(Neutral_Gas_Base, UNAME='Neutral_Gas_Close_Button'  $
      ,XOFFSET=108, YOFFSET=230, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Close' ,XSIZE=25 ,YSIZE=25, /Align_Center)


      WIDGET_CONTROL, Neutral_Gas_Base, /REALIZE
      XMANAGER, 'Neutral_Gas_Widget', Neutral_Gas_Widget, /No_block,Group_Leader=Main_Base
    endif
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which shows the "Settings" window for Construct base on event when "Settings" button is pressed.
;-------------------------------------------------------------------------------------------------------------------------
pro show_construct_settings_window, main_base
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration calculation
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, $
stop_plasma_type_names,exc_plasma_type, exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for calculation
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, $
tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
   geom=Widget_Info(main_base,/Geometry)
    IF XREGISTERED('Construct_Settings_Widget') EQ 0 then begin
      Construct_Settings_Widget = WIDGET_BASE(/COLUMN, TITLE='Construct Input 3D and 4D Arrays - Settings', Uname='Construct_Settings_Widget',$
/ALIGN_CENTER,XOFFSET=geom.xoffset+300,YOFFSET=geom.yoffset+geom.ysize-626,xsize=393,ysize=479)
      Construct_Settings_Base = Widget_base(Construct_Settings_Widget, UNAME='Construct_Settings_Base'  $
      ,XOFFSET=0,YOFFSET=0,Frame=0$
      ,XSIZE=393,YSIZE=479)
      Construct_Settings_label = Widget_Label(Construct_Settings_Base, UNAME='Construct_Settings_Label'  $
      ,XOFFSET=1, YOFFSET=1, SCR_XSIZE=390 , SCR_YSIZE=33 $
      ,VALUE= 'Choose the settings for consructing the needed data arrays' ,XSIZE=5 ,YSIZE=23, /Align_Center,/sunken_frame)
      
      Flux_surf_label = Widget_Label(Construct_Settings_Base, UNAME='flux_surf_arr_Label'  $
      ,XOFFSET=3, YOFFSET=40, SCR_XSIZE=220 , SCR_YSIZE=33 $
      ,VALUE= 'Flux surface mapping from:' ,XSIZE=5 ,YSIZE=23,/Align_left)     
      
      Flux_Surf_Arr_Type_Droplist=Widget_Droplist(Construct_Settings_Base, UNAME='Flux_Surf_Arr_Type_Droplist'$
      ,XOFFSET=220,YOFFSET=39,XSIZE=100,YSIZE=15,value=flux_surf_names)
      
      Widget_Control, Flux_Surf_Arr_Type_Droplist,Set_droplist_select=flux_surf_arr_type     
           
      Ne_arr_label = Widget_Label(Construct_Settings_Base, UNAME='Ne_arr_Label'  $
      ,XOFFSET=3, YOFFSET=72, SCR_XSIZE=220 , SCR_YSIZE=33 $
      ,VALUE= 'Electron density 3D array from:' ,XSIZE=5 ,YSIZE=23,/Align_left)     
      
      Ne_Arr_Type_Droplist=Widget_Droplist(Construct_Settings_Base, UNAME='Ne_Arr_Type_Droplist'$
      ,XOFFSET=220,YOFFSET=71,XSIZE=100,YSIZE=15,value=[['Ne(1D)  + flux MAP  '],['skip']])
      
      Widget_Control, Ne_Arr_Type_Droplist,Set_droplist_select=ne_arr_type

      Te_arr_label = Widget_Label(Construct_Settings_Base, UNAME='Te_Arr_Label'  $
      ,XOFFSET=3, YOFFSET=104, SCR_XSIZE=220 , SCR_YSIZE=33 $
      ,VALUE= 'Electron temperature 3D array from:' ,XSIZE=5 ,YSIZE=23,/Align_left)     
      
      Te_Arr_Type_Droplist=Widget_Droplist(Construct_Settings_Base, UNAME='Te_Arr_Type_Droplist'$
      ,XOFFSET=220,YOFFSET=103,XSIZE=100,YSIZE=15,value=[['Te(1D)  + flux MAP  '],['skip']])
      
      Widget_Control, Te_Arr_Type_Droplist,Set_droplist_select=te_arr_type

      Z_eff_Arr_label = Widget_Label(Construct_Settings_Base, UNAME='Z_Eff_Arr_Label'  $
      ,XOFFSET=3, YOFFSET=136, SCR_XSIZE=220 , SCR_YSIZE=33 $
      ,VALUE= 'Effective charge 3D array from:    ' ,XSIZE=5 ,YSIZE=23,/Align_left)     
      
      Z_Eff_Arr_Type_Droplist=Widget_Droplist(Construct_Settings_Base, UNAME='Z_Eff_Arr_Type_Droplist'$
      ,XOFFSET=220,YOFFSET=135,XSIZE=100,YSIZE=15,value=[['Z_eff(1D) +flux MAP '],['skip']])
      
      Widget_Control, Z_Eff_Arr_Type_Droplist,Set_droplist_select=z_eff_arr_type     

      Stop_Plasma_label = Widget_Label(Construct_Settings_Base, UNAME='Stop_Plasma_Label'  $
      ,XOFFSET=3, YOFFSET=168, SCR_XSIZE=220 , SCR_YSIZE=33 $
      ,VALUE= 'Stopping in plasma from:' ,XSIZE=5 ,YSIZE=23,/Align_left)     
      
      Stop_Plasma_Type_Droplist=Widget_Droplist(Construct_Settings_Base, UNAME='Stop_Plasma_Type_Droplist'$
      ,XOFFSET=220,YOFFSET=167,XSIZE=100,YSIZE=15,value=stop_plasma_type_names)
      
      Widget_Control, Stop_Plasma_Type_Droplist,Set_droplist_select=stop_plasma_type        
      
      Exc_Plasma_label = Widget_Label(Construct_Settings_Base, UNAME='Exc_Plasma_Label'  $
      ,XOFFSET=3, YOFFSET=200, SCR_XSIZE=220 , SCR_YSIZE=33 $
      ,VALUE= 'Excitation in plasma from:' ,XSIZE=5 ,YSIZE=23,/Align_left)     
      
      Exc_Plasma_Type_Droplist=Widget_Droplist(Construct_Settings_Base, UNAME='Exc_Plasma_Type_Droplist'$
      ,XOFFSET=220,YOFFSET=199,XSIZE=100,YSIZE=15,value=exc_plasma_type_names)
      
      Widget_Control, Exc_Plasma_Type_Droplist,Set_droplist_select=exc_plasma_type       
 
      ADAS_label = Widget_Label(Construct_Settings_Base, UNAME='ADAS_Label'  $
      ,XOFFSET=3, YOFFSET=242, SCR_XSIZE=136 , SCR_YSIZE=33 $
      ,VALUE= 'Location of ADAS files:' ,XSIZE=5 ,YSIZE=23,/Align_left) 
      
      ADAS_dir_text = Widget_text(Construct_Settings_Base, UNAME='ADAS_Dir_Text'  $
      ,XOFFSET=148, YOFFSET=243,SCR_XSIZE=245 ,SCR_YSIZE=30,/editable $
      ,VALUE=ADAS_dir,XSIZE=20 ,YSIZE=1)
     
      if stop_plasma_type gt 2 and exc_plasma_type gt 2 then begin
        Widget_Control, ADAS_label, Sensitive=0
        Widget_Control, ADAS_dir_text, Sensitive=0
      endif

      Gas_arr_label = Widget_Label(Construct_Settings_Base, UNAME='Gas_arr_Label'  $
      ,XOFFSET=3, YOFFSET=296, SCR_XSIZE=220 , SCR_YSIZE=33 $
      ,VALUE= 'Neutral gas 3D array from:' ,XSIZE=5 ,YSIZE=23,/Align_left)     
      
      Gas_Arr_Type_Droplist=Widget_Droplist(Construct_Settings_Base, UNAME='Gas_Arr_Type_Droplist'$
      ,XOFFSET=220,YOFFSET=295,XSIZE=100,YSIZE=15,value=[['Gas(1D) + flux MAP  '],['skip']])
      
      Widget_Control, Gas_Arr_Type_Droplist,Set_droplist_select=gas_arr_type      

      Stop_Gas_label = Widget_Label(Construct_Settings_Base, UNAME='Stop_Gas_Label'  $
      ,XOFFSET=3, YOFFSET=328, SCR_XSIZE=220 , SCR_YSIZE=33 $
      ,VALUE= 'Stopping in gas from:' ,XSIZE=5 ,YSIZE=23,/Align_left)     
      
      Stop_Gas_Type_Droplist=Widget_Droplist(Construct_Settings_Base, UNAME='Stop_Gas_Type_Droplist'$
      ,XOFFSET=220,YOFFSET=327,XSIZE=100,YSIZE=15,value=[['Ionization of atoms '],['skip']])
      
      Widget_Control, Stop_Gas_Type_Droplist,Set_droplist_select=stop_gas_type
  
      Lim_Arr_label = Widget_Label(Construct_Settings_Base, UNAME='Lim_Arr_Label'  $
      ,XOFFSET=3, YOFFSET=360, SCR_XSIZE=220 , SCR_YSIZE=33 $
      ,VALUE= 'Beam limiters (3D)  :' ,XSIZE=5 ,YSIZE=23,/Align_left)     
      
      Lim_Arr_Type_Droplist=Widget_Droplist(Construct_Settings_Base, UNAME='Lim_Arr_Type_Droplist'$
      ,XOFFSET=220,YOFFSET=356,XSIZE=100,YSIZE=15,value=[['Limiters position   '],['skip']])
      
      Widget_Control, Lim_Arr_Type_Droplist,Set_droplist_select=lim_arr_type

      Grid_Aper_label = Widget_Label(Construct_Settings_Base, UNAME='Grid_Aper_Label'  $
      ,XOFFSET=3, YOFFSET=392, SCR_XSIZE=220 , SCR_YSIZE=33 $
      ,VALUE= 'Decrease number of grid apertures:' ,XSIZE=5 ,YSIZE=23,/Align_left)     
     
      grid_aper_names=transpose((' Every '+string([0,2,5,10],format='(I3)')+' aperture '))     
      grid_aper_names(0)=' All apertures'
      Grid_Aper_Type_Droplist=Widget_Droplist(Construct_Settings_Base, UNAME='Grid_Aper_Type_Droplist'$
      ,XOFFSET=220,YOFFSET=391,XSIZE=100,YSIZE=15,value=Grid_Aper_names)
      
      Widget_Control, Grid_Aper_Type_Droplist,Set_droplist_select=Grid_Aper_type     

      Construct_Settings_Save_Button = Widget_Button(Construct_Settings_Base, UNAME='Construct_Settings_Save_Button'  $
      ,XOFFSET=1, YOFFSET=451, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Save' ,XSIZE=25 ,YSIZE=25, /Align_Center)
    
      Construct_Settings_Close_Button = Widget_Button(Construct_Settings_Base, UNAME='Construct_Settings_Close_Button'  $
      ,XOFFSET=105, YOFFSET=451, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Close' ,XSIZE=25 ,YSIZE=25, /Align_Center)

      WIDGET_CONTROL, Construct_Settings_Base, /REALIZE
      XMANAGER, 'Construct_Settings_Widget', Construct_Settings_Widget, /No_block,Group_Leader=Main_Base
 endif
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which shows the "Settings" window for Run base on event when "Settings" button is pressed.
;-------------------------------------------------------------------------------------------------------------------------
pro show_calc_settings_window, main_base
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block contains some of the settings for beam attenuation and penetration calculation
common run_settings, div_type,div_type_names,atten_type,atten_type_names, vel_dis_type, vel_dis_names,save_output_type,save_output_file
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
    geom=Widget_Info(main_base,/Geometry)
    IF XREGISTERED('Calc_Settings_Widget') EQ 0 then begin
      Calc_Settings_Widget = WIDGET_BASE(/COLUMN, TITLE='Perform Calculation - Settings', Uname='Calc_Settings_Widget',$
/ALIGN_CENTER,XOFFSET=geom.xoffset+300,YOFFSET=geom.yoffset+geom.ysize-626,xsize=603,ysize=225)
      Calc_Settings_Base = Widget_base(Calc_Settings_Widget, UNAME='Calc_Settings_Base'  $
      ,XOFFSET=0,YOFFSET=0,Frame=0$
      ,XSIZE=603,YSIZE=225)
      Calc_Settings_label = Widget_Label(Calc_Settings_Base, UNAME='Calc_Settings_Label'  $
      ,XOFFSET=1, YOFFSET=1, SCR_XSIZE=600 , SCR_YSIZE=33 $
      ,VALUE= 'Choose settings for beam divergence and attenuation calculation' ,XSIZE=5 ,YSIZE=23, /Align_Center,/sunken_frame)
      
      Div_Type_label = Widget_Label(Calc_Settings_Base, UNAME='Div Type_Label'  $
      ,XOFFSET=3, YOFFSET=40, SCR_XSIZE=190 , SCR_YSIZE=33 $
      ,VALUE= 'Type of beam divergence: ' ,XSIZE=5 ,YSIZE=23,/Align_left)     
      
      Div_Type_Droplist=Widget_Droplist(Calc_Settings_Base, UNAME='Div_Type_Droplist'$
      ,XOFFSET=190,YOFFSET=39,XSIZE=100,YSIZE=15,value=div_type_names)
      
      Widget_Control, Div_Type_Droplist,Set_droplist_select=div_type     
           
      Atten_Type_label = Widget_Label(Calc_Settings_Base, UNAME='Atten_Type_Label'  $
      ,XOFFSET=3, YOFFSET=72, SCR_XSIZE=190 , SCR_YSIZE=33 $
      ,VALUE= 'Type of beam attenuation :    ' ,XSIZE=5 ,YSIZE=23,/Align_left)     
      
      Atten_Type_Droplist=Widget_Droplist(Calc_Settings_Base, UNAME='Atten_Type_Droplist'$
      ,XOFFSET=190,YOFFSET=71,XSIZE=100,YSIZE=15,value=atten_type_names)
      
      Widget_Control, Atten_Type_Droplist,Set_droplist_select=Atten_type
      if div_type eq 2 then Widget_Control, Atten_Type_Droplist,Sensitive=0 

      Vel_Dis_label = Widget_Label(Calc_Settings_Base, UNAME='Vel_Dis_Label'  $
      ,XOFFSET=3, YOFFSET=104, SCR_XSIZE=190 , SCR_YSIZE=33 $
      ,VALUE= 'Calc velocity distribution:    ' ,XSIZE=5 ,YSIZE=23,/Align_left)   
      
      Vel_Dis_Droplist=Widget_Droplist(Calc_Settings_Base, UNAME='Vel_Dis_Droplist'$
      ,XOFFSET=190,YOFFSET=103,XSIZE=100,YSIZE=15,value=vel_dis_names)
      
      Widget_Control, Vel_Dis_Droplist,Set_droplist_select=vel_dis_type 

      Save_Output_label = Widget_Label(Calc_Settings_Base, UNAME='Save Output_Label'  $
      ,XOFFSET=3, YOFFSET=136, SCR_XSIZE=190 , SCR_YSIZE=33 $
      ,VALUE= 'Save output to:       ' ,XSIZE=5 ,YSIZE=23,/Align_left)
 
      Save_Output_Type_Droplist=Widget_Droplist(Calc_Settings_Base, UNAME='Save_Output_Type_Droplist'$
      ,XOFFSET=190,YOFFSET=135,XSIZE=100,YSIZE=15,value=[['MDSPLUS'],['*.abo output file'],['skip']])

      Widget_Control, Save_Output_Type_Droplist,Set_droplist_select=save_output_type    
      
      Widget_Control, Widget_Info(main_base, FIND_BY_UNAME='Run_Number_Text'), Get_Value=run
      
      ;save_output_file=file_dir+'/'+beam+'_'+strtrim(string(run),2)+'.abo'
 
      Save_output_File_text = Widget_text(Calc_Settings_Base, UNAME='Save_Output_File_Text'  $
      ,XOFFSET=350, YOFFSET=137,SCR_XSIZE=255 ,SCR_YSIZE=30,/editable $
      ,VALUE=save_output_file ,XSIZE=20 ,YSIZE=1) 
      save_output_sens=[0,1,0]
      Widget_Control, Save_Output_File_text,Sensitive=save_output_sens(save_output_type)
     
   
      Calc_Settings_Save_Button = Widget_Button(Calc_Settings_Base, UNAME='Calc_Settings_Save_Button'  $
      ,XOFFSET=1, YOFFSET=197, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Save' ,XSIZE=25 ,YSIZE=25, /Align_Center)
    
      Calc_Settings_Close_Button = Widget_Button(Calc_Settings_Base, UNAME='Calc_Settings_Close_Button'  $
      ,XOFFSET=105, YOFFSET=197, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Close' ,XSIZE=25 ,YSIZE=25, /Align_Center)

      WIDGET_CONTROL, Calc_Settings_Base, /REALIZE
      XMANAGER, 'Calc_Settings_Widget', Calc_Settings_Widget, /No_block,Group_Leader=Main_Base
 endif
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which displays the "Settings" window for Load base on event
;when "Settings" button is pressed. These settings is used to modify
;the sources from which input data is extracted.
;-------------------------------------------------------------------------------------------------------------------------
pro show_load_settings_window, main_base
;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration calculation
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,$
beam_lim_file,beam_param_type,beam_param_file,ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
   geom=Widget_Info(main_base,/Geometry)
    IF XREGISTERED('Load_Settings_Widget') EQ 0 then begin
      Load_Settings_Widget = WIDGET_BASE(/COLUMN, TITLE='Load Input Data - Setting', Uname='Load_Settings_Widget',$
/ALIGN_CENTER,XOFFSET=geom.xoffset+300,YOFFSET=geom.yoffset+geom.ysize-626,xsize=603,ysize=509)
      Load_Settings_Base = Widget_base(Load_Settings_Widget, UNAME='Load_Settings_Base'  $
      ,XOFFSET=0,YOFFSET=0,Frame=0$
      ,XSIZE=603,YSIZE=499)
      Load_Settings_label = Widget_Label(Load_Settings_Base, UNAME='Load_Settings_Label'  $
      ,XOFFSET=1, YOFFSET=1, SCR_XSIZE=600 , SCR_YSIZE=33 $
      ,VALUE= 'Choose the method to use to load the input data' ,XSIZE=5 ,YSIZE=23, /Align_Center,/sunken_frame)
          
      Load_Choice_Label=Widget_Label(Load_Settings_Base, UNAME='General_Label'  $
      ,XOFFSET=3, YOFFSET=45, SCR_XSIZE=120 , SCR_YSIZE=33 $
      ,VALUE= 'Load all data from:' ,XSIZE=5 ,YSIZE=23,/Align_left)

      Load_Choice_Check = CW_BGROUP(Load_Settings_Base, ['default','*.abi input file','skip'], UNAME='Load_Choice_Check' ,XOFFSET=190$
      ,YOFFSET=49 ,/EXCLUSIVE, Space=5, Ypad=0,Column=3,/No_Release)
     
      Widget_Control, Load_Choice_Check,Set_value=load_choice

      Load_Bar_1=Widget_Label(Load_Settings_Base, UNAME='Load_Bar_1'  $
      ,XOFFSET=3, YOFFSET=75, SCR_XSIZE=800 , SCR_YSIZE=23 $
      ,VALUE= '----------------------------------------------------------------------------------------------------' ,XSIZE=5 ,YSIZE=23,/Align_left)     

      General_label = Widget_Label(Load_Settings_Base, UNAME='General_Label'  $
      ,XOFFSET=3, YOFFSET=100, SCR_XSIZE=190 , SCR_YSIZE=33 $
      ,VALUE= 'Beam type, shot, times:' ,XSIZE=5 ,YSIZE=23,/Align_left)     
      
      General_Type_Droplist=Widget_Droplist(Load_Settings_Base, UNAME='General_Type_Droplist'$
      ,XOFFSET=190,YOFFSET=99,XSIZE=100,YSIZE=15,value=[['Pre-Saved(ALCATOR)'],['*.abi input file  '],['skip']])
      
      Widget_Control, general_Type_Droplist,Set_droplist_select=general_type     
 
      General_file_text = Widget_text(Load_Settings_Base, UNAME='General_File_Text'  $
      ,XOFFSET=355, YOFFSET=101,SCR_XSIZE=250 ,SCR_YSIZE=30,/editable $
      ,VALUE=general_file ,XSIZE=20 ,YSIZE=1)
      General_sens=[0,1,0]
      Widget_Control, general_file_text,Sensitive=general_sens(general_type)


      Beam_geom_label = Widget_Label(Load_Settings_Base, UNAME='Beam_Geom_Label'  $
      ,XOFFSET=3, YOFFSET=132, SCR_XSIZE=190 , SCR_YSIZE=33 $
      ,VALUE= 'Beam geometry from :' ,XSIZE=5 ,YSIZE=23,/Align_left)     
      
      Beam_geom_Type_Droplist=Widget_Droplist(Load_Settings_Base, UNAME='Beam_Geom_Type_Droplist'$
      ,XOFFSET=190,YOFFSET=131,XSIZE=100,YSIZE=15,value=[['DNB_GEOM(MDSPLUS)'],['*.abi input file  '],['skip']])
      
      Widget_Control, beam_geom_Type_Droplist,Set_droplist_select=beam_geom_type     
 
      Beam_geom_file_text = Widget_text(Load_Settings_Base, UNAME='Beam_Geom_File_Text'  $
      ,XOFFSET=355, YOFFSET=133,SCR_XSIZE=250 ,SCR_YSIZE=30,/editable $
      ,VALUE=beam_geom_file ,XSIZE=20 ,YSIZE=1)
      beam_geom_sens=[0,1,0]
      Widget_Control, Beam_geom_file_text,Sensitive=beam_geom_sens(beam_geom_type) 
           
      Beam_lim_label = Widget_Label(Load_Settings_Base, UNAME='Beam_Lim_Label'  $
      ,XOFFSET=3, YOFFSET=164, SCR_XSIZE=190 , SCR_YSIZE=33 $
      ,VALUE= 'Beam limiters from :' ,XSIZE=5 ,YSIZE=23,/Align_left)     
      
      Beam_Lim_Type_Droplist=Widget_Droplist(Load_Settings_Base, UNAME='Beam_Lim_Type_Droplist'$
      ,XOFFSET=190,YOFFSET=163,XSIZE=100,YSIZE=15,value=[['Pre-Saved(ALCATOR)'],['*.abi input file  '],['skip']])
      
      Widget_Control, Beam_Lim_Type_Droplist,Set_droplist_select=beam_lim_type     
 
      beam_lim_file_text = Widget_text(Load_Settings_Base, UNAME='Beam_Lim_File_Text'  $
      ,XOFFSET=355, YOFFSET=165,SCR_XSIZE=250 ,SCR_YSIZE=30,/editable $
      ,VALUE=beam_lim_file ,XSIZE=20 ,YSIZE=1)
      beam_lim_sens=[0,1,0]
      Widget_Control, beam_lim_file_text,Sensitive=beam_lim_sens(beam_lim_type)       
    
      Beam_param_label = Widget_Label(Load_Settings_Base, UNAME='Beam_Param_Label'  $
      ,XOFFSET=3, YOFFSET=196, SCR_XSIZE=190 , SCR_YSIZE=33 $
      ,VALUE= 'Beam parameters from :' ,XSIZE=5 ,YSIZE=23,/Align_left)     
      
      Beam_param_Type_Droplist=Widget_Droplist(Load_Settings_Base, UNAME='Beam_Param_Type_Droplist'$
      ,XOFFSET=190,YOFFSET=195,XSIZE=100,YSIZE=15,value=[[' Spectr. (MDSPLUS)'],['*.abi input file'],['skip']])
      
      Widget_Control, Beam_param_Type_Droplist,Set_droplist_select=beam_param_type     
 
      Beam_param_file_text = Widget_text(Load_Settings_Base, UNAME='Beam_Param_File_Text'  $
      ,XOFFSET=355, YOFFSET=197,SCR_XSIZE=250 ,SCR_YSIZE=30,/editable $
      ,VALUE=beam_param_file ,XSIZE=20 ,YSIZE=1)
      beam_param_sens=[0,1,0]
      Widget_Control, Beam_param_file_text,Sensitive=beam_param_sens(beam_param_type) 

      Plasma_Geom_label = Widget_Label(Load_Settings_Base, UNAME='Plasma_Geom_Label'  $
      ,XOFFSET=3, YOFFSET=228, SCR_XSIZE=190 , SCR_YSIZE=33 $
      ,VALUE= 'Plasma Geometry from :' ,XSIZE=5 ,YSIZE=23,/Align_left)
 
      Plasma_Geom_Type_Droplist=Widget_Droplist(Load_Settings_Base, UNAME='Plasma_Geom_Type_Droplist'$
      ,XOFFSET=190,YOFFSET=227,XSIZE=100,YSIZE=15,value=[['EFIT (MDSPLUS) '],['EFIT (EQDSK files)'],['VMEC (wout file)  '],['*.abi input file  '],['skip']])

      Widget_Control, Plasma_Geom_Type_Droplist,Set_droplist_select=plasma_geom_type     
      
      Plasma_Geom_File_text = Widget_text(Load_Settings_Base, UNAME='Plasma_Geom_File_Text'  $
      ,XOFFSET=355, YOFFSET=229,SCR_XSIZE=250 ,SCR_YSIZE=30,/editable $
      ,VALUE=plasma_geom_file ,XSIZE=20 ,YSIZE=1) 
      
      plasma_geom_sens=[0,1,1,1,0]
      Widget_Control, Plasma_Geom_File_text,Sensitive=plasma_geom_sens(Plasma_Geom_type) 
      
      Plasma_Param_label = Widget_Label(Load_Settings_Base, UNAME='Plasma_Param_Label'  $
      ,XOFFSET=3, YOFFSET=260, SCR_XSIZE=190 , SCR_YSIZE=33 $
      ,VALUE= 'Plasma Parameters from :' ,XSIZE=5 ,YSIZE=23,/Align_left)
 
      Plasma_Param_Type_Droplist=Widget_Droplist(Load_Settings_Base, UNAME='Plasma_Param_Type_Droplist'$
      ,XOFFSET=190,YOFFSET=259,XSIZE=100,YSIZE=15,value=[['Pre-Saved(ALCATOR)'],['*.abi input file  '],['skip']])

      Widget_Control, Plasma_Param_Type_Droplist,Set_droplist_select=plasma_param_type     
      
      Plasma_Param_File_text = Widget_text(Load_Settings_Base, UNAME='Plasma_Param_File_Text'  $
      ,XOFFSET=355, YOFFSET=261,SCR_XSIZE=250 ,SCR_YSIZE=30,/editable $
      ,VALUE=plasma_param_file ,XSIZE=20 ,YSIZE=1) 
      
      plasma_param_sens=[0,1,0]
      Widget_Control, Plasma_Param_File_text,Sensitive=plasma_param_sens(Plasma_param_type)
 
      Ne_label = Widget_Label(Load_Settings_Base, UNAME='Ne_Label'  $
      ,XOFFSET=3, YOFFSET=292, SCR_XSIZE=190 , SCR_YSIZE=33 $
      ,VALUE= 'Electron density from :' ,XSIZE=5 ,YSIZE=23,/Align_left)
      
      Ne_Type_Droplist=Widget_Droplist(Load_Settings_Base, UNAME='Ne_Type_Droplist'$
      ,XOFFSET=190,YOFFSET=291,XSIZE=100,YSIZE=15,value=[['QuickFit'],['Thompson (MDSPLUS)'],['FITS file'],['*.abi input file'],['skip']])

      Widget_Control, Ne_Type_Droplist,Set_droplist_select=ne_type     
      
      Ne_File_text = Widget_text(Load_Settings_Base, UNAME='Ne_File_Text'  $
      ,XOFFSET=355, YOFFSET=293,SCR_XSIZE=250 ,SCR_YSIZE=30,/editable $
      ,VALUE=ne_file ,XSIZE=20 ,YSIZE=1)    
          
      ne_sens=[0,0,1,1,0]
      Widget_Control, Ne_File_text,Sensitive=ne_sens(Ne_type)

            
      Te_label = Widget_Label(Load_Settings_Base, UNAME='Te_Label'  $
      ,XOFFSET=3, YOFFSET=324, SCR_XSIZE=190 , SCR_YSIZE=33 $
      ,VALUE= 'Electron temperature from :' ,XSIZE=5 ,YSIZE=23,/Align_left)
 
      Te_Type_Droplist=Widget_Droplist(Load_Settings_Base, UNAME='Te_Type_Droplist'$
      ,XOFFSET=190,YOFFSET=323,XSIZE=100,YSIZE=15,value=[['QuickFit'],['Thompson (MDSPLUS)'],['ECE (MDSPLUS)'],['FITS file'],['*.abi input file'],['skip']])

      Widget_Control, Te_Type_Droplist,Set_droplist_select=te_type     
      
      Te_File_text = Widget_text(Load_Settings_Base, UNAME='Te_File_Text'  $
      ,XOFFSET=355, YOFFSET=325,SCR_XSIZE=250 ,SCR_YSIZE=30,/editable $
      ,VALUE=te_file ,XSIZE=20 ,YSIZE=1) 
      
      te_sens=[0,0,0,1,1,0]
      Widget_Control, Te_File_text,Sensitive=te_sens(Te_type)
      
      Z_Eff_label = Widget_Label(Load_Settings_Base, UNAME='Z_Eff_Label'  $
      ,XOFFSET=3, YOFFSET=356, SCR_XSIZE=190 , SCR_YSIZE=33 $
      ,VALUE= 'Effective charge (Z_eff) from :' ,XSIZE=5 ,YSIZE=23,/Align_left)
 
      Z_Eff_Type_Droplist=Widget_Droplist(Load_Settings_Base, UNAME='Z_Eff_Type_Droplist'$
      ,XOFFSET=190,YOFFSET=355,XSIZE=100,YSIZE=15,value=[['Dalsa (MDSPLUS)   '],['Z_ave (MDSPLUS)   '],['Constant ='],['z_neo_ave file'],['*.abi input file'],['skip']])

      Widget_Control, Z_Eff_Type_Droplist,Set_droplist_select=z_eff_type     
      
      Z_Eff_File_Text = Widget_text(Load_Settings_Base, UNAME='Z_Eff_File_Text'  $
      ,XOFFSET=355, YOFFSET=357,SCR_XSIZE=250 ,SCR_YSIZE=30,/editable $
      ,VALUE=z_eff_file ,XSIZE=20 ,YSIZE=1) 
      
      z_eff_sens=[0,0,1,1,1,0]
      Widget_Control, Z_Eff_File_Text,Sensitive=z_eff_sens(z_eff_type)      


      Gas_label = Widget_Label(Load_Settings_Base, UNAME='Gas_Label'  $
      ,XOFFSET=3, YOFFSET=388, SCR_XSIZE=190 , SCR_YSIZE=33 $
      ,VALUE= 'Gas distribution from :' ,XSIZE=5 ,YSIZE=23,/Align_left)
 
      Gas_Type_Droplist=Widget_Droplist(Load_Settings_Base, UNAME='Gas_Type_Droplist'$
      ,XOFFSET=190,YOFFSET=387,XSIZE=100,YSIZE=15,value=[['MDSPLUS, Pre-saved'],['*.abi input file  '],['skip']])

      Widget_Control, Gas_Type_Droplist,Set_droplist_select=gas_type     
      
      Gas_File_text = Widget_text(Load_Settings_Base, UNAME='Gas_File_Text'  $
      ,XOFFSET=355, YOFFSET=389,SCR_XSIZE=250 ,SCR_YSIZE=30,/editable $
      ,VALUE=gas_file ,XSIZE=20 ,YSIZE=1) 
      
      gas_sens=[0,1,0]
      Widget_Control, Gas_File_text,Sensitive=gas_sens(Gas_type) 
      
      Grid_label = Widget_Label(Load_Settings_Base, UNAME='Grid_Label'  $
      ,XOFFSET=3, YOFFSET=420, SCR_XSIZE=190 , SCR_YSIZE=33 $
      ,VALUE= '3D Grid for calculation from :' ,XSIZE=5 ,YSIZE=23,/Align_left)
 
      Grid_Type_Droplist=Widget_Droplist(Load_Settings_Base, UNAME='Grid_Type_Droplist'$
      ,XOFFSET=190,YOFFSET=419,XSIZE=100,YSIZE=15,value=[['Beam/plasma geom.'],['*.abi input file  '],['skip']])

      Widget_Control, Grid_Type_Droplist,Set_droplist_select=grid_type     
      
      Grid_File_text = Widget_text(Load_Settings_Base, UNAME='Grid_File_Text'  $
      ,XOFFSET=355, YOFFSET=421,SCR_XSIZE=250 ,SCR_YSIZE=30,/editable $
      ,VALUE=grid_file ,XSIZE=20 ,YSIZE=1) 
      
      grid_sens=[0,1,0]
      Widget_Control, Grid_File_text,Sensitive=grid_sens(Grid_type) 

      Load_Bar_2=Widget_Label(Load_Settings_Base, UNAME='Load_Bar_2'  $
      ,XOFFSET=3, YOFFSET=447, SCR_XSIZE=800 , SCR_YSIZE=23 $
      ,VALUE= '----------------------------------------------------------------------------------------------------' ,XSIZE=5 ,YSIZE=23,/Align_left)   


      Load_Settings_Save_Button = Widget_Button(Load_Settings_Base, UNAME='Load_Settings_Save_Button'  $
      ,XOFFSET=1, YOFFSET=471, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Save' ,XSIZE=25 ,YSIZE=25, /Align_Center)
    
      Load_Settings_Close_Button = Widget_Button(Load_Settings_Base, UNAME='Load_Settings_Close_Button'  $
      ,XOFFSET=105, YOFFSET=471, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Close' ,XSIZE=25 ,YSIZE=25, /Align_Center)

      WIDGET_CONTROL, Load_Settings_Base, /REALIZE
      XMANAGER, 'Load_Settings_Widget', Load_Settings_Widget, /No_block,Group_Leader=Main_Base
 endif
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which displays the "Beam Limiters" window on event when "Beam Limiters" button is pressed.
;-------------------------------------------------------------------------------------------------------------------------
pro show_beam_limiters_window, main_base
;The following common block contains the parameters which describe the
;positions and sizes of the beam limiters. This block also holds the
;3D array of the Limiters positions after is constructed
common beam_limiters, n_limiters, limiters_table,limiters_arr
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
   geom=Widget_Info(Main_Base,/Geometry)
    IF XREGISTERED('Beam_Limiters_Widget') EQ 0 then begin
      Beam_Limiters_Widget = WIDGET_BASE(/COLUMN, TITLE='Beam Limiters', Uname='Beam_Limiters_Widget',$
/ALIGN_CENTER,XOFFSET=geom.xoffset+300,YOFFSET=geom.yoffset+geom.ysize-626,xsize=493,ysize=289+n_limiters*19)
      Beam_Limiters_Base = Widget_base(Beam_Limiters_Widget, UNAME='Beam_Limiters_Base'  $
      ,XOFFSET=5,YOFFSET=5,Frame=1$
      ,XSIZE=480,YSIZE=287+n_limiters*19)
    
      Beam_Limiters_label = Widget_Label(Beam_Limiters_Base, UNAME='Beam_Limiters_Label'  $
      ,XOFFSET=3, YOFFSET=1, SCR_XSIZE=497 , SCR_YSIZE=33 $
      ,VALUE= 'Beam limiters and apertures' ,XSIZE=5 ,YSIZE=23, /Align_Center,/sunken_frame)   
  
      N_limiters_Label_1 = Widget_Label(Beam_Limiters_Base, UNAME='N_Limiters_Label_1'  $
      ,XOFFSET=8, YOFFSET=40, SCR_XSIZE=247 , SCR_YSIZE=23 $
      ,VALUE= 'Number of limiters/apertures to setup:' ,XSIZE=5 ,YSIZE=1)

      N_limiters_Label_2 = Widget_Label(Beam_Limiters_Base, UNAME='N_Limiters_Label_2'  $
      ,XOFFSET=8, YOFFSET=75, SCR_XSIZE=417 , SCR_YSIZE=23 $
      ,VALUE= '(Z-pos)- Z value of the limiter front surface (closest to the source)' ,XSIZE=5 ,YSIZE=1,/align_left)
    
      N_limiters_Label_3 = Widget_Label(Beam_Limiters_Base, UNAME='N_Limiters_Label_3'  $
      ,XOFFSET=8, YOFFSET=100, SCR_XSIZE=417 , SCR_YSIZE=23 $
      ,VALUE= '(Z-size) - Z length of the limiter' ,XSIZE=5 ,YSIZE=1,/align_left)

      N_limiters_Label_4 = Widget_Label(Beam_Limiters_Base, UNAME='N_Limiters_Label_4'  $
      ,XOFFSET=8, YOFFSET=125, SCR_XSIZE=467 , SCR_YSIZE=23 $
      ,VALUE= 'Cylindrical limiters - (defined by Diameter), (Z size, Y-size, R-major - NaN)' ,XSIZE=5 ,YSIZE=1,/align_left)
          
      N_limiters_Label_5 = Widget_Label(Beam_Limiters_Base, UNAME='N_Limiters_Label_5'  $
      ,XOFFSET=8, YOFFSET=150, SCR_XSIZE=467 , SCR_YSIZE=23 $
      ,VALUE= 'Rectangular limiters - (defined by X and Y sizes), (Diameter, R-major - NaN)' ,XSIZE=5 ,YSIZE=1,/align_left)

      N_limiters_Label_6 = Widget_Label(Beam_Limiters_Base, UNAME='N_Limiters_Label_6'  $
      ,XOFFSET=8, YOFFSET=175, SCR_XSIZE=467 , SCR_YSIZE=23 $
      ,VALUE= 'Vessel walls - (cylinders) - (defined by R-major), (Others - NaN)' ,XSIZE=5 ,YSIZE=1,/align_left)
      
      N_limiters_Text = Widget_text(Beam_Limiters_Base, UNAME='N_Limiters_Text'  $
      ,XOFFSET=256, YOFFSET=35,SCR_XSIZE=32 ,SCR_YSIZE=33,/editable $
      ,VALUE=strtrim(string(n_limiters,format='(I2)'),1) ,XSIZE=20 ,YSIZE=1) 
      
      N_Limiters_Button = Widget_Button(Beam_Limiters_Base, UNAME='N_Limiters_Button'  $
      ,XOFFSET=295, YOFFSET=40, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Update' ,XSIZE=25 ,YSIZE=25, /Align_Center)

      Beam_Limiters_Table=Widget_Table(Beam_Limiters_Base, Uname='Beam_Limiters_Table',Xoffset=1, yoffset=205$
      ,scr_xsize=479, scr_ysize=37+n_limiters*19, Alignment=1,column_labels=['Name','Z pos','Z size','Diameter','X size','Y size','R major']$
      ,row_labels=['1'],column_widths=[100,50,50,55,50,50,50] $
      ,/editable,Frame=1,row_heights=20,value=[['name','0.000','0.000','0.000','NAN','NAN','NAN']])
      Widget_Control, Beam_Limiters_Table, Sensitive=0    
      
      if n_limiters gt 0 then begin
        Widget_Control, Beam_Limiters_Table, Sensitive=1
        row_label=strtrim(string(make_array(n_limiters,/index)+1,format='(I2)'),2)
        Widget_Control, Beam_Limiters_Table, Table_ysize=n_limiters 
        Widget_Control, Beam_Limiters_Table, Set_value=limiters_table
        Widget_Control, Beam_Limiters_Table, Row_labels=[row_label]
        Widget_Control, Beam_Limiters_Table, Alignment=1
      endif
 

      Beam_Limiters_Save_Button = Widget_Button(Beam_Limiters_Base, UNAME='Beam_Limiters_Save_Button'  $
      ,XOFFSET=4, YOFFSET=256+n_limiters*19, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Save' ,XSIZE=25 ,YSIZE=25, /Align_Center)
    
      Beam_Limiters_Close_Button = Widget_Button(Beam_Limiters_Base, UNAME='Beam_Limiters_Close_Button'  $
      ,XOFFSET=108, YOFFSET=256+n_limiters*19, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Close' ,XSIZE=25 ,YSIZE=25, /Align_Center)      
 
      WIDGET_CONTROL, Beam_Limiters_Base, /REALIZE
      XMANAGER, 'Beam_Limiters_Widget', Beam_Limiters_Widget, /No_block,Group_Leader=Main_Base
    endif
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which displays the "Plasma Geometry" window on event when
;"Plasma Geometry" button is pressed.
;-------------------------------------------------------------------------------------------------------------------------
pro show_plasma_geometry_window, main_base
;The following common block contains the parameters which describe the geometry
;and position of the machine  plasma
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 

    geom=Widget_Info(Main_Base,/Geometry)
    IF XREGISTERED('Plasma_Geometry_Widget') EQ 0 then begin
      Plasma_Geometry_Widget = WIDGET_BASE(/COLUMN, TITLE='Plasma Geometry', Uname='Plasma_Geometry_Widget',$
/ALIGN_CENTER,XOFFSET=geom.xoffset+300,YOFFSET=geom.yoffset+geom.ysize-626,xsize=423,ysize=283)
      Plasma_Geometry_Base = Widget_base(Plasma_Geometry_Widget, UNAME='Plasma_Geometry_Base'  $
      ,XOFFSET=5,YOFFSET=5,Frame=1$
      ,XSIZE=410,YSIZE=280)
    
      Plasma_Geometry_label = Widget_Label(Plasma_Geometry_Base, UNAME='Plasma_Geometry_Label'  $
      ,XOFFSET=3, YOFFSET=1, SCR_XSIZE=407 , SCR_YSIZE=33 $
      ,VALUE= 'Some parameters specifying plasma location and geometry' ,XSIZE=5 ,YSIZE=23, /Align_Center,/sunken_frame)   
  
      R_Major_Label = Widget_Label(Plasma_Geometry_Base, UNAME='R_Major_Label'  $
      ,XOFFSET=8, YOFFSET=40, SCR_XSIZE=347 , SCR_YSIZE=33 $
      ,VALUE= 'Major radius of the plasma (radius of plasma center), m ' ,XSIZE=5 ,YSIZE=1)
 
      R_Major_Text = Widget_text(Plasma_Geometry_Base, UNAME='R_Major_Text'  $
      ,XOFFSET=356, YOFFSET=40,SCR_XSIZE=58 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(r_major,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)

      Z_Major_Label = Widget_Label(Plasma_Geometry_Base, UNAME='Z_Major_Label'  $
      ,XOFFSET=8, YOFFSET=70, SCR_XSIZE=347 , SCR_YSIZE=33 $
      ,VALUE= 'Vertical position of the plasma center, m                ' ,XSIZE=5 ,YSIZE=1)
 
      Z_Major_Text = Widget_text(Plasma_Geometry_Base, UNAME='Z_Major_Text'  $
      ,XOFFSET=356, YOFFSET=70,SCR_XSIZE=58 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(z_major,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)

      R_Minor_Label = Widget_Label(Plasma_Geometry_Base, UNAME='R_Minor_Label'  $
      ,XOFFSET=8, YOFFSET=100, SCR_XSIZE=347 , SCR_YSIZE=33 $
      ,VALUE= 'Minor radius of the plasma, m                           ' ,XSIZE=5 ,YSIZE=1)
 
      R_Minor_Text = Widget_text(Plasma_Geometry_Base, UNAME='R_Minor_Text'  $
      ,XOFFSET=356, YOFFSET=100,SCR_XSIZE=58 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(r_minor,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)
  
      Elong_Label = Widget_Label(Plasma_Geometry_Base, UNAME='Elong_Label'  $
      ,XOFFSET=8, YOFFSET=130, SCR_XSIZE=347 , SCR_YSIZE=33 $
      ,VALUE= 'Elongation of the plasma                                 ' ,XSIZE=5 ,YSIZE=1)
 
      Elong_Text = Widget_text(Plasma_Geometry_Base, UNAME='Elong_Text'  $
      ,XOFFSET=356, YOFFSET=130,SCR_XSIZE=58 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(elong,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)
  
      Triang_U_Label = Widget_Label(Plasma_Geometry_Base, UNAME='Triang_U_Label'  $
      ,XOFFSET=8, YOFFSET=160, SCR_XSIZE=347 , SCR_YSIZE=33 $
      ,VALUE= 'Upper triangularity of the plasma                        ' ,XSIZE=5 ,YSIZE=1)
 
      Triang_U_Text = Widget_text(Plasma_Geometry_Base, UNAME='Triang_U_Text'  $
      ,XOFFSET=356, YOFFSET=160,SCR_XSIZE=58 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(triang_upper,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)
  
      Triang_L_Label = Widget_Label(Plasma_Geometry_Base, UNAME='Triang_L_Label'  $
      ,XOFFSET=8, YOFFSET=190, SCR_XSIZE=347 , SCR_YSIZE=33 $
      ,VALUE= 'Lower triangularity of the plasma                        ' ,XSIZE=5 ,YSIZE=1)
 
      Triang_L_Text = Widget_text(Plasma_Geometry_Base, UNAME='Triang_L_Text'  $
      ,XOFFSET=356, YOFFSET=190,SCR_XSIZE=58 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(triang_lower,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)



      Plasma_Geometry_Save_Button = Widget_Button(Plasma_Geometry_Base, UNAME='Plasma_Geometry_Save_Button'  $
      ,XOFFSET=4, YOFFSET=250, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Save' ,XSIZE=25 ,YSIZE=25, /Align_Center)
    
      Plasma_Geometry_Close_Button = Widget_Button(Plasma_Geometry_Base, UNAME='Plasma_Geometry_Close_Button'  $
      ,XOFFSET=108, YOFFSET=250, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Close' ,XSIZE=25 ,YSIZE=25, /Align_Center)      
 
      WIDGET_CONTROL, Plasma_Geometry_Base, /REALIZE
      XMANAGER, 'Plasma_Geometry_Widget', Plasma_Geometry_Widget, /No_block,Group_Leader=Main_Base
    endif
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which displays the "Plasma Parameters" window on event when
;"Plasma Parameters" button is pressed.
;-------------------------------------------------------------------------------------------------------------------------
pro show_plasma_param_window, main_base
;The following common block contains the parameters which describe
;some relative non-geometrical global parameters of the plasma
common plasma_param, main_ion,n_impur,impur_table
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 

   geom=Widget_Info(Main_Base,/Geometry)
    IF XREGISTERED('Plasma_Param_Widget') EQ 0 then begin
      Plasma_Param_Widget = WIDGET_BASE(/COLUMN, TITLE='Plasma Parameters', Uname='Plasma_Param_Widget',$
/ALIGN_CENTER,XOFFSET=geom.xoffset+300,YOFFSET=geom.yoffset+geom.ysize-626,xsize=473,ysize=359)
      Plasma_Param_Base = Widget_base(Plasma_Param_Widget, UNAME='Plasma_Param_Base'  $
      ,XOFFSET=5,YOFFSET=5,Frame=1$
      ,XSIZE=460,YSIZE=356)
  
      Plasma_Param_label = Widget_Label(Plasma_Param_Base, UNAME='Plasma_Param_Label'  $
      ,XOFFSET=3, YOFFSET=1, SCR_XSIZE=457 , SCR_YSIZE=33 $
      ,VALUE= 'Selected parameters of the plasma' ,XSIZE=5 ,YSIZE=23, /Align_Center,/sunken_frame)      
 
      Main_Ion_Label = Widget_Label(Plasma_Param_Base, UNAME='Main_Ion_Label'  $
      ,XOFFSET=8, YOFFSET=40, SCR_XSIZE=235 , SCR_YSIZE=33 $
      ,VALUE= 'Main plasma ion (H, D, He):  ', XSIZE=5 ,YSIZE=1, /Align_Left)

      Main_Ion_Text = Widget_text(Plasma_Param_Base, UNAME='Main_Ion_Text'  $
      ,XOFFSET=326, YOFFSET=40,SCR_XSIZE=32 ,SCR_YSIZE=30$
      ,VALUE=main_ion ,XSIZE=5 ,YSIZE=1,/editable)    
          
 
      N_impur_Label_1 = Widget_Label(Plasma_Param_Base, UNAME='N_Impur_Label_1'  $
      ,XOFFSET=8, YOFFSET=80, SCR_XSIZE=247 , SCR_YSIZE=23 $
      ,VALUE= 'Number of impurity species (1-7):' ,XSIZE=5 ,YSIZE=1,/align_left)

      N_impur_Label_2 = Widget_Label(Plasma_Param_Base, UNAME='N_Impur_Label_2'  $
      ,XOFFSET=8, YOFFSET=115, SCR_XSIZE=417 , SCR_YSIZE=23 $
      ,VALUE='Enter fraction of each impurity density relative to total density' ,XSIZE=5 ,YSIZE=1,/align_left)
    
      N_impur_Label_3 = Widget_Label(Plasma_Param_Base, UNAME='N_Impur_Label_3'  $
      ,XOFFSET=8, YOFFSET=140, SCR_XSIZE=417 , SCR_YSIZE=23 $
      ,VALUE= 'of all impurities. Available data for H, D, He, B, Be, C, Ne, Ar' ,XSIZE=5 ,YSIZE=1,/align_left)
     
      N_impur_Label_4 = Widget_Label(Plasma_Param_Base, UNAME='N_Impur_Label_3'  $
      ,XOFFSET=8, YOFFSET=165, SCR_XSIZE=450 , SCR_YSIZE=23 $
      ,VALUE= 'Sum of all fractions should be equal to 1.0' ,XSIZE=5 ,YSIZE=1,/align_left)


      N_impur_Text = Widget_text(Plasma_Param_Base, UNAME='N_Impur_Text'  $
      ,XOFFSET=326, YOFFSET=75,SCR_XSIZE=32 ,SCR_YSIZE=33,/editable $
      ,VALUE=strtrim(string(n_impur,format='(I2)'),1) ,XSIZE=20 ,YSIZE=1) 
      
      N_Impur_Button = Widget_Button(Plasma_Param_Base, UNAME='N_Impur_Button'  $
      ,XOFFSET=366, YOFFSET=80, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Update' ,XSIZE=25 ,YSIZE=25, /Align_Center)

      Plasma_Impur_Table=Widget_Table(Plasma_Param_Base, Uname='Plasma_Impur_Table',Xoffset=1, yoffset=205$
      ,scr_ysize=97, scr_xsize=75+n_impur*50, Alignment=1,row_labels=['Label','Ion-charge','Fractions']$
      ,column_labels=['1'],column_widths=20$
      ,/editable,Frame=1,row_heights=20,value=[['B'],['5'],['1.000']],units=0)
      Widget_Control, Plasma_Impur_Table, Sensitive=0    
       

      Plasma_Param_Save_Button = Widget_Button(Plasma_Param_Base, UNAME='Plasma_Param_Save_Button'  $
      ,XOFFSET=4, YOFFSET=316, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Save' ,XSIZE=25 ,YSIZE=25, /Align_Center)
    
      Plasma_Param_Close_Button = Widget_Button(Plasma_Param_Base, UNAME='Plasma_Param_Close_Button'  $
      ,XOFFSET=108, YOFFSET=316, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Close' ,XSIZE=25 ,YSIZE=25, /Align_Center)

 
      WIDGET_CONTROL, Plasma_Param_Base, /REALIZE
      XMANAGER, 'Plasma_Param_Widget', Plasma_Param_Widget, /No_block,Group_Leader=Main_Base

      Widget_Control, Plasma_Impur_Table, Sensitive=1
      Widget_Control, Plasma_Impur_Table, scr_xsize=75+n_impur*50+20
      Widget_Control, Plasma_Impur_Table, Set_value=impur_table
      column_label=strtrim(string(make_array(n_impur,/index)+1,format='(I2)'),2)
      Widget_Control, Plasma_Impur_Table, Table_xsize=n_impur 
      Widget_Control, Plasma_Impur_Table, column_widths=50 
      Widget_Control, Plasma_Impur_Table, scr_xsize=75+n_impur*50
      Widget_Control, Plasma_Impur_Table, column_labels=[column_label]
      Widget_Control, Plasma_Impur_Table, Alignment=1
    endif
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which displays the "Beam Geometry" window on event when
;"Beam Geometry" button is pressed.
;-------------------------------------------------------------------------------------------------------------------------
pro show_beam_geometry_window, main_base
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for calculation
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block contains the parameters which describe the geometry
;and position of the machine  plasma
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower
;The following common block contains the parameters which describe the
;positions and sizes of the beam limiters. This block also holds the
;3D array of the Limiters positions after is constructed
common beam_limiters, n_limiters, limiters_table,limiters_arr
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  
;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
    geom=Widget_Info(Main_Base,/Geometry)
    IF XREGISTERED('Beam_Geometry_Widget') EQ 0 then begin
      Beam_Geometry_Widget = WIDGET_BASE(/COLUMN, TITLE='Beam Geometry', Uname='Beam_Geometry_Widget',/ALIGN_CENTER,XOFFSET=geom.xoffset-3,YOFFSET=geom.yoffset+50,xsize=950,ysize=833)
      Beam_Geometry_Base = Widget_base(Beam_Geometry_Widget, UNAME='Beam_Geometry_Base'  $
      ,XOFFSET=5,YOFFSET=5,Frame=1$
      ,XSIZE=940,YSIZE=830)
    
      Beam_Geometry_label = Widget_Label(Beam_Geometry_Base, UNAME='Beam_Geometry_Label'  $
      ,XOFFSET=3, YOFFSET=1, SCR_XSIZE=937 , SCR_YSIZE=31 $
      ,VALUE= 'Parameters specifying the geometry and location of the beam injector' ,XSIZE=5 ,YSIZE=23, /Align_Center,/sunken_frame)   
  
      Beam_Port_Text = Widget_text(Beam_Geometry_Base, UNAME='Beam_Port_Text'  $
      ,XOFFSET=396, YOFFSET=35,SCR_XSIZE=58 ,SCR_YSIZE=30,/editable $
      ,VALUE=beam_port ,XSIZE=20 ,YSIZE=1)

      Beam_Port_Phi_Text = Widget_text(Beam_Geometry_Base, UNAME='Beam_Port_Phi_Text'  $
      ,XOFFSET=286, YOFFSET=35,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(beam_port_phi,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)

      Beam_Port_Label = Widget_Label(Beam_Geometry_Base, UNAME='Beam_Port_Label'  $
      ,XOFFSET=8, YOFFSET=35, SCR_XSIZE=447 , SCR_YSIZE=33 $
      ,VALUE= 'Toroidal angles are relative to the phi0, deg          -   Port: ' , /align_left, XSIZE=5 ,YSIZE=1) 

      X_Grids_Focus_Text = Widget_text(Beam_Geometry_Base, UNAME='X_Grids_Focus_Text'  $
      ,XOFFSET=306, YOFFSET=66,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(x_grid_focus,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)
  
      Y_Grids_Focus_Text = Widget_text(Beam_Geometry_Base, UNAME='Y_Grids_Focus_Text'  $
      ,XOFFSET=406, YOFFSET=66,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(Y_grid_focus,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)    

      Grids_Focus_Label = Widget_Label(Beam_Geometry_Base, UNAME='Grids_Focus_Label'  $
      ,XOFFSET=8, YOFFSET=65, SCR_XSIZE=395 , SCR_YSIZE=33 $
      ,VALUE= 'Radii of curvature of the grids, m            X:               Y:' ,XSIZE=5 ,YSIZE=1,/align_left)
 
      X_Bml_Label = Widget_Label(Beam_Geometry_Base, UNAME='X_Bml_Label'  $
      ,XOFFSET=8, YOFFSET=95, SCR_XSIZE=247 , SCR_YSIZE=33 $
      ,VALUE= 'X positions of the apertures, mm ' ,XSIZE=5 ,YSIZE=1,/align_left)
 
      X_Bml_Text = Widget_text(Beam_Geometry_Base, UNAME='X_Bml_Text'  $
      ,XOFFSET=306, YOFFSET=96,SCR_XSIZE=148 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(x_bml*1e3,format='(F10.5,", ")'),1) ,XSIZE=120 ,YSIZE=1)
      
      Y_Bml_Label = Widget_Label(Beam_Geometry_Base, UNAME='Y_Bml_Label'  $
      ,XOFFSET=8, YOFFSET=125, SCR_XSIZE=247 , SCR_YSIZE=33 $
      ,VALUE= 'Y positions of the apertures, mm ' ,XSIZE=5 ,YSIZE=1,/align_left)
 
      Y_Bml_Text = Widget_text(Beam_Geometry_Base, UNAME='Y_Bml_Text'  $
      ,XOFFSET=306, YOFFSET=125,SCR_XSIZE=148 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(y_bml*1e3,format='(F10.5,", ")'),1) ,XSIZE=120 ,YSIZE=1)

      Grid_Ap_Diam_Label = Widget_Label(Beam_Geometry_Base, UNAME='Grid_Ap_Diam_Label'  $
      ,XOFFSET=8, YOFFSET=155, SCR_XSIZE=347 , SCR_YSIZE=33$
      ,VALUE= 'Diameter of elemental aperture in extraction grid, mm', XSIZE=5 ,YSIZE=1,/align_left)
 
      Grid_Ap_Diam_Text = Widget_text(Beam_Geometry_Base, UNAME='Grid_Ap_Diam_Text'  $
      ,XOFFSET=406, YOFFSET=155,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(grid_ap_diam,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)
 
      Tank_Front_Label = Widget_Label(Beam_Geometry_Base, UNAME='Tank_Front_Label'  $
      ,XOFFSET=8, YOFFSET=185, SCR_XSIZE=347 , SCR_YSIZE=33$
      ,VALUE= 'Distance from grids to the tank front wall, m            ', XSIZE=5 ,YSIZE=1)
 
      Tank_Front_Text = Widget_text(Beam_Geometry_Base, UNAME='Tank_Front_Text'  $
      ,XOFFSET=406, YOFFSET=185,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(tank_front_dist,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)

      Tank_Size_Label = Widget_Label(Beam_Geometry_Base, UNAME='Tank_Size_Label'  $
      ,XOFFSET=8, YOFFSET=215, SCR_XSIZE=347 , SCR_YSIZE=33$
      ,VALUE= 'The length of the beam vacuum tank, m                     ', XSIZE=5 ,YSIZE=1)

      Tank_Size_Text = Widget_text(Beam_Geometry_Base, UNAME='Tank_Size_Text'  $
      ,XOFFSET=406, YOFFSET=215,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(tank_size,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)

      Tank_Diam_Label = Widget_Label(Beam_Geometry_Base, UNAME='Tank_Diam_Label'  $
      ,XOFFSET=8, YOFFSET=245, SCR_XSIZE=347 , SCR_YSIZE=33$
      ,VALUE= 'Inner diameter of the beam vacuum tank, m                 ', XSIZE=5 ,YSIZE=1)

      Tank_Diam_Text = Widget_text(Beam_Geometry_Base, UNAME='Tank_Diam_Text'  $
      ,XOFFSET=406, YOFFSET=245,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(tank_diam,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)

      Neutr_Front_Label = Widget_Label(Beam_Geometry_Base, UNAME='Neutr_Front_Label'  $
      ,XOFFSET=8, YOFFSET=275, SCR_XSIZE=347 , SCR_YSIZE=33$
      ,VALUE= 'Distance from grids to the neutralizer front surface, m   ', XSIZE=5 ,YSIZE=1)
 
      Neutr_Front_Text = Widget_text(Beam_Geometry_Base, UNAME='Neutr_Front_Text'  $
      ,XOFFSET=406, YOFFSET=275,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(neutr_front_dist,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)
     
      Neutr_Size_Label = Widget_Label(Beam_Geometry_Base, UNAME='Neutr_Size_Label'  $
      ,XOFFSET=8, YOFFSET=305, SCR_XSIZE=347 , SCR_YSIZE=33$
      ,VALUE= 'The length of the beam neutralizer tube, m                ', XSIZE=5 ,YSIZE=1)
 
      Neutr_Size_Text = Widget_text(Beam_Geometry_Base, UNAME='Neutr_Size_Text'  $
      ,XOFFSET=406, YOFFSET=305,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(neutr_size,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)     

      Neutr_Diam_Label = Widget_Label(Beam_Geometry_Base, UNAME='Neutr_Diam_Label'  $
      ,XOFFSET=8, YOFFSET=335, SCR_XSIZE=347 , SCR_YSIZE=33$
      ,VALUE= 'Inner diameter of the beam neutralizer tube, m            ', XSIZE=5 ,YSIZE=1)
 
      Neutr_Diam_Text = Widget_text(Beam_Geometry_Base, UNAME='Neutr_Diam_Text'  $
      ,XOFFSET=406, YOFFSET=335,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(neutr_diam,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)  

      Tank_Magnet_Label = Widget_Label(Beam_Geometry_Base, UNAME='Tank_Magnet_Label'  $
      ,XOFFSET=508, YOFFSET=35, SCR_XSIZE=347 , SCR_YSIZE=33$
      ,VALUE= 'Distance from tank front wall to the front of magnet, m   ', XSIZE=5 ,YSIZE=1)
 
      Tank_Magnet_Text = Widget_text(Beam_Geometry_Base, UNAME='Tank_Magnet_Text'  $
      ,XOFFSET=856, YOFFSET=35,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(tank_magnet_dist,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)

      Magnet_Size_Label = Widget_Label(Beam_Geometry_Base, UNAME='Magnet_Size_Label'  $
      ,XOFFSET=508, YOFFSET=65, SCR_XSIZE=347 , SCR_YSIZE=33$
      ,VALUE= 'The length of the ion deflection magnet, m                ', XSIZE=5 ,YSIZE=1)
 
      Magnet_Size_Text = Widget_text(Beam_Geometry_Base, UNAME='Magnet_Size_Text'  $
      ,XOFFSET=856, YOFFSET=65,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(magnet_size,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)

      Magnet_Diam_Label = Widget_Label(Beam_Geometry_Base, UNAME='Magnet_Diam_Label'  $
      ,XOFFSET=508, YOFFSET=95, SCR_XSIZE=347 , SCR_YSIZE=33$
      ,VALUE= 'Inner diameter of the ions deflection magnet, m           ', XSIZE=5 ,YSIZE=1)
 
      Magnet_Diam_Text = Widget_text(Beam_Geometry_Base, UNAME='Magnet_Diam_Text'  $
      ,XOFFSET=856, YOFFSET=95,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(magnet_diam,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)
   
      Tank_Calorim_Label = Widget_Label(Beam_Geometry_Base, UNAME='Tank_Calorim_Label'  $
      ,XOFFSET=508, YOFFSET=125, SCR_XSIZE=347 , SCR_YSIZE=33$
      ,VALUE= 'Distance from tank end wall to center of calorimeter, m   ' , XSIZE=5 ,YSIZE=1)
 
      Tank_Calorim_Text = Widget_text(Beam_Geometry_Base, UNAME='Tank_Calorim_Text'  $
      ,XOFFSET=856, YOFFSET=125,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(tank_cal_dist,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)
  
  

      R_Grid_Label = Widget_Label(Beam_Geometry_Base, UNAME='R_Grid_Label'  $
      ,XOFFSET=508, YOFFSET=185, SCR_XSIZE=347 , SCR_YSIZE=33$
      ,VALUE= 'Major radius of center of beam accelerating grid, m      ' , XSIZE=5 ,YSIZE=1)
 
      R_Grid_Text = Widget_text(Beam_Geometry_Base, UNAME='R_Grid_Text'  $
      ,XOFFSET=856, YOFFSET=185,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(R_grid,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)
      
      Z_Grid_Label = Widget_Label(Beam_Geometry_Base, UNAME='Z_Grid_Label'  $
      ,XOFFSET=508, YOFFSET=215, SCR_XSIZE=347 , SCR_YSIZE=33$
      ,VALUE= 'Z coordinate of center of beam accelerating grid, m      ' , XSIZE=5 ,YSIZE=1)
 
      Z_Grid_Text = Widget_text(Beam_Geometry_Base, UNAME='Z_Grid_Text'  $
      ,XOFFSET=856, YOFFSET=215,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(Z_Grid,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)
  
      Phi_Grid_Label = Widget_Label(Beam_Geometry_Base, UNAME='Phi_Grid_Label'  $
      ,XOFFSET=508, YOFFSET=245, SCR_XSIZE=347 , SCR_YSIZE=33$
      ,VALUE= 'Toroidal angle of center of beam accelerating grid, rad  ' , XSIZE=5 ,YSIZE=1)
 
      Phi_Grid_Text = Widget_text(Beam_Geometry_Base, UNAME='Phi_Grid_Text'  $
      ,XOFFSET=856, YOFFSET=245,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(Phi_Grid,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)

      R_Wall_Label = Widget_Label(Beam_Geometry_Base, UNAME='R_Wall_Label'  $
      ,XOFFSET=508, YOFFSET=275, SCR_XSIZE=347 , SCR_YSIZE=33$
      ,VALUE= 'Major radius of second point defining the beam, m        ' , XSIZE=5 ,YSIZE=1)
 
      R_Wall_Text = Widget_text(Beam_Geometry_Base, UNAME='R_Wall_Text'  $
      ,XOFFSET=856, YOFFSET=275,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(R_wall,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)
      
      Z_Wall_Label = Widget_Label(Beam_Geometry_Base, UNAME='Z_Wall_Label'  $
      ,XOFFSET=508, YOFFSET=305, SCR_XSIZE=347 , SCR_YSIZE=33$
      ,VALUE= 'Z coordinate of second point defining the beam, m        ' , XSIZE=5 ,YSIZE=1)
 
      Z_Wall_Text = Widget_text(Beam_Geometry_Base, UNAME='Z_Wall_Text'  $
      ,XOFFSET=856, YOFFSET=305,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(Z_Wall,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)
  
      Phi_Wall_Label = Widget_Label(Beam_Geometry_Base, UNAME='Phi_Wall_Label'  $
      ,XOFFSET=508, YOFFSET=335, SCR_XSIZE=347 , SCR_YSIZE=33$
      ,VALUE= 'Toroidal angle of second point defining the beam, rad    ' , XSIZE=5 ,YSIZE=1)
 
      Phi_Wall_Text = Widget_text(Beam_Geometry_Base, UNAME='Phi_Wall_Text'  $
      ,XOFFSET=856, YOFFSET=335,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(Phi_Wall,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)


    
      Geometry_Plot = Widget_Draw(Beam_Geometry_Base, UNAME='Geometry_Plot'  $
      ,XOFFSET=8,YOFFSET=380,Frame=5, Retain=2, /Button_events $
      ,XSIZE=962,YSIZE=400$
      ,Graphics_Level=0)
      
      Beam_Geometry_Save_Button = Widget_Button(Beam_Geometry_Base, UNAME='Beam_Geometry_Save_Button'  $
      ,XOFFSET=4, YOFFSET=800, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Save' ,XSIZE=25 ,YSIZE=25, /Align_Center)
    
      Beam_Geometry_Close_Button = Widget_Button(Beam_Geometry_Base, UNAME='Beam_Geometry_Close_Button'  $
      ,XOFFSET=108, YOFFSET=800, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Close' ,XSIZE=25 ,YSIZE=25, /Align_Center)

      Beam_Geometry_View = CW_BGROUP(Beam_Geometry_Base, ['TOP VIEW', 'SIDE VIEW'], UNAME='Beam_Geometry_View' ,XOFFSET=760$
      ,YOFFSET=800 ,/EXCLUSIVE, Space=10, Ypad=0,column=2)
      
      Widget_Control, Beam_Geometry_View, set_value=0  
 
      WIDGET_CONTROL, Beam_Geometry_Base, /REALIZE
      XMANAGER, 'Beam_Geometry_Widget', Beam_Geometry_Widget, /No_block,Group_Leader=Main_Base

      if beam_port ne '?' then begin     
        Widget_Control,Geometry_Plot,get_value=drawID1
        cal_diam=neutr_diam*1.5 ; m
        cal_size=0.2*tank_size ;m
        x_marg=r_minor
        y_marg=r_minor
        wset, drawID1
        !X.Margin=[4,2]
        !Y.Margin=[2,7]
        ;geometrical factors
        grid_cent_x=-r_grid*cos(phi_grid)
        grid_cent_y=-r_grid*sin(phi_grid)
        wall_cent_x=-r_wall*cos(phi_wall)
        wall_cent_y=-r_wall*sin(phi_wall)
        grid_cent_z=z_grid
        wall_cent_z=z_wall
       
        dist_all_XY=sqrt((r_wall*cos(phi_wall)-r_grid*cos(phi_grid))^2.0+(r_wall*sin(phi_wall)-r_grid*sin(phi_grid))^2.0)
        cos_pivot_XY=(wall_cent_x-grid_cent_x)/dist_all_XY
        sin_pivot_XY=-(wall_cent_y-grid_cent_y)/dist_all_XY
        dist_all_YZ=sqrt((r_wall*sin(phi_wall)-r_grid*sin(phi_grid))^2.0+(z_wall-z_grid)^2.0)
        sin_pivot_YZ=-(wall_cent_z-grid_cent_z)/dist_all_YZ
        cos_pivot_YZ=(wall_cent_y-grid_cent_y)/dist_all_YZ
        dist_all_XYZ=sqrt((r_wall*cos(phi_wall)-r_grid*cos(phi_grid))^2.0+(r_wall*sin(phi_wall)-r_grid*sin(phi_grid))^2.0+(z_wall-z_grid)^2.0)
        dist_all_XZ=sqrt((r_wall*cos(phi_wall)-r_grid*cos(phi_grid))^2.0+(z_wall-z_grid)^2.0)
        sin_pivot_XZ=-(wall_cent_z-grid_cent_z)/dist_all_XZ
        cos_pivot_XZ=(wall_cent_x-grid_cent_x)/dist_all_XZ
        cos_pivot_Z=dist_all_XY/dist_all_XYZ
        sin_pivot_Z=sqrt(1.0-cos_pivot_Z^2.0)
        cos_pivot_Y=dist_all_XZ/dist_all_XYZ
        sin_pivot_Y=sqrt(1.0-cos_pivot_Y^2.0)                
     

        tank_front_x=grid_cent_x+(tank_front_dist)*cos_pivot_XY*cos_pivot_Z
        tank_front_y=grid_cent_y-(tank_front_dist)*sin_pivot_XY*cos_pivot_Z      
   
  
        wx0=min([grid_cent_x-neutr_diam/2.0*sin_pivot_XY,-(r_major+r_minor*1.2),tank_front_x-tank_diam/2.0*sin_pivot_XY,tank_front_x-tank_diam/2.0*cos_pivot_XY])-x_marg
        wx1=max([-r_wall*cos(phi_grid),-(r_major-r_minor*1.2),tank_front_x+tank_diam/2.0*sin_pivot_XY,tank_front_x+tank_diam/2.0*cos_pivot_XY])+x_marg
        wy0=min([grid_cent_y-neutr_diam/2.0*cos_pivot_XY,-(r_minor*2.0),tank_front_y-tank_diam/2.0*cos_pivot_XY,tank_front_y-tank_diam/2.0*sin_pivot_XY])-y_marg
        wy1=max([grid_cent_y+neutr_diam/2.0*cos_pivot_XY,(r_minor*2.0),tank_front_y+tank_diam/2.0*cos_pivot_XY,tank_front_y+tank_diam/2.0*sin_pivot_XY])+y_marg       
         
        plot,[0,0],[1,1],color=0,background=-1,xrange=[wx0,wx1],yrange=[wy0,wy1],/nodata,ystyle=1,xstyle=1
        angl_arr=interpol([-!Pi,!Pi],200)
        oplot,[wx0,wx1],[0,0],color=0,linestyle=2
        ;plot plasma and machine
        oplot,(r_major+r_minor)*cos(angl_arr),(r_major+r_minor)*sin(angl_arr),thick=1,color=120,linestyle=2      
        oplot,(r_major-r_minor)*cos(angl_arr),(r_major-r_minor)*sin(angl_arr),thick=1,color=120,linestyle=2
        oplot,r_major*cos(angl_arr),r_major*sin(angl_arr),thick=2,color=120              
        oplot,(r_major+r_minor*1.4)*cos(angl_arr),(r_major+r_minor*1.2)*sin(angl_arr),thick=3,color=0
        xyouts, 630,380,'Machine torus',color=0,/device,charsize=1.5
        xyouts, 630,360,'Plasma center, inner and outer SOL',color=120,/device,charsize=1.5
        ;plot beam port
        xyouts,-r_minor*3.0-r_major,-0.4,beam_port+' port',color=0,charsize=1.5

        ;plot focal point
        F_diam=(wx1-wx0)/500.0
        F_shift=(wx1-wx0)/100.0
        oplot,grid_cent_x+x_grid_focus*cos_pivot_XY*cos_pivot_Z+F_diam*cos(angl_arr),$
        grid_cent_y-x_grid_focus*sin_pivot_XY*cos_pivot_Z+F_diam*sin(angl_arr),thick=2,color=112
        oplot,grid_cent_x+y_grid_focus*cos_pivot_XY*cos_pivot_Z+F_diam*cos(angl_arr),$
        grid_cent_y-y_grid_focus*sin_pivot_XY*cos_pivot_Z+F_diam*sin(angl_arr),thick=2,color=112       

        if x_grid_focus eq y_grid_focus then begin
          xyouts,grid_cent_x+x_grid_focus*cos_pivot_XY*cos_pivot_Z+F_shift,$
          grid_cent_y-x_grid_focus*sin_pivot_XY*cos_pivot_Z,'F', color=112,charsize=2
          xyouts, 400,380,'Grids focal radius (F)',color=112,/device,charsize=1.5
        endif else begin
          xyouts,grid_cent_x+x_grid_focus*cos_pivot_XY*cos_pivot_Z+F_shift,$
          grid_cent_y-x_grid_focus*sin_pivot_XY*cos_pivot_Z,'Fx', color=112,charsize=2
          xyouts, 400,380,'Grids focal radii (Fx, Fy)',color=112,/device,charsize=1.5 
          xyouts,grid_cent_x+y_grid_focus*cos_pivot_XY*cos_pivot_Z+F_shift,$
          grid_cent_y-y_grid_focus*sin_pivot_XY*cos_pivot_Z,'Fy', color=112,charsize=2    
        endelse 
        
        ;plot beam centerline and grids
      
        oplot,[grid_cent_x,wall_cent_x],[grid_cent_y,wall_cent_y],color=0,linestyle=2

       ; oplot,[grid_cent_x-max(x_bml)*sin_pivot_XY,grid_cent_x+max(x_bml)*sin_pivot_XY],$
       ; [grid_cent_y-max(x_bml)*cos_pivot_XY,grid_cent_y+max(x_bml)*cos_pivot_XY],color=112,thick=6
        oplot,grid_cent_x+x_bml*sin_pivot_XY-y_bml*cos_pivot_XY*sin_pivot_Z,grid_cent_y+x_bml*cos_pivot_XY+y_bml*sin_pivot_XY*sin_pivot_Z,color=112,psym=3
        
        xyouts, 60,380,'Accelerating grids',color=112,/device,charsize=1.5
        x_c=neutr_diam/2.0*cos(angl_arr)
        y_c=neutr_diam/2.0*sin(angl_arr)
        neutr_front_x= grid_cent_x+neutr_front_dist*cos_pivot_XY*cos_pivot_Z
        neutr_front_y= grid_cent_y-neutr_front_dist*sin_pivot_XY*cos_pivot_Z
        oplot,neutr_front_x+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,neutr_front_y+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=96 ,thick=2
        oplot,neutr_front_x+neutr_size*cos_pivot_XY*cos_pivot_Z+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,$
        neutr_front_y-neutr_size*sin_pivot_XY*cos_pivot_Z+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=96,thick=2     
        oplot,[neutr_front_x-neutr_diam/2.0*sin_pivot_XY,neutr_front_x-neutr_diam/2.0*sin_pivot_XY+neutr_size*cos_pivot_XY*cos_pivot_Z],$
        [neutr_front_y-neutr_diam/2.0*cos_pivot_XY,neutr_front_y-neutr_diam/2.0*cos_pivot_XY-neutr_size*sin_pivot_XY*cos_pivot_Z],color=96,thick=2            
        oplot,[neutr_front_x+neutr_diam/2.0*sin_pivot_XY,neutr_front_x+neutr_diam/2.0*sin_pivot_XY+neutr_size*cos_pivot_XY*cos_pivot_Z],$
        [neutr_front_y+neutr_diam/2.0*cos_pivot_XY,neutr_front_y+neutr_diam/2.0*cos_pivot_XY-neutr_size*sin_pivot_XY*cos_pivot_Z],color=96,thick=2

        xyouts, 60,360,'Neutralizer tube',color=96,/device,charsize=1.5
        ;plot tank
        x_c=tank_diam/2.0*cos(angl_arr)
        y_c=tank_diam/2.0*sin(angl_arr)
        tank_front_x=grid_cent_x+(tank_front_dist)*cos_pivot_XY*cos_pivot_Z
        tank_front_y=grid_cent_y-(tank_front_dist)*sin_pivot_XY*cos_pivot_Z     
        oplot,tank_front_x+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,tank_front_y+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=0 ,thick=2
        oplot,tank_front_x+tank_size*cos_pivot_XY*cos_pivot_Z+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,$
        tank_front_y-tank_size*sin_pivot_XY*cos_pivot_Z+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=0,thick=2 
        oplot,[tank_front_x-tank_diam/2.0*sin_pivot_XY,tank_front_x-tank_diam/2.0*sin_pivot_XY+tank_size*cos_pivot_XY*cos_pivot_Z],$
        [tank_front_y-tank_diam/2.0*cos_pivot_XY,tank_front_y-tank_diam/2.0*cos_pivot_XY-tank_size*sin_pivot_XY*cos_pivot_Z],color=0,thick=2       
        oplot,[tank_front_x+tank_diam/2.0*sin_pivot_XY,tank_front_x+tank_diam/2.0*sin_pivot_XY+tank_size*cos_pivot_XY*cos_pivot_Z],$
        [tank_front_y+tank_diam/2.0*cos_pivot_XY,tank_front_y+tank_diam/2.0*cos_pivot_XY-tank_size*sin_pivot_XY*cos_pivot_Z],color=0,thick=2
 
        xyouts, 230,380,'Beam tank',color=0,/device,charsize=1.5
       ;plot deflection magnet
        if magnet_size ne 0.0 then begin
          x_c=magnet_diam/2.0*cos(angl_arr)
          y_c=magnet_diam/2.0*sin(angl_arr)    
          magnet_front_x=grid_cent_x+(tank_front_dist+tank_magnet_dist)*cos_pivot_XY*cos_pivot_Z
          magnet_front_y=grid_cent_y-(tank_front_dist+tank_magnet_dist)*sin_pivot_XY*cos_pivot_Z
          oplot,magnet_front_x+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,magnet_front_y+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=64 ,thick=2
          oplot,magnet_front_x+magnet_size*cos_pivot_XY*cos_pivot_Z+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,$
          magnet_front_y-magnet_size*sin_pivot_XY*cos_pivot_Z+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=64,thick=2       
          oplot,[magnet_front_x-magnet_diam/2.0*sin_pivot_XY,magnet_front_x-magnet_diam/2.0*sin_pivot_XY+magnet_size*cos_pivot_XY*cos_pivot_Z],$
          [magnet_front_y-magnet_diam/2.0*cos_pivot_XY,magnet_front_y-magnet_diam/2.0*cos_pivot_XY-magnet_size*sin_pivot_XY*cos_pivot_Z],color=64 ,thick=2      
          oplot,[magnet_front_x+magnet_diam/2.0*sin_pivot_XY,magnet_front_x+magnet_diam/2.0*sin_pivot_XY+magnet_size*cos_pivot_XY*cos_pivot_Z],$
          [magnet_front_y+magnet_diam/2.0*cos_pivot_XY,magnet_front_y+magnet_diam/2.0*cos_pivot_XY-magnet_size*sin_pivot_XY*cos_pivot_Z],color=64,thick=2
          xyouts, 230,360,'Deflection magnet',color=64,/device,charsize=1.5
        endif
        ;plot calorimeter
        if tank_cal_dist ne 0.0 then begin
          x_c=cal_diam/2.0*cos(angl_arr)
          y_c=cal_diam/2.0*sin(angl_arr)    
          cal_front_x=grid_cent_x+(tank_front_dist+tank_size+tank_cal_dist)*cos_pivot_XY*cos_pivot_Z
          cal_front_y=grid_cent_y-(tank_front_dist+tank_size+tank_cal_dist)*sin_pivot_XY*cos_pivot_Z
          oplot,cal_front_x+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,cal_front_y+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=160 ,thick=2
          oplot,cal_front_x+cal_size*cos_pivot_XY*cos_pivot_Z+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,$
          cal_front_y-cal_size*sin_pivot_XY*cos_pivot_Z+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=160,thick=2     
          oplot,[cal_front_x-cal_diam/2.0*sin_pivot_XY,cal_front_x-cal_diam/2.0*sin_pivot_XY+cal_size*cos_pivot_XY*cos_pivot_Z],$
          [cal_front_y-cal_diam/2.0*cos_pivot_XY,cal_front_y-cal_diam/2.0*cos_pivot_XY-cal_size*sin_pivot_XY*cos_pivot_Z],color=160 ,thick=2     
          oplot,[cal_front_x+cal_diam/2.0*sin_pivot_XY,cal_front_x+cal_diam/2.0*sin_pivot_XY+cal_size*cos_pivot_XY*cos_pivot_Z],$
          [cal_front_y+cal_diam/2.0*cos_pivot_XY,cal_front_y+cal_diam/2.0*cos_pivot_XY-cal_size*sin_pivot_XY*cos_pivot_Z],color=160,thick=2
          xyouts, 400,340,'Calorimeter',color=160,/device,charsize=1.5                    
        endif
        ;plot limiters
        for i=0,n_limiters-1 do begin
          z_pos=float(limiters_table(1,i))
          lim_size=float(limiters_table(2,i))
          lim_diam=float(limiters_table(3,i))
          x_size=float(limiters_table(4,i))/2.0
          y_size=float(limiters_table(5,i))/2.0
          r_lim =float(limiters_table(6,i)) 
          if finite(r_lim) then begin
            oplot,r_lim*cos(angl_arr),r_lim*sin(angl_arr),color=48,thick=2
          endif else begin
            lim_front_x=grid_cent_x+(z_pos)*cos_pivot_XY*cos_pivot_Z
            lim_front_y=grid_cent_y-(z_pos)*sin_pivot_XY*cos_pivot_Z
            lim_back_x=lim_front_x+lim_size*cos_pivot_XY*cos_pivot_Z
            lim_back_y=lim_front_y-lim_size*sin_pivot_XY*cos_pivot_Z     
            if finite(lim_diam) then begin
              x_c=lim_diam/2.0*cos(angl_arr)
              y_c=lim_diam/2.0*sin(angl_arr)
              oplot,lim_front_x+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,lim_front_y+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=48 ,thick=2
              oplot,lim_front_x+lim_size*cos_pivot_XY*cos_pivot_Z+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,$
              lim_front_y-lim_size*sin_pivot_XY*cos_pivot_Z+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=48,thick=2 
              oplot,[lim_front_x+lim_diam/2.0*sin_pivot_XY,lim_back_x+lim_diam/2.0*sin_pivot_XY],$
              [lim_front_y+lim_diam/2.0*cos_pivot_XY,lim_back_y+lim_diam/2.0*cos_pivot_XY],color=48,thick=2
              oplot,[lim_front_x-lim_diam/2.0*sin_pivot_XY,lim_back_x-lim_diam/2.0*sin_pivot_XY],$
              [lim_front_y-lim_diam/2.0*cos_pivot_XY,lim_back_y-lim_diam/2.0*cos_pivot_XY],color=48,thick=2
            endif else begin 
              oplot,[lim_front_x-x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z,lim_back_x-x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_front_y-x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z,lim_back_y-x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_front_x-x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z,lim_back_x-x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_front_y-x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z,lim_back_y-x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_front_x+x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z,lim_back_x+x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_front_y+x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z,lim_back_y+x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_front_x+x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z,lim_back_x+x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_front_y+x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z,lim_back_y+x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_front_x-x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z,lim_front_x-x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_front_y-x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z,lim_front_y-x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_front_x-x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z,lim_front_x+x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_front_y-x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z,lim_front_y+x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_front_x+x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z,lim_front_x+x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_front_y+x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z,lim_front_y+x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_front_x+x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z,lim_front_x-x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_front_y+x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z,lim_front_y-x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_back_x-x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z,lim_back_x-x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_back_y-x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z,lim_back_y-x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_back_x-x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z,lim_back_x+x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_back_y-x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z,lim_back_y+x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_back_x+x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z,lim_back_x+x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_back_y+x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z,lim_back_y+x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_back_x+x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z,lim_back_x-x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_back_y+x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z,lim_back_y-x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
            endelse
         endelse
       endfor
       xyouts, 400,360,'Beam limiters (beam duct)',color=48,/device,charsize=1.5       
    endif
  endif
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which displays the "Code Grid" window on event when
;"Beam Geometry" button is pressed.
;-------------------------------------------------------------------------------------------------------------------------
pro show_code_grid_window, main_base
;The following common block contains the table of the parameters which
;defile the 3D spatial grid which used for calculation
common grid_arr, code_grid_arr
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
 geom=Widget_Info(Main_Base,/Geometry)
    IF XREGISTERED('Code_Grid_Widget') EQ 0 then begin
      Code_Grid_Widget = WIDGET_BASE(/COLUMN, TITLE='Code Grid/Mesh', Uname='Code_Grid_Widget',/ALIGN_CENTER,XOFFSET=geom.xoffset+300,YOFFSET=geom.yoffset+geom.ysize-626,xsize=283,ysize=253)
      Code_Grid_Base = Widget_base(Code_Grid_Widget, UNAME='Code_Grid_Base'  $
      ,XOFFSET=0,YOFFSET=0,Frame=0$
      ,XSIZE=283,YSIZE=253)
      Code_Grid_1_label_1 = Widget_Label(Code_Grid_Base, UNAME='Code_Grid_1_Label_1'  $
      ,XOFFSET=1, YOFFSET=1, SCR_XSIZE=270 , SCR_YSIZE=33 $
      ,VALUE= 'Z grid spacing is coarse for z < Mid' ,XSIZE=5 ,YSIZE=23, /Align_LEFT)

      Code_Grid_1_label_2 = Widget_Label(Code_Grid_Base, UNAME='Code_Grid_1_Label_2'  $
      ,XOFFSET=1, YOFFSET=23, SCR_XSIZE=270 , SCR_YSIZE=33 $
      ,VALUE= '                  fine   for z > Mid' ,XSIZE=5 ,YSIZE=23, /Align_LEFT)      
      Code_Grid_Table1=Widget_Table(Code_Grid_Base, Uname='Code_Grid_Table1',Xoffset=1, yoffset=55$
      ,scr_xsize=250, scr_ysize=56, Alignment=1,column_labels=['Min','Step1','Mid','Step2','Max']$
      ,row_labels=['z_beam, m']$
      ,/editable,Frame=1,column_width=35,row_heights=20,value=string(code_grid_arr.z,format='(F6.3)'),FORMAT = '(F6.3)')
      
      Code_Grid_Table2=Widget_Table(Code_Grid_Base, Uname='Code_Grid_Table2',Xoffset=1, yoffset=120$
      ,scr_xsize=180, scr_ysize=76, Alignment=1,column_labels=['Min','Step','Max']$
      ,row_labels=['x_beam, m','y_beam, m']$
      ,/editable,Frame=1,column_width=35,row_heights=20,value=[[string(code_grid_arr.x,format='(F6.3)')],[string(code_grid_arr.y,format='(F6.3)')]],FORMAT = '(F6.3)')

       Code_Save_Grid_Button = Widget_Button(Code_Grid_Base, UNAME='Code_Save_Grid_Button'  $
      ,XOFFSET=1, YOFFSET=225, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Save' ,XSIZE=25 ,YSIZE=25, /Align_Center)
    
      Code_Close_Grid_Button = Widget_Button(Code_Grid_Base, UNAME='Code_Close_Grid_Button'  $
      ,XOFFSET=105, YOFFSET=225, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Close' ,XSIZE=25 ,YSIZE=25, /Align_Center)
 
      WIDGET_CONTROL, Code_Grid_Base, /REALIZE
      XMANAGER, 'Code_Grid_Widget', Code_Grid_Widget, /No_block,Group_Leader=Main_Base
    endif
  
end
 ;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which displays the "Beam Parameters" window on event when
;"Beam Parameters" button is pressed.
;-------------------------------------------------------------------------------------------------------------------------
pro show_beam_param_window, main_base
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution)
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 

   geom=Widget_Info(Main_Base,/Geometry)
    IF XREGISTERED('Beam_Param_Widget') EQ 0 then begin
      Beam_Param_Widget = WIDGET_BASE(/COLUMN, TITLE='Beam Parameters', Uname='Beam_Param_Widget',/ALIGN_CENTER,XOFFSET=geom.xoffset+300,YOFFSET=geom.yoffset+geom.ysize-626,xsize=473,ysize=528)
      Beam_Param_Base = Widget_base(Beam_Param_Widget, UNAME='Beam_Param_Base'  $
      ,XOFFSET=5,YOFFSET=5,Frame=1$
      ,XSIZE=460,YSIZE=525)
  
      Beam_Param_label = Widget_Label(Beam_Param_Base, UNAME='Beam_Param_Label'  $
      ,XOFFSET=3, YOFFSET=1, SCR_XSIZE=457 , SCR_YSIZE=33 $
      ,VALUE= 'Selected parameters of the beam' ,XSIZE=5 ,YSIZE=23, /Align_Center,/sunken_frame)      
 
      Beam_Atom_Label = Widget_Label(Beam_Param_Base, UNAME='Beam_Atom_Label'  $
      ,XOFFSET=8, YOFFSET=40, SCR_XSIZE=227 , SCR_YSIZE=33 $
      ,VALUE= 'Beam atom (H, D or T) :', XSIZE=5 ,YSIZE=1, /Align_Left)

      Beam_Atom_Text = Widget_text(Beam_Param_Base, UNAME='Beam_Atom_Text'  $
      ,XOFFSET=376, YOFFSET=40,SCR_XSIZE=78 ,SCR_YSIZE=30,/editable $
      ,VALUE=beam_atom ,XSIZE=20 ,YSIZE=1)  

      Full_Energy_Label = Widget_Label(Beam_Param_Base, UNAME='Full_Energy_Label'  $
      ,XOFFSET=8, YOFFSET=70, SCR_XSIZE=227 , SCR_YSIZE=33 $
      ,VALUE= 'Energy of the main component, keV :  ', XSIZE=5 ,YSIZE=1, /Align_Left)

      Full_Energy_Text = Widget_text(Beam_Param_Base, UNAME='Full_Energy_Text'  $
      ,XOFFSET=376, YOFFSET=70,SCR_XSIZE=78 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(e_full,format='(F10.2)'),1) ,XSIZE=20 ,YSIZE=1)      
          
      Energy_Frac_Label = Widget_Label(Beam_Param_Base, UNAME='Energy_Frac_Label'  $
      ,XOFFSET=8, YOFFSET=100, SCR_XSIZE=227 , SCR_YSIZE=33 $
      ,VALUE= 'Beam enegy components (fractions):   ', XSIZE=5 ,YSIZE=1, /Align_Left)
 
      energy_frac_text='['+strjoin('1/'+strtrim(string(round(1.0/e_frac),format='(I10)'),2),', ')+']'
  
      Energy_Frac_Text = Widget_text(Beam_Param_Base, UNAME='Energy_Frac_Text'  $
      ,XOFFSET=236, YOFFSET=100,SCR_XSIZE=218 ,SCR_YSIZE=30,/editable $
      ,VALUE=energy_frac_text ,XSIZE=20 ,YSIZE=1)       

      I_Beam_Label_1 = Widget_Label(Beam_Param_Base, UNAME='I_Beam_Label_1'  $
      ,XOFFSET=8, YOFFSET=145, SCR_XSIZE=227 , SCR_YSIZE=17 $
      ,VALUE= 'Total current of the beam, A:                            ', XSIZE=5 ,YSIZE=1, /Align_Left)

      I_Beam_Label_2 = Widget_Label(Beam_Param_Base, UNAME='I_Beam_Label_2'  $
      ,XOFFSET=8, YOFFSET=160, SCR_XSIZE=361 , SCR_YSIZE=17 $
      ,VALUE= '(positive for (H+) ion source, negative for (H-) ion source) ', XSIZE=5 ,YSIZE=1, /Align_Left)     
 
      I_Beam_Text = Widget_text(Beam_Param_Base, UNAME='I_Beam_Text'  $
      ,XOFFSET=376, YOFFSET=145,SCR_XSIZE=78 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(I_beam,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)

      I_Frac_Label = Widget_Label(Beam_Param_Base, UNAME='I_Frac_Label'  $
      ,XOFFSET=8, YOFFSET=190, SCR_XSIZE=227 , SCR_YSIZE=33 $
      ,VALUE= 'Current fraction of each component:  ', XSIZE=5 ,YSIZE=1, /Align_Left)
 
      I_frac_text='['+strjoin(strtrim(string(I_frac,format='(F10.3)'),2),', ')+']'
  
      I_Frac_Text = Widget_text(Beam_Param_Base, UNAME='I_Frac_Text'  $
      ,XOFFSET=236, YOFFSET=190,SCR_XSIZE=218 ,SCR_YSIZE=30,/editable $
      ,VALUE=I_frac_text ,XSIZE=20 ,YSIZE=1)

      I_Opt_Label_1 = Widget_Label(Beam_Param_Base, UNAME='I_Opt_Label_1'  $
      ,XOFFSET=8, YOFFSET=235, SCR_XSIZE=361 , SCR_YSIZE=17 $
      ,VALUE= 'Optimal extraction current I_opt, A:', XSIZE=5 ,YSIZE=1, /Align_Left)

      I_Opt_Label_2 = Widget_Label(Beam_Param_Base, UNAME='I_Opt_Label_2'  $
      ,XOFFSET=8, YOFFSET=250, SCR_XSIZE=361 , SCR_YSIZE=17 $
      ,VALUE= '(positive for (H+) ion source, negative for (H-) ion source) ', XSIZE=5 ,YSIZE=1, /Align_Left)

      I_Opt_Text = Widget_text(Beam_Param_Base, UNAME='I_Opt_Text'  $
      ,XOFFSET=376, YOFFSET=235,SCR_XSIZE=78 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(I_opt,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1) 
      
             
      def_font = Widget_Info(I_Opt_Text,/FONTNAME)  
 
      I_Dens_Par_Label_symb = Widget_Label(Beam_Param_Base, UNAME='I_Dens_Par_Label_Symb'  $
      ,XOFFSET=270, YOFFSET=295, SCR_XSIZE=10 , SCR_YSIZE=17, font='-adobe-symbol-medium-r-normal--14-140-75-75-p-85-adobe-fontspecific'  $
      ,VALUE= 'b', XSIZE=5 ,YSIZE=1, /Align_Left)
     
      I_Dens_Par_Label_1 = Widget_Label(Beam_Param_Base, UNAME='I_Dens_Par_Label_1'  $
      ,XOFFSET=8, YOFFSET=295, SCR_XSIZE=357 , SCR_YSIZE=17, font=def_font  $
      ,VALUE= 'Source current density profile (parabolic), b coef (0 - 1):', XSIZE=5 ,YSIZE=1, /Align_Left)
   
      I_Dens_Par_Label_2 = Widget_Label(Beam_Param_Base, UNAME='I_Dens_Par_Label_2'  $
      ,XOFFSET=8, YOFFSET=310, SCR_XSIZE=357 , SCR_YSIZE=17 $
      ,VALUE= '(0-uniform), (1-pure parabolic, zero density at the edge)', XSIZE=5 ,YSIZE=1, /Align_Left)

      I_Dens_Par_Text = Widget_text(Beam_Param_Base, UNAME='I_Dens_Par_Text'  $
      ,XOFFSET=376, YOFFSET=295,SCR_XSIZE=78 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(I_dens_par,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)   

      X_Div_Angle_Label_symb = Widget_Label(Beam_Param_Base, UNAME='X_Div_Angle_Label_Symb'  $
      ,XOFFSET=282, YOFFSET=340, SCR_XSIZE=10 , SCR_YSIZE=33, font='-adobe-symbol-medium-r-normal--14-140-75-75-p-85-adobe-fontspecific' $
      ,VALUE= 'q', XSIZE=5 ,YSIZE=1, /Align_Left)

      Y_Div_Angle_Label_symb = Widget_Label(Beam_Param_Base, UNAME='Y_Div_Angle_Label_Symb'  $
      ,XOFFSET=282, YOFFSET=385, SCR_XSIZE=10 , SCR_YSIZE=33, font='-adobe-symbol-medium-r-normal--14-140-75-75-p-85-adobe-fontspecific' $
      ,VALUE= 'q', XSIZE=5 ,YSIZE=1, /Align_Left)

      X_Div_Angle_Label = Widget_Label(Beam_Param_Base, UNAME='X_Div_Angle_Label'  $
      ,XOFFSET=8, YOFFSET=340, SCR_XSIZE=357 , SCR_YSIZE=33, font=def_font $
      ,VALUE= 'Optimal/minimal beamlet divergence half-angle omin (X), deg', XSIZE=5 ,YSIZE=1, /Align_Left)
       
      X_Div_Angle_Text = Widget_text(Beam_Param_Base, UNAME='X_Div_Angle_Text'  $
      ,XOFFSET=376, YOFFSET=340,SCR_XSIZE=78 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(x_div_bml_opt,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)

      Y_Div_Angle_Label = Widget_Label(Beam_Param_Base, UNAME='Y_Div_Angle_Label'  $
      ,XOFFSET=8, YOFFSET=385, SCR_XSIZE=357 , SCR_YSIZE=33, font=def_font $
      ,VALUE= 'Optimal/minimal beamlet divergence half-angle omin (Y), deg', XSIZE=5 ,YSIZE=1, /Align_Left)
       
      Y_Div_Angle_Text = Widget_text(Beam_Param_Base, UNAME='Y_Div_Angle_Text'  $
      ,XOFFSET=376, YOFFSET=385,SCR_XSIZE=78 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(y_div_bml_opt,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)

     
      Div_Angle_Par_Label_symb = Widget_Label(Beam_Param_Base, UNAME='Div_Angle_Par_Label_Symb'  $
      ,XOFFSET=288, YOFFSET=430, SCR_XSIZE=10 , SCR_YSIZE=17, font='-adobe-symbol-medium-r-normal--14-140-75-75-p-85-adobe-fontspecific'  $
      ,VALUE= 'g', XSIZE=5 ,YSIZE=1, /Align_Left)

      Div_Dist_Par_Label_1 = Widget_Label(Beam_Param_Base, UNAME='Div_Dist_Par_Label_1'  $
      ,XOFFSET=8, YOFFSET=430, SCR_XSIZE=357 , SCR_YSIZE=17, font=def_font   $
      ,VALUE= 'Beamlet divergence variation law (parabolic) , g coef:', XSIZE=5 ,YSIZE=1, /Align_Left)
    
      Div_Dist_Par_Label_2 = Widget_Label(Beam_Param_Base, UNAME='Div_Dist_Par_Label_2'  $
      ,XOFFSET=8, YOFFSET=445, SCR_XSIZE=357 , SCR_YSIZE=17 $
      ,VALUE= '(0-minimal), (>0 - strength of deviation from minimal)', XSIZE=5 ,YSIZE=1, /Align_Left)

      Div_Dist_Par_Text = Widget_text(Beam_Param_Base, UNAME='Div_Dist_Par_Text'  $
      ,XOFFSET=376, YOFFSET=430,SCR_XSIZE=78 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(div_dist_par,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)

      Beam_Param_Save_Button = Widget_Button(Beam_Param_Base, UNAME='Beam_Param_Save_Button'  $
      ,XOFFSET=4, YOFFSET=495, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Save' ,XSIZE=25 ,YSIZE=25, /Align_Center)
    
      Beam_Param_Close_Button = Widget_Button(Beam_Param_Base, UNAME='Beam_Param_Close_Button'  $
      ,XOFFSET=108, YOFFSET=495, SCR_XSIZE=80, SCR_YSIZE=25 $
      ,VALUE= 'Close' ,XSIZE=25 ,YSIZE=25, /Align_Center)

 
      WIDGET_CONTROL, Beam_Param_Base, /REALIZE
      XMANAGER, 'Beam_Param_Widget', Beam_Param_Widget, /No_block,Group_Leader=Main_Base
    endif
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which loads 1D z_eff profile from the *.abi input file
;-------------------------------------------------------------------------------------------------------------------------
Pro get_z_eff_file
;The following common block contains all the extracted z_eff profiles and 3D
;z_eff array after it constructed 
common effective_charge, z_eff_coord, z_eff_raw,z_eff_raw_err,z_eff_raw_r,z_eff,z_eff_err,z_eff_r,z_eff_arr,z_eff_err_arr
;The following common block contains the name of the input file from which the input
;data is extracted 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,$
beam_lim_file,beam_param_type,beam_param_file,ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
val='template'
close,1
st=0
file=file_search(z_eff_file)
if file(0) eq "" then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' :  The '+z_eff_file+' does not exist']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
  return
endif
;----------------------------------------------------- 
z_eff=0 & z_eff_r=0 & z_eff_err=0 & z_eff_raw=0 & z_eff_raw_r=0 & z_eff_raw_err=0
z_eff_coord = 0
openr,1,z_eff_file
while ~EOF(1) do begin

readf,1,val
if val eq 'z_eff_coord:' then begin 
  readf,1,val
  z_eff_coord=int(val)
endif
if val eq 'z_eff_raw_r:' then begin 
  readf,1,val
  z_eff_raw_r=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_eff_raw:' then begin 
  readf,1,val
  z_eff_raw=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1  
endif
if val eq 'z_eff_raw_err:' then begin 
  readf,1,val
  z_eff_raw_err=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_eff_r:' then begin 
  readf,1,val
  z_eff_r=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_eff:' then begin 
  readf,1,val
  z_eff=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_eff_err:' then begin 
  readf,1,val
  z_eff_err=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif

endwhile
;correct if either raw or smoothed data are missing
if n_elements(z_eff_err) le 1 and n_elements(z_eff_r) gt 1 and n_elements(z_eff) gt 1 then begin
  z_eff_err=z_eff*0.0
  st=st+1
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Z_eff error data was not found in the file. Errors set to 0']], Set_text_top_line=n_elements(status_tx)-4 
endif
if n_elements(z_eff_raw_err) le 1 and n_elements(z_eff_raw_r) gt 1 and n_elements(z_eff_raw) gt 1 then begin
  z_eff_raw_err=z_eff_raw*0.0
  st=st+1
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Z_eff_raw error data was not found in the file. Errors set to 0']], Set_text_top_line=n_elements(status_tx)-4  
endif
if n_elements(z_eff) le 1 and n_elements(z_eff_r) le 1 and n_elements(z_eff_err) le 1 and n_elements(z_eff_raw) gt 1 and n_elements(z_eff_raw_r) gt 1 and n_elements(z_eff_raw_err) gt 1 then begin
  z_eff=z_eff_raw
  z_eff_r=z_eff_raw_r
  z_eff_err=z_eff_raw_err
  st=st+3
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Z_eff data was not found in the file. (Z_eff, Z_eff_r, Z_eff_err) is copied from existed (Z_eff_raw, Z_eff_raw_r, Z_eff_raw_err)']], Set_text_top_line=n_elements(status_tx)-4
endif
if n_elements(z_eff_raw) le 1 and n_elements(z_eff_raw_r) le 1 and n_elements(z_eff_raw_err) le 1 and n_elements(z_eff) gt 1 and n_elements(z_eff_r) gt 1 and n_elements(z_eff_err) gt 1 then begin
  z_eff_raw=z_eff
  z_eff_raw_r=z_eff_r
  z_eff_raw_err=z_eff_err
  st=st+3
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Z_eff_raw data was not found in the file. (Z_eff_raw, Z_eff_raw_r, Z_eff_raw_err) is copied from existed (Z_eff, Z_eff_r, Z_eff_err)']], Set_text_top_line=n_elements(status_tx)-4
endif

if st ne 6 then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Some Z_eff input data is missing in the file']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
endif

close,1

end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which load 1D Z_eff profiles from the MDSPLUS
;-------------------------------------------------------------------------------------------------------------------------
pro get_z_eff
;The following common block contains all the extracted z_eff profiles and 3D
;z_eff array after it constructed 
common effective_charge, z_eff_coord, z_eff_raw,z_eff_raw_err,z_eff_raw_r,z_eff,z_eff_err,z_eff_r,z_eff_arr,z_eff_err_arr
;The following common block contains all the previously ne profiles and 3D
;n_e and ne_stop_cross_section arrays after they constructed.. This block is used here to get the
;n_e 1D spatial grid
common dens_electrons,n_e_coord,n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr,ne_stop_cross_section
;The following common block contains parameters which describe the geometry
;and position of the machine  plasma. This block is used here to
;extrapolate z_eff pofile to the range starting form center of the
;plasma to the edge.
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower
;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration
;calculation. This block is used here to get the z_eff_type parameter
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,ne_type,$
ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
endif
;----------------------------------------------------- 
z_eff=0 & z_eff_r=0 & z_eff_err=0 & z_eff_raw=0 & z_eff_raw_r=0 & z_eff_raw_err=0
if z_eff_type eq 0 then begin
 z_eff_coord = 0
 mdsopen,'cmod',shot,status=st0,/quiet
 if st0 then begin
   t_arr=mdsvalue('dim_of(\nrootz,0)',status=st1,/quiet)
   y_full=mdsvalue('\nrootz',status=st2,/quiet)
   r_arr=mdsvalue('dim_of(\nrootz,1)',status=st3,/quiet)
   if st1 and st2 and st3 then begin
     t1_ind=locate(t_arr,t1)
     t2_ind=locate(t_arr,t2)
  
     t1_ind=t1_ind(0)
     t2_ind=t2_ind(0)
  
     if t1_ind eq t2_ind then y_arr=reform(y_full(t1_ind,*)) else $
     y_arr=reform(mean2d(transpose(y_full(t1_ind:t2_ind,*))))
     if float(y_arr(0)) eq 0 then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The Dalsa Z_eff data set is not consistent in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
       st_err=1
       return
     endif

     if n_elements(where(finite(y_arr(where(y_arr))))) gt 2 then begin
       r_arr=r_arr(where(y_arr gt 1e2))
       y_arr=y_arr(where(y_arr gt 1e2))*1e-6
     endif else begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : It is not possible to acquire Z_eff from MDSPLUS DALSA data']], Set_text_top_line=n_elements(status_tx)-4
       st_err=1
       return
     endelse 

      r_arr=r_arr(where(y_arr gt 0))
      y_arr=y_arr(where(y_arr gt 0))
      vb_raw=y_arr(sort(r_arr))
      vb_raw_r=r_arr(sort(r_arr))

      ;extrapolation
      if vb_raw_r(0) gt r_major then begin
        vb_raw_r=[r_major,vb_raw_r]
        vb_raw=[vb_raw(0),vb_raw]
      endif
      if vb_raw_r(n_elements(vb_raw)-1) lt r_major+r_minor then begin
        vb_raw_r=[vb_raw_r,r_major+r_minor]
        vb_raw=[vb_raw,vb_raw(n_elements(vb_raw)-1)]
      endif

      z_eff_raw_r=vb_raw_r
      z_eff_raw=((vb_raw/n_e(locate(n_e_r,z_eff_raw_r)))^2.0<5)
      z_eff_raw_err=((vb_raw/n_e(locate(n_e_r,z_eff_raw_r))^2.0<5)*n_e_err(locate(n_e_r,z_eff_raw_r)))*(2.0)/n_e(locate(n_e_r,z_eff_raw_r))
      z_eff_r = n_e_r
     
      z_eff=interpol(z_eff_raw,z_eff_raw_r,z_eff_r)
   
      z_eff_err=interpol(z_eff_raw_err,z_eff_raw_r,z_eff_r,/quadratic)

    endif else begin
      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The full Dalsa Z_eff data set is not available in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
      st_err=1
      return
    endelse
  endif else begin
    Widget_control, status_wid, Get_Value=status_tx
    Widget_Control, status_wid,$
    Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : This shot is not existed in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
    st_err=1
    return
  endelse
endif
if z_eff_type eq 1 then begin
 z_eff_coord = 0
 mdsopen,'spectroscopy',shot,status=st0,/quiet
 if st0 then begin
   t_arr=mdsvalue('dim_of(\z_ave)',status=st1,/quiet)
   y_full=mdsvalue('\z_ave',status=st2,/quiet)
   if st1 and st2 then begin
     t1_ind=locate(t_arr,t1)
     t2_ind=locate(t_arr,t2)
  
     t1_ind=t1_ind(0)
     t2_ind=t2_ind(0)
  
     y_arr=mean(y_full(t1_ind:t2_ind))
     if float(y_arr(0)) eq 0 then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The Z_ave Z_eff data set is not consistent in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
       st_err=1
       return
     endif

     if finite(y_arr) then begin
       y_arr=y_arr;(where(y_arr ge 1.0))
     endif else begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : It is not possible to acquire Z_eff from MDSPLUS Z_ave data']], Set_text_top_line=n_elements(status_tx)-4
       st_err=1
       return
     endelse 

      z_eff_r = n_e_r
      z_eff=fltarr(n_elements(n_e_r))+y_arr(0)
      z_eff_err=fltarr(n_elements(n_e_r))+y_arr(0)*0.05
      z_eff_raw_r=n_e_r
      z_eff_raw=z_eff
      z_eff_raw_err=z_eff_err
    endif else begin
      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The full Dalsa Z_eff data set is not available in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
      st_err=1
      return
    endelse
  endif else begin
    Widget_control, status_wid, Get_Value=status_tx
    Widget_Control, status_wid,$
    Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : This shot is not existed in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
    st_err=1
    return
  endelse
endif
if z_eff_type eq 2 then begin
    z_eff_coord = n_e_coord
    st_z_eff=0
    val=float(z_eff_file)  
    
    if z_eff_coord eq 0 then z_eff_raw_r=[r_major,r_major+r_minor] else z_eff_raw_r=[0.0,1.0]
    z_eff_raw=[val,val]

    z_eff_raw_err=[0.1,0.1]
    z_eff_r = n_e_r
     
    z_eff=interpol(z_eff_raw,z_eff_raw_r,z_eff_r)
   
    z_eff_err=interpol(z_eff_raw_err,z_eff_raw_r,z_eff_r)
endif
if z_eff_type eq 3 then begin
  file=file_search(z_eff_file)
  if file(0) eq "" then begin
    Widget_control, status_wid, Get_Value=status_tx
    Widget_Control, status_wid,$
    Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' :  The '+z_eff_file+' does not exist']], Set_text_top_line=n_elements(status_tx)-4
    st_err=1
    return
  endif
  restore,z_eff_file
  t1_ind=locate(time,t1)
  t2_ind=locate(time,t2)
  
  y_arr=mean(interpolate(z_eff_ave,interpol(make_array(n_elements(time),/index),time,[t1,t2])))
  z_eff_r = n_e_r
  z_eff=fltarr(n_elements(n_e_r))+y_arr(0)
  z_eff_err=fltarr(n_elements(n_e_r))+y_arr(0)*0.1
  z_eff_raw=z_eff
  z_eff_raw_r=z_eff_r
  z_eff_raw_err=z_eff_raw
  z_eff_coord = n_e_coord
endif
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which extracts n_E 1D profiles form the fits file
;-------------------------------------------------------------------------------------------------------------------------
pro get_ne_fits, filename
;The following common block contains 1D ne profiles and 3D
;n_e and ne_stop_cross_section arrays after they constructed.
common dens_electrons,n_e_coord,n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr,ne_stop_cross_section
;The following common block contains the parameters which describe the geometry
;and position of the machine  plasma. This block is used here to
;extrapolate n_e pofile to the range starting form center of the
;plasma to the edge.
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
endif
;----------------------------------------------------- 
n_e=0 & n_e_r=0 & n_e_err=0 & n_e_raw=0 & n_e_raw_r=0 & n_e_raw_err=0
;-- Get fitted density profiles
file=file_search(filename)
if file(0) eq "" then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The '+filename+' does not exist']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
  return
endif
restore,filename
n_el=ne_fit.combined_fit_ne*1e-6    ; (t,x) in cm**-3
t_n=ne_fit.time
r_n=ne_fit.rmajor

t1_ind=locate(t_n,t1)
t2_ind=locate(t_n,t2)

dens_e ; to get errors from the real data
if st_err then return
n_e_raw=mean2d(transpose(n_el(t1_ind:t2_ind,*)))
if st_err then return
n_e_raw_r=mean2d(transpose(r_n(t1_ind:t2_ind,*)))
if st_err then return
;extrapolation
if n_e_raw_r(0) gt r_major then begin
   n_e_raw_r=[r_major,n_e_raw_r]
   n_e_raw=[n_e_raw(0),n_e_raw]
endif
if n_e_raw_r(n_elements(n_e_raw)-1) lt r_major+r_minor then begin
   n_e_raw_r=[n_e_raw_r,r_major+r_minor]
   n_e_raw=[n_e_raw,vb_raw(n_elements(vb_raw)-1)]
endif


n_e_raw_err=interpol(n_e_err,n_e_r,n_e_raw_r)

n_e_raw_err(locate(n_e_raw_r,n_e_r(n_elements(n_e_r)-1)):*)=n_e_raw_err(locate(n_e_raw_r,n_e_r(n_elements(n_e_r)-1)))
n_e_r=n_e_raw_r
n_e_err=n_e_raw_err
n_e=n_e_raw
n_e_coord = 0
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which extracts t_E 1D profiles form the fits file
;-------------------------------------------------------------------------------------------------------------------------
pro get_te_fits, filename
;The following common block contains 1D t_e profiles and 3D
;t_e array after it constructed.
common temp_electrons,t_e_coord,t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
;The following common block contains the parameters which describe the geometry
;and position of the machine  plasma. This block is used here to
;extrapolate t_e pofile to the range starting form center of the
;plasma to the edge.
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
endif
;----------------------------------------------------- 
t_e=0 & t_e_r=0 & t_e_err=0 & t_e_raw=0 & t_e_raw_r=0 & t_e_raw_err=0
;-- Get fitted density profiles
file=file_search(filename)
if file(0) eq "" then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The '+filename+' does not exist']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
  return
endif
restore,filename
t_el=te_fit.te_comb_fit    ; (t,x) in keV
t_n=te_fit.time
r_n=te_fit.rmajor

t1_ind=locate(t_n,t1)
t2_ind=locate(t_n,t2)

temp_e ; to get errors from the real data
if st_err then return

t_e_raw=mean2d(transpose(t_el(t1_ind:t2_ind,*)))
if st_err then return
t_e_raw_r=mean2d(transpose(r_n(t1_ind:t2_ind,*)))
if st_err then return
;extrapolation
if t_e_raw_r(0) gt r_major then begin
   t_e_raw_r=[r_major,t_e_raw_r]
   t_e_raw=[t_e_raw(0),t_e_raw]
endif
if t_e_raw_r(n_elements(t_e_raw)-1) lt r_major+r_minor then begin
   t_e_raw_r=[t_e_raw_r,r_major+r_minor]
   t_e_raw=[t_e_raw,vb_raw(n_elements(vb_raw)-1)]
endif

t_e_raw_err=interpol(t_e_err,t_e_r,t_e_raw_r)

t_e_raw_err(locate(t_e_raw_r,t_e_r(n_elements(t_e_r)-1)):*)=t_e_raw_err(locate(t_e_raw_r,t_e_r(n_elements(t_e_r)-1)))
t_e_r=t_e_raw_r
t_e_err=t_e_raw_err
t_e=t_e_raw
t_e_coord = 0
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which is regularly used after smooth_func routine to calculate
;the spline values 
;-------------------------------------------------------------------------------------------------------------------------
pro eval_sp,xsm,ysm,xeval,yeval,y1eval,y2eval
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
endif
;----------------------------------------------------- 
;evaluate the spline at the points xeval
  npts = n_elements(xeval)
  ind = locate(xsm,xeval)
  yeval=ysm(ind,0)+ysm(ind,1)*(xeval-xsm(ind))+ysm(ind,2)/2*(xeval-xsm(ind))^2+ysm(ind,3)/6*(xeval-xsm(ind))^3
  y1eval=ysm(ind,1)+ysm(ind,2)*(xeval-xsm(ind))+ysm(ind,3)/2*(xeval-xsm(ind))^2
  y2eval=ysm(ind,0)+ysm(ind,2)+ysm(ind,3)*(xeval-xsm(ind))
 return
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which is used to smooth the n_e_raw input profiles(manually
;by user)
;-------------------------------------------------------------------------------------------------------------------------
pro smooth_ne,sm_n
;The following common block contains 1D n_e profiles of raw and smoothed data, and 3D
;n_e array after it constructed.
common dens_electrons,n_e_coord,n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr,ne_stop_cross_section
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
  ncrd=n_elements(n_e_raw)
  if ncrd gt 3 then begin
     if (where(n_e_raw_err eq 0))(0) eq -1 and (where(finite(n_e_raw_err) eq 0))(0) eq -1 then dy=(n_e_raw_err)/max(n_e_raw_err) else dy=make_array(ncrd,value=1)
     y_max=max(n_e_raw)
     yout_ne=smooth_func(n_e_raw_r,n_e_raw/y_max,dy,ncrd,sm_n)*y_max
     if st_err then return
     eval_sp,n_e_raw_r,yout_ne,n_e_r,n_e,y1_new,y2_new
     if st_err then return
     n_e=(n_e>0)
     n_e_err=interpol(n_e_raw_err,n_e_raw_r,n_e_r,/quadratic)
     n_e_err=(n_e_err>0)
  endif
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which is used to smooth the t_e_raw input profiles(manually
;by user)
;-------------------------------------------------------------------------------------------------------------------------
pro smooth_te,sm_t
;The following common block contains 1D t_e profiles of raw and smoothed data, and 3D
;t_e array after it constructed.
common temp_electrons,t_e_coord,t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
  ncrd=n_elements(t_e_raw)
  if ncrd gt 3 then begin
     if (where(t_e_raw_err eq 0))(0) eq -1 and (where(finite(t_e_raw_err) eq 0))(0) eq -1 then dy=(t_e_raw_err)/max(t_e_raw_err) else dy=make_array(ncrd,value=1)
     y_max=max(t_e_raw)
     yout_te=smooth_func(t_e_raw_r,t_e_raw/y_max,dy,ncrd,sm_t)*y_max
     if st_err then return
     eval_sp,t_e_raw_r,yout_te,t_e_r,t_e,y1_new,y2_new
     if st_err then return
     t_e=(t_e>0)
     t_e_err=interpol(t_e_raw_err,t_e_raw_r,t_e_r,/quadratic)
     t_e_err=(t_e_err>0)
  endif
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which is used to smooth the z_eff_raw input profiles(manually
;by user)
;-------------------------------------------------------------------------------------------------------------------------
pro smooth_z_eff,sm_z_eff
;The following common block contains 1D z_eff profiles of raw and smoothed data, and 3D
;z_eff array after it constructed.
common effective_charge, z_eff_coord, z_eff_raw,z_eff_raw_err,z_eff_raw_r,z_eff,z_eff_err,z_eff_r,z_eff_arr,z_eff_err_arr
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
  ncrd=n_elements(z_eff_raw)
  if ncrd gt 3 then begin
     if (where(z_eff_raw_err eq 0))(0) eq -1 and (where(finite(z_eff_raw_err) eq 0))(0) eq -1 then dy=(z_eff_raw_err)/max(z_eff_raw_err) else dy=make_array(ncrd,value=1)
     y_max=max(z_eff_raw)
     if ncrd lt 3 then return
     yout_te=smooth_func(z_eff_raw_r,z_eff_raw/y_max,dy,ncrd,sm_z_eff)*y_max
     if st_err then return
     eval_sp,z_eff_raw_r,yout_te,z_eff_r,z_eff,y1_new,y2_new
     if st_err then return
     z_eff=(z_eff>0)
     z_eff_err=interpol(z_eff_raw_err,z_eff_raw_r,z_eff_r,/quadratic)
     z_eff_err=(z_eff_err>0)
   endif
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which loads 1D n_e profile from the *.abi input file
;-------------------------------------------------------------------------------------------------------------------------
Pro get_ne_file
;The following common block contains 1D n_e profiles of raw and smoothed data, and 3D
;n_e array after it constructed.
common dens_electrons,n_e_coord,n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr,ne_stop_cross_section
;The following common block contains the name of the input file from which the input
;data is extracted 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,$
ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
n_e=0 & n_e_r=0 & n_e_err=0 & n_e_raw=0 & n_e_raw_r=0 & n_e_raw_err=0
n_e_coord = 0; default if no value in the file
val='template'
close,1
st=0
file=file_search(ne_file)
if file(0) eq "" then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The '+ne_file+' does not exist']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
  return
endif
openr,1,ne_file
while ~EOF(1) do begin
readf,1,val
if val eq 'n_e_coord:' then begin 
  readf,1,val
  n_e_coord=int(val)
endif
if val eq 'n_e_raw_r:' then begin 
  readf,1,val
  n_e_raw_r=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'n_e_raw:' then begin 
  readf,1,val
  n_e_raw=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'n_e_raw_err:' then begin 
  readf,1,val
  n_e_raw_err=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'n_e_r:' then begin 
  readf,1,val
  n_e_r=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'n_e:' then begin 
  readf,1,val
  n_e=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'n_e_err:' then begin 
  readf,1,val
  n_e_err=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
endwhile
;correct if either raw or smoothed data are missing
if n_elements(n_e_err) le 1 and n_elements(n_e_r) gt 1 and n_elements(n_e) gt 1 then begin
  n_e_err=n_e*0.0
  st=st+1
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : N_e_err data was not found in the file. N_e_err set to 0']], Set_text_top_line=n_elements(status_tx)-4  
endif
if n_elements(n_e_raw_err) le 1 and n_elements(n_e_raw_r) gt 1 and n_elements(n_e_raw) gt 1 then begin
  n_e_raw_err=n_e_raw*0.0
  st=st+1
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : N_e_raw_err data was not found in the file. N_e_raw_err set to 0']], Set_text_top_line=n_elements(status_tx)-4  
endif 
if n_elements(n_e) le 1 and n_elements(n_e_r) le 1 and n_elements(n_e_err) le 1 and n_elements(n_e_raw) gt 1 and n_elements(n_e_raw_r) gt 1 and n_elements(n_e_raw_err) gt 1 then begin
  n_e=n_e_raw
  n_e_r=n_e_raw_r
  n_e_err=n_e_raw_err
  st=st+3
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : N_e data was not found in the file. (N_e, N_e_r, N_e_err) is copied from existed (N_e_raw, N_e_raw_r, N_e_raw_err)']], Set_text_top_line=n_elements(status_tx)-4
endif
if n_elements(n_e_raw) le 1 and n_elements(n_e_raw_r) le 1 and n_elements(n_e_raw_err) le 1 and n_elements(n_e) gt 1 and n_elements(n_e_r) gt 1 and n_elements(n_e_err) gt 1 then begin
  n_e_raw=n_e
  n_e_raw_r=n_e_r
  n_e_raw_err=n_e_err
  st=st+3
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : N_e data was not found in the file. (N_e_raw, N_e_raw_r, N_e_raw_err) is copied from existed (N_e, N_e_r, N_e_err)']], Set_text_top_line=n_elements(status_tx)-4
endif
if st ne 6 then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Some Electron Density input data is missing in the file']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
endif
close,1

end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which loads n_e profiles from the MDSPLUS
;-------------------------------------------------------------------------------------------------------------------------
pro dens_e
;The follwing common block contains 1D n_e profiles of raw and smoothed data, and 3D
;n_e array after it constructed.
common dens_electrons,n_e_coord,n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr,ne_stop_cross_section
;The following common block contains the parameters which describe the geometry
;and position of the machine  plasma. This block is used here to
;extrapolate n_e pofile to the range starting form center of the
;plasma to the edge
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower 
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
n_e=0 & n_e_r=0 & n_e_err=0 & n_e_raw=0 & n_e_raw_r=0 & n_e_raw_err=0
 ;Taking the electron density TS data
    MDSOPEN,'ELECTRONS',SHOT,/QUIET,STATUS=ST0
    if st0 then begin
      yag_time=mdsvalue('\electrons::yg_results.details:timebase',/QUIET,STATUS=St1)
      nsig=n_elements(yag_time)

      yag_ne_old=mdsvalue('\yg_results.global.profile:ne_rz_t',/QUIET,STATUS=St2)
      yag_ne_old_err=mdsvalue('\yg_results.global.profile:ne_err_zt',/QUIET,STATUS=St3)
      yag_r_old=mdsvalue('\yg_results.global.profile:r_mid_t',/QUIET,STATUS=St4)

      yag_ne_new=mdsvalue('\yag_new.results.profiles:ne_rz',/QUIET,STATUS=St5)
      yag_ne_new_err=mdsvalue('\yag_new.results.profiles:ne_err',/QUIET,STATUS=St6) 
      yag_r_new=mdsvalue('\yag_new.results.profiles:r_mid_t',/QUIET,STATUS=St7)

      edge_ne=mdsvalue('\ts_ne',/QUIET,STATUS=St8)
      edge_ne_err=mdsvalue('\ts_ne_err',/QUIET,STATUS=St9)
      edge_r=mdsvalue('\ts_rmid',/QUIET,STATUS=St10)
    mdsclose  ;close electrons tree
    ;stop,st1,st2,st3,st4,st5,n_elements(edge_ne)
    if st1 and st5 and st6 and st7 and st8 and st9 and st10 and (n_elements(edge_ne) gt 1) then begin
   
      size_old=size(yag_ne_old)
      size_new=size(yag_ne_new)
      size_edge=size(edge_ne)
      t1_ind=locate(yag_time,t1)
      t2_ind=locate(yag_time,t2)
      ;major error was fixed on Oct 17, 2007-----------------
      if st2 then begin
        if (where(yag_ne_old eq 0))(0) ne -1 then yag_ne_old(where(yag_ne_old eq 0))=!Values.F_NAN
        if (where(yag_ne_old_err eq 0))(0) ne -1 then yag_ne_old_err(where(yag_ne_old_err eq 0))=!Values.F_NAN
      endif
      if st1 then begin
        if (where(yag_ne_new eq 0))(0) ne -1 then yag_ne_new(where(yag_ne_new eq 0))=!Values.F_NAN
        if (where(yag_ne_new_err eq 0))(0) ne -1 then yag_ne_new_err(where(yag_ne_new_err eq 0))=!Values.F_NAN
      endif
      if st4 then begin
        if (where(edge_ne eq 0))(0) ne -1 then edge_ne(where(edge_ne eq 0))=!Values.F_NAN
        if (where(edge_ne_err eq 0))(0) ne -1 then edge_ne_err(where(edge_ne_err eq 0))=!Values.F_NAN
      endif
      ;-------------------------------------------------------
      yag_ne_old_av=fltarr(size_old(2))
      yag_ne_new_av=fltarr(size_new(2))
      yag_ne_edge_av=fltarr(size_edge(2))
      yag_ne_old_err_av=fltarr(size_old(2))
      yag_ne_new_err_av=fltarr(size_new(2))
      yag_ne_edge_err_av=fltarr(size_edge(2))
      yag_r_old_av=fltarr(size_old(2))
      yag_r_new_av=fltarr(size_new(2))
      yag_r_edge_av=fltarr(size_edge(2))
      if size_old(0) gt 0 then begin
        for i=0, size_old(2)-1 do begin
          yag_ne_old_av(i)=mean(yag_ne_old(t1_ind:t2_ind,i),/NAN)*1e-6
          yag_ne_old_err_av(i)=mean(yag_ne_old_err(t1_ind:t2_ind,i),/NAN)*1e-6
          yag_r_old_av(i)=mean(yag_r_old(t1_ind:t2_ind,i));-0.01;added for shot 1070831020
        endfor
      endif else begin
        yag_ne_old_av=0
        yag_ne_old_err_av=0
        yag_r_old_av=0
      endelse
      if size_new(0) gt 0 then begin        
        for i=0, size_new(2)-1 do begin
          yag_ne_new_av(i)=mean(yag_ne_new(t1_ind:t2_ind,i),/NAN)*1e-6
          yag_ne_new_err_av(i)=mean(yag_ne_new_err(t1_ind:t2_ind,i),/NAN)*1e-6
          yag_r_new_av(i)=mean(yag_r_new(t1_ind:t2_ind,i));-0.01;added for shot 1070831020
        endfor
      endif else begin
        yag_ne_new_av=0
        yag_ne_new_err_av=0
        yag_r_new_av=0
      endelse
      if size_edge(0) gt 0 then begin 
        for i=0, size_edge(2)-1 do begin
          yag_ne_edge_av(i)=mean(edge_ne(t1_ind:t2_ind,i),/NAN)*1e-6
          yag_ne_edge_err_av(i)=mean(edge_ne_err(t1_ind:t2_ind,i),/NAN)*1e-6
          yag_r_edge_av(i)=mean(edge_r(t1_ind:t2_ind,i));-0.01;added for shot 1070831020
        endfor
      endif else begin
        yag_ne_edge_av=0
        yag_ne_edge_err_ev=0
        yag_r_edge_av=0
      endelse
     ; print,yag_r_edge_av
      ;addon to the upper change
      if (where(finite(yag_ne_old_av)))(0) ne -1 then yag_r_old_av=yag_r_old_av(where(finite(yag_ne_old_av))) else yag_r_old_av=0
      if (where(finite(yag_ne_old_av)))(0) ne -1 then yag_ne_old_err_av=yag_ne_old_err_av(where(finite(yag_ne_old_av))) else yag_ne_old_err_av=0
      if (where(finite(yag_ne_old_av)))(0) ne -1 then yag_ne_old_av=yag_ne_old_av(where(finite(yag_ne_old_av))) else yag_ne_old_av=0
      if (where(finite(yag_ne_new_av)))(0) ne -1 then yag_r_new_av=yag_r_new_av(where(finite(yag_ne_new_av))) else yag_r_new_av=0
      if (where(finite(yag_ne_new_av)))(0) ne -1 then yag_ne_new_err_av=yag_ne_new_err_av(where(finite(yag_ne_new_av))) else yag_ne_new_err_av=0
      if (where(finite(yag_ne_new_av)))(0) ne -1 then yag_ne_new_av=yag_ne_new_av(where(finite(yag_ne_new_av))) else yag_ne_new_av=0
      if (where(finite(yag_ne_edge_av)))(0) ne -1 then yag_r_edge_av=yag_r_edge_av(where(finite(yag_ne_edge_av))) else yag_r_edge_av=0
      if (where(finite(yag_ne_edge_av)))(0) ne -1 then yag_ne_edge_err_av=yag_ne_edge_err_av(where(finite(yag_ne_edge_av))) else yag_ne_edge_err_av=0
      if (where(finite(yag_ne_edge_av)))(0) ne -1 then yag_ne_edge_av=yag_ne_edge_av(where(finite(yag_ne_edge_av))) else yag_ne_edge_av=0
     ;-----end of addon----
      n_e_raw=[yag_ne_edge_av,yag_ne_old_av,yag_ne_new_av]
      n_e_raw_r=[yag_r_edge_av,yag_r_old_av,yag_r_new_av]
      n_e_raw_err=[yag_ne_edge_err_av,yag_ne_old_err_av,yag_ne_new_err_av]
      
      n_e_raw_r=n_e_raw_r(where((finite(n_e_raw) ne 0) and (n_e_raw ne 0)))
      n_e_raw_err=n_e_raw_err(where((finite(n_e_raw) ne 0) and (n_e_raw ne 0)))
      n_e_raw=n_e_raw(where((finite(n_e_raw) ne 0) and (n_e_raw ne 0)))
      if mean(yag_r_edge_av) LT 0.7 then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The full Thompson Scattering Ne data set is not available in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
       st_err=1
       return
      endif
    endif else begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The full Thompson Scattering Ne data set is not available in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
       st_err=1
       return
    endelse
   endif else begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : This shot is not existed in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
     st_err=1
     return
   endelse
   n_e_raw=n_e_raw(sort(n_e_raw_r))
   n_e_raw_err=n_e_raw_err(sort(n_e_raw_r))
   n_e_raw_r=n_e_raw_r(sort(n_e_raw_r))

   ;extrapolation
   if n_e_raw_r(0) gt r_major then begin
     n_e_raw_r=[r_major,n_e_raw_r]
     n_e_raw=[n_e_raw(0),n_e_raw]
     n_e_raw_err=[n_e_raw_err(0),n_e_raw_err]
   endif
   if n_e_raw_r(n_elements(n_e_raw)-1) lt r_major+r_minor then begin
     n_e_raw_r=[n_e_raw_r,r_major+r_minor]
     n_e_raw=[n_e_raw,n_e_raw(n_elements(n_e_raw)-1)]
     n_e_raw_err=[n_e_raw_err,n_e_raw_err(n_elements(n_e_raw_err)-1)]
   endif     

   n_int=400 ; number of interpolating points 400 in enough
   n_e_r=interpol([min(n_e_raw_r),max(n_e_raw_r)],n_int)
   n_e=interpol(n_e_raw,n_e_raw_r,n_e_r)
   n_e_err=interpol(n_e_raw_err,n_e_raw_r,n_e_r,/quadratic)
n_e_coord = 0
end
;-------------------------------------------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------------------------------------------
;Procedure which calculates n_e profiles using quick_fit routine
;-------------------------------------------------------------------------------------------------------------------------
pro quickfit_ne
;The follwing common block contains 1D n_e profiles of raw and smoothed data, and 3D
;n_e array after it constructed.
common dens_electrons,n_e_coord,n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr,ne_stop_cross_section
;The following common block contains the parameters which describe the geometry
;and position of the machine  plasma. This block is used here to
;extrapolate n_e pofile to the range starting form center of the
;plasma to the edge
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower 
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
  n_e=0 & n_e_r=0 & n_e_err=0 & n_e_raw=0 & n_e_raw_r=0 & n_e_raw_err=0
  ;use Y. Ma routine to fit TS data
   nedeg=long(3.0)
   quick_fit, shot, ne_deg=nedeg,adata, /nosave
   if n_elements(adata) gt 0 then begin
     t_quickfit  = adata.t_ts
     r_quickfit  = adata.ax
     rout_quickfit  = adata.r_out   
     f_quickfit  = adata.afp
     fer_quickfit  = adata.afper

     n_t_int=100
     t_int=interpol([t1(0),t2(0)],n_t_int)  

     n_r_int=400
     r_int=interpol([r_major,r_major+r_minor],n_r_int)

     n_e_int=fltarr(n_elements(t_quickfit),n_r_int)
     n_e_err_int=fltarr(n_elements(t_quickfit),n_r_int)   
     for i=0,n_elements(t_quickfit)-1 do n_e_int(i,*)=interpol(f_quickfit(i,*,0),r_quickfit+rout_quickfit(i),r_int,/spline)
     for i=0,n_elements(t_quickfit)-1 do n_e_err_int(i,*)=interpol(fer_quickfit(i,*,0),r_quickfit+rout_quickfit(i),r_int,/spline)

     n_e_int2=fltarr(n_t_int,n_r_int)
     n_e_err_int2=fltarr(n_t_int,n_r_int)
     for i=0,n_r_int-1 do n_e_int2(*,i)=interpol(n_e_int(*,i),t_quickfit,t_int,/spline)
     for i=0,n_r_int-1 do n_e_err_int2(*,i)=interpol(n_e_err_int(*,i),t_quickfit,t_int,/spline)

     n_e_raw_r=r_int
     n_e_raw=mean2d(transpose(n_e_int2))*1e14
     n_e_raw_err=mean2d(transpose(n_e_err_int2))*1e14
     n_e_r=n_e_raw_r
     n_e=n_e_raw
     n_e_err=n_e_raw_err
  endif else begin
     n_r_int=400
     r_int=interpol([r_major,r_major+r_minor],n_r_int)
     n_e_raw_r=r_int
     n_e_raw=n_e_raw_r*0.0
     n_e_raw_err=n_e_raw_r*0.0
     n_e_r=n_e_raw_r
     n_e=n_e_raw
     n_e_err=n_e_raw_err   
  endelse
n_e_coord = 0
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which loads t_e profiles from the *.abi input files
;-------------------------------------------------------------------------------------------------------------------------
Pro get_te_file
;The following common block contains 1D t_e profiles of raw and smoothed data, and 3D
;t_e array after it constructed. 
common temp_electrons,t_e_coord,t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
;The following common block contains the name of the input file from which the input
;data is extracted 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,ne_type,$
ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
t_e=0 & t_e_r=0 & t_e_err=0 & t_e_raw=0 & t_e_raw_r=0 & t_e_raw_err=0
t_e_coord = 0 ;default if no value in file
val='template'
close,1
st=0
file=file_search(te_file)
if file(0) eq "" then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The '+te_file+' does not exist']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
  return
endif
openr,1,te_file

while ~EOF(1) do begin

readf,1,val
if val eq 't_e_coord:' then begin 
  readf,1,val
  t_e_coord=int(val)
endif
if val eq 't_e_raw_r:' then begin 
  readf,1,val
  t_e_raw_r=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 't_e_raw:' then begin 
  readf,1,val
  t_e_raw=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 't_e_raw_err:' then begin 
  readf,1,val
  t_e_raw_err=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 't_e_r:' then begin 
  readf,1,val
  t_e_r=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 't_e:' then begin 
  readf,1,val
  t_e=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 't_e_err:' then begin 
  readf,1,val
  t_e_err=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif

endwhile
;correct if either raw or smoothed data are missing
if n_elements(t_e_err) le 1 and n_elements(t_e_r) gt 1 and n_elements(t_e) gt 1 then begin
  t_e_err=t_e*0.0
  st=st+1
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : T_e_err data was not found in the file. T_e_err set to 0']], Set_text_top_line=n_elements(status_tx)-4 
endif
if n_elements(t_e_raw_err) le 1 and n_elements(t_e_raw_r) gt 1 and n_elements(t_e_raw) gt 1 then begin
  t_e_raw_err=t_e_raw*0.0
  st=st+1
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : T_e_raw_err data was not found in the file. T_e_raw_err set to 0']], Set_text_top_line=n_elements(status_tx)-4 
endif
if n_elements(t_e) le 1 and n_elements(t_e_r) le 1 and n_elements(t_e_err) le 1 and n_elements(t_e_raw) gt 1 and n_elements(t_e_raw_r) gt 1 and n_elements(t_e_raw_err) gt 1 then begin
  t_e=t_e_raw
  t_e_r=t_e_raw_r
  t_e_err=t_e_raw_err
  st=st+3
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : T_e data was not found in the file. (T_e, T_e_r, T_e_err) is copied from existed (T_e_raw, T_e_raw_r, T_e_raw_err)']], Set_text_top_line=n_elements(status_tx)-4
endif
if n_elements(t_e_raw) le 1 and n_elements(t_e_raw_r) le 1 and n_elements(t_e_raw_err) le 1 and n_elements(t_e) gt 1 and n_elements(t_e_r) gt 1 and n_elements(t_e_err) gt 1 then begin
  t_e_raw=t_e
  t_e_raw_r=t_e_r
  t_e_raw_err=t_e_err
  st=st+3
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : T_e data was not found in the file. (T_e_raw, T_e_raw_r, T_e_raw_err) is copied from existed (T_e, T_e_r, T_e_err)']], Set_text_top_line=n_elements(status_tx)-4
endif
if st ne 6 then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Some Electron Temperature input data is missing in the file']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
endif

close,1

end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which loads t_e profiles from the Thomspson Scattering (MDSPLUS) 
;-------------------------------------------------------------------------------------------------------------------------
pro temp_e
;The following common block contains 1D t_e profiles of raw and smoothed data, and 3D
;t_e array after it constructed.
common temp_electrons,t_e_coord,t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
;The following common block contains the parameters which describe the geometry
;and position of the machine  plasma. This block is used here to
;extrapolate t_e pofile to the range starting form center of the
;plasma to the edge
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower 
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
t_e=0 & t_e_r=0 & t_e_err=0 & t_e_raw=0 & t_e_raw_r=0 & t_e_raw_err=0
  ;Taking the electron density TS data
    MDSOPEN,'ELECTRONS',SHOT,/QUIET,STATUS=ST0
    if st0 then begin
      yag_time=mdsvalue('\electrons::yg_results.details:timebase',/QUIET,STATUS=St1)
      nsig=n_elements(yag_time)

      yag_te_old=mdsvalue('\yg_results.global.profile:te_rz_t',/QUIET,STATUS=St2)
      yag_te_old_err=mdsvalue('\yg_results.global.profile:te_err_zt',/QUIET,STATUS=St3)
      yag_r_old=mdsvalue('\yg_results.global.profile:r_mid_t',/QUIET,STATUS=St4)

      yag_te_new=mdsvalue('\yag_new.results.profiles:te_rz',/QUIET,STATUS=St5)
      yag_te_new_err=mdsvalue('\yag_new.results.profiles:te_err',/QUIET,STATUS=St6) 
      yag_r_new=mdsvalue('\yag_new.results.profiles:r_mid_t',/QUIET,STATUS=St7)

      edge_te=mdsvalue('\ts_te',/QUIET,STATUS=St8)
      edge_te_err=mdsvalue('\ts_te_err',/QUIET,STATUS=St9)
      edge_r=mdsvalue('\ts_rmid',/QUIET,STATUS=St10)
    mdsclose  ;close electrons tree
    ;stop,st1,st2,st3,st4,st5,n_elements(edge_ne)
    if st1 and st5 and st6 and st7 and st8 and st9 and st10 and (n_elements(edge_te) gt 1) then begin
   
      size_old=size(yag_te_old)
      size_new=size(yag_te_new)
      size_edge=size(edge_te)
      t1_ind=locate(yag_time,t1)
      t2_ind=locate(yag_time,t2)
      ;major error was fixed on Oct 17, 2007-----------------
      if st2 then begin
        if (where(yag_te_old eq 0))(0) ne -1 then yag_te_old(where(yag_te_old eq 0))=!Values.F_NAN
        if (where(yag_te_old_err eq 0))(0) ne -1 then yag_te_old_err(where(yag_te_old_err eq 0))=!Values.F_NAN
      endif
      if st1 then begin
        if (where(yag_te_new eq 0))(0) ne -1 then yag_te_new(where(yag_te_new eq 0))=!Values.F_NAN
        if (where(yag_te_new_err eq 0))(0) ne -1 then yag_te_new_err(where(yag_te_new_err eq 0))=!Values.F_NAN
      endif
      if st4 then begin
        if (where(edge_te eq 0))(0) ne -1 then edge_te(where(edge_te eq 0))=!Values.F_NAN
        if (where(edge_te_err eq 0))(0) ne -1 then edge_te_err(where(edge_te_err eq 0))=!Values.F_NAN
      endif
      ;-------------------------------------------------------
      yag_te_old_av=fltarr(size_old(2))
      yag_te_new_av=fltarr(size_new(2))
      yag_te_edge_av=fltarr(size_edge(2))
      yag_te_old_err_av=fltarr(size_old(2))
      yag_te_new_err_av=fltarr(size_new(2))
      yag_te_edge_err_av=fltarr(size_edge(2))
      yag_r_old_av=fltarr(size_old(2))
      yag_r_new_av=fltarr(size_new(2))
      yag_r_edge_av=fltarr(size_edge(2))
      if size_old(0) gt 0 then begin
        for i=0, size_old(2)-1 do begin
          yag_te_old_av(i)=mean(yag_te_old(t1_ind:t2_ind,i),/NAN)
          yag_te_old_err_av(i)=mean(yag_te_old_err(t1_ind:t2_ind,i),/NAN)
          yag_r_old_av(i)=mean(yag_r_old(t1_ind:t2_ind,i));-0.01;added for shot 1070831020
        endfor
      endif else begin
        yag_te_old_av=0
        yag_te_old_err_av=0
        yag_r_old_av=0
      endelse
      if size_new(0) gt 0 then begin        
        for i=0, size_new(2)-1 do begin
          yag_te_new_av(i)=mean(yag_te_new(t1_ind:t2_ind,i),/NAN)
          yag_te_new_err_av(i)=mean(yag_te_new_err(t1_ind:t2_ind,i),/NAN)
          yag_r_new_av(i)=mean(yag_r_new(t1_ind:t2_ind,i));-0.01;added for shot 1070831020
        endfor
      endif else begin
        yag_te_new_av=0
        yag_te_new_err_av=0
        yag_r_new_av=0
      endelse
      if size_edge(0) gt 0 then begin 
        for i=0, size_edge(2)-1 do begin
          yag_te_edge_av(i)=mean(edge_te(t1_ind:t2_ind,i),/NAN)/1000.0
          yag_te_edge_err_av(i)=mean(edge_te_err(t1_ind:t2_ind,i),/NAN)/1000.0
          yag_r_edge_av(i)=mean(edge_r(t1_ind:t2_ind,i));-0.01;added for shot 1070831020
        endfor
      endif else begin
        yag_te_edge_av=0
        yag_te_edge_err_ev=0
        yag_r_edge_av=0
      endelse
     ; print,yag_r_edge_av
      ;addon to the upper change
      if (where(finite(yag_te_old_av)))(0) ne -1 then yag_r_old_av=yag_r_old_av(where(finite(yag_te_old_av))) else yag_r_old_av=0
      if (where(finite(yag_te_old_av)))(0) ne -1 then yag_te_old_err_av=yag_te_old_err_av(where(finite(yag_te_old_av))) else yag_te_old_err_av=0
      if (where(finite(yag_te_old_av)))(0) ne -1 then yag_te_old_av=yag_te_old_av(where(finite(yag_te_old_av))) else yag_te_old_av=0
      if (where(finite(yag_te_new_av)))(0) ne -1 then yag_r_new_av=yag_r_new_av(where(finite(yag_te_new_av))) else yag_r_new_av=0
      if (where(finite(yag_te_new_av)))(0) ne -1 then yag_te_new_err_av=yag_te_new_err_av(where(finite(yag_te_new_av))) else yag_te_new_err_av=0
      if (where(finite(yag_te_new_av)))(0) ne -1 then yag_te_new_av=yag_te_new_av(where(finite(yag_te_new_av))) else yag_te_new_av=0
      if (where(finite(yag_te_edge_av)))(0) ne -1 then yag_r_edge_av=yag_r_edge_av(where(finite(yag_te_edge_av))) else yag_r_edge_av=0
      if (where(finite(yag_te_edge_av)))(0) ne -1 then yag_te_edge_err_av=yag_te_edge_err_av(where(finite(yag_te_edge_av))) else yag_te_edge_err_av=0
      if (where(finite(yag_te_edge_av)))(0) ne -1 then yag_te_edge_av=yag_te_edge_av(where(finite(yag_te_edge_av))) else yag_te_edge_av=0
     ;-----end of addon----
      t_e_raw=[yag_te_edge_av,yag_te_old_av,yag_te_new_av]
      t_e_raw_r=[yag_r_edge_av,yag_r_old_av,yag_r_new_av]
      t_e_raw_err=[yag_te_edge_err_av,yag_te_old_err_av,yag_te_new_err_av]
      
      t_e_raw_r=t_e_raw_r(where((finite(t_e_raw) ne 0) and (t_e_raw ne 0)))
      t_e_raw_err=t_e_raw_err(where((finite(t_e_raw) ne 0) and (t_e_raw ne 0)))
      t_e_raw=t_e_raw(where((finite(t_e_raw) ne 0) and (t_e_raw ne 0)))
      if mean(yag_r_edge_av) LT 0.7 then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The full Thompson Scattering Te data set is not available in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
       st_err=1
       return
      endif
    endif else begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The full Thompson Scattering Te data set is not available in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
       st_err=1
       return
    endelse
   endif else begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : This shot is not existed in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
     st_err=1
     return
   endelse
  
   t_e_raw=t_e_raw(sort(t_e_raw_r))
   t_e_raw_err=t_e_raw_err(sort(t_e_raw_r))
   t_e_raw_r=t_e_raw_r(sort(t_e_raw_r)) 
   
   ;extrapolation
   if t_e_raw_r(0) gt r_major then begin
     t_e_raw_r=[r_major,t_e_raw_r]
     t_e_raw=[t_e_raw(0),t_e_raw]
     t_e_raw_err=[t_e_raw_err(0),t_e_raw_err]
   endif
   if t_e_raw_r(n_elements(t_e_raw)-1) lt r_major+r_minor then begin
     t_e_raw_r=[t_e_raw_r,r_major+r_minor]
     t_e_raw=[t_e_raw,t_e_raw(n_elements(t_e_raw)-1)]
     t_e_raw_err=[t_e_raw_err,t_e_raw_err(n_elements(t_e_raw_err)-1)]
   endif  

   n_int=400 ; number of interpolating points 200 in enough
   t_e_r=interpol([min(t_e_raw_r),max(t_e_raw_r)],n_int)
   t_e=interpol(t_e_raw,t_e_raw_r,t_e_r)
   t_e_err=interpol(t_e_raw_err,t_e_raw_r,t_e_r,/quadratic)
t_e_coord = 0
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which calculates t_e profiles using quick_fit routine
;-------------------------------------------------------------------------------------------------------------------------
pro quickfit_te
;The following common block contains 1D t_e profiles of raw and smoothed data, and 3D
;t_e array after it constructed.
common temp_electrons,t_e_coord,t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
;The following common block contains the parameters which describe the geometry
;and position of the machine  plasma. This block is used here to
;extrapolate n_e pofile to the range starting form center of the
;plasma to the edge
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower 
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
  t_e=0 & t_e_r=0 & t_e_err=0 & t_e_raw=0 & t_e_raw_r=0 & t_e_raw_err=0
  ;use Y. Ma routine to fit TS data
   tedeg=long(2.0)
   quick_fit, shot, te_deg=tedeg,adata, /nosave
   if n_elements(adata) gt 0 then begin
     t_quickfit  = adata.t_ts
     r_quickfit  = adata.ax
     rout_quickfit  = adata.r_out
     f_quickfit  = adata.afp
     fer_quickfit  = adata.afper

     n_t_int=100
     t_int=interpol([t1(0),t2(0)],n_t_int)  

     n_r_int=400
     r_int=interpol([r_major,r_major+r_minor],n_r_int)

     t_e_int=fltarr(n_elements(t_quickfit),n_r_int)
     t_e_err_int=fltarr(n_elements(t_quickfit),n_r_int)   
     for i=0,n_elements(t_quickfit)-1 do t_e_int(i,*)=interpol(f_quickfit(i,*,1),r_quickfit+rout_quickfit(i),r_int,/spline)
     for i=0,n_elements(t_quickfit)-1 do t_e_err_int(i,*)=interpol(fer_quickfit(i,*,1),r_quickfit+rout_quickfit(i),r_int,/spline)

     t_e_int2=fltarr(n_t_int,n_r_int)
     t_e_err_int2=fltarr(n_t_int,n_r_int)
     for i=0,n_r_int-1 do t_e_int2(*,i)=interpol(t_e_int(*,i),t_quickfit,t_int,/spline)
     for i=0,n_r_int-1 do t_e_err_int2(*,i)=interpol(t_e_err_int(*,i),t_quickfit,t_int,/spline)

     t_e_raw_r=r_int
     t_e_raw=mean2d(transpose(t_e_int2))/1e3
     t_e_raw_err=mean2d(transpose(t_e_err_int2))/1e3
     t_e_r=t_e_raw_r
     t_e=t_e_raw
     t_e_err=t_e_raw_err   
  endif else begin
     n_r_int=400
     r_int=interpol([r_major,r_major+r_minor],n_r_int)
     t_e_raw_r=r_int
     t_e_raw=t_e_raw_r*0.0
     t_e_raw_err=t_e_raw_r*0.0
     t_e_r=t_e_raw_r
     t_e=t_e_raw
     t_e_err=t_e_raw_err   
  endelse
t_e_coord = 0
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which loads t_e profiles from the ECE(slow) (MDSPLUS) 
;-------------------------------------------------------------------------------------------------------------------------

pro get_ece_temp
;The following common block contains 1D t_e profiles of raw and smoothed data, and 3D
;t_e array after it constructed.
common temp_electrons,t_e_coord,t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
;The following common block contains the parameters which describe the geometry
;and position of the machine  plasma. This block is used here to
;extrapolate t_e pofile to the range starting form center of the
;plasma to the edge
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower 
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
t_e=0 & t_e_r=0 & t_e_err=0 & t_e_raw=0 & t_e_raw_r=0 & t_e_raw_err=0

 MDSOPEN,'ELECTRONS',SHOT,/QUIET,STATUS=ST0
  if st0 then begin

    ecetime=mdsvalue('dim_of(frcece.data.eces01)',status=st1,/quiet)
    ecex_check=mdsvalue('frcece.data.eces01',status=st2,/quiet)
    rmidtime=mdsvalue('dim_of(frcece.data.rmid_01)',status=st3,/quiet)
   
    if st1 && st2 && st3 then begin
      rmid=fltarr(32,n_elements(rmidtime))
      for i=0,31 do begin
        if i le 8 then xxname='rmid_0' else xxname='rmid_'
	rmid[i,*]=mdsvalue('frcece.data.'+xxname+strtrim(i+1,2))
      endfor
      n1=n_elements(ecetime)
      n2=n_elements(ecex_check)
      nt=min([n1,n2])
      if n1 gt n2 then ecetime=ecetime[0:nt-1]
      ece=fltarr(32,nt)
      ;read all channels
      for i=0,31 do begin
	if i le 8 then xxname='eces0' else xxname='eces'
	ecex=mdsvalue('frcece.data.'+xxname+strtrim(i+1,2),status=st3,/quiet)
        if not st3 then ece[i,*]=0 else ece[i,*]=ecex[0:nt-1]
      endfor
      t1_ind=locate(ecetime,t1)
      t2_ind=locate(ecetime,t2)
      t1_r_ind=locate(rmidtime,t1)
      t2_r_ind=locate(rmidtime,t2)
      t_e_raw_r=mean2d(rmid(*,t1_r_ind:t2_r_ind))
      t_e_raw=mean2d(ece(*,t1_ind:t2_ind))
      ;sorting
      t_e_raw=t_e_raw(sort(t_e_raw_r))
      t_e_raw_r=t_e_raw_r(sort(t_e_raw_r))
      ;error is 0
      t_e_raw_err=t_e_raw*0.0

      n_int=400 ; number of interpolating points 200 in enough
      t_e_r=interpol([min(t_e_raw_r),max(t_e_raw_r)],n_int)
      t_e=interpol(t_e_raw,t_e_raw_r,t_e_r)
      t_e_err=interpol(t_e_raw_err,t_e_raw_r,t_e_r,/quadratic)
    endif else begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The full ECE Te data set is not available in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
       st_err=1
       return
    endelse
   endif else begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : This shot is not existed in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
     st_err=1
     return
   endelse
t_e_coord = 0
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which load plasma geometry parameters from the *.abi input file
;-------------------------------------------------------------------------------------------------------------------------
Pro load_plasma_geom_file
;The following common block contains the parameters which describe the geometry
;and position of the machine  plasma.
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower 
;The following common block contains the name of the input file from which the input
;data is extracted 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,$
ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
val='template'
close,1
st=0
file=file_search(plasma_geom_file)
if file(0) eq "" then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : The '+plasma_geom_file+' does not exist']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
  return
endif
openr,1,plasma_geom_file

while ~EOF(1) do begin

readf,1,val

if val eq 'r_major:' then begin 
  readf,1,val
  r_major=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_major:' then begin 
  readf,1,val
  z_major=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'r_minor:' then begin 
  readf,1,val
  r_minor=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'elong:' then begin 
  readf,1,val
  elong=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'triang_upper:' then begin 
  readf,1,val
  triang_upper=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'triang_lower:' then begin 
  readf,1,val
  triang_lower=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif

endwhile
if st ne 6 then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Some Electron Temperature input data is missing in the file']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
endif

close,1

end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which loads plasma geometry parameters from the MDSPLUS
;EFIT tree
;-------------------------------------------------------------------------------------------------------------------------
Pro load_plasma_geom
;The following common block contains the parameters which describe the geometry
;and position of the machine  plasma.
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower 
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
 
 ;-----------get EFIT grid
  mdsopen,'analysis',shot,/QUIET,STATUS=ST0
  if st0 then begin  
    mdsset_def,'\efit_aeqdsk'
    tout=MdsValue('dim_of(\efit_aeqdsk:cpasma)',status=st1)
    ;rmagx=mdsvalue('rmagx',status=st2)
    ;zmagx=mdsvalue('zmagx',status=st3)
    zout= mdsvalue('zout',status=st3)
    aout= mdsvalue('aout',status=st4)
    rout= mdsvalue('rout',status=st4)    
    eout=mdsvalue('eout',status=st5)
    doutu=mdsvalue('doutu',status=st6)
    doutl=mdsvalue('doutl',status=st7)
    mdsclose
    if st1 and st3 and st4 and st5 and st6 and st7 then begin
      ;---------------------------
      t1_ind=locate(tout,t1)
      t2_ind=locate(tout,t2) 
      ;amagx=aout+rout-rmagx
      r_major=mean(rout(t1_ind:t2_ind))/100.0 ;m
      z_major=mean(zout(t1_ind:t2_ind))/100.0 ;m 
      r_minor=mean(aout(t1_ind:t2_ind))/100.0 ;m
      elong=mean(eout(t1_ind:t2_ind))
      triang_upper=mean(doutu(t1_ind:t2_ind))
      triang_lower=mean(doutl(t1_ind:t2_ind))

      r_major=round(r_major*1000.0)/1000.0
      z_major=round(z_major*1000.0)/1000.0
      r_minor=round(r_minor*1000.0)/1000.0
      elong=round(elong*1000.0)/1000.0
      triang_upper=round(triang_upper*1000.0)/1000.0
      triang_lower=round(triang_lower*1000.0)/1000.0
    endif else begin
      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : The full Plasma Geometry data is not available in EFIT tree (MDSPLUS)']], Set_text_top_line=n_elements(status_tx)-4
      st_err=1
      return
    endelse
  endif else begin
    Widget_control, status_wid, Get_Value=status_tx
    Widget_Control, status_wid,$
    Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : This shot is not existed in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
    st_err=1
    return
  endelse
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which loads plasma geometry parameters from the EFIT file
;-------------------------------------------------------------------------------------------------------------------------
Pro load_plasma_geom_efit_file
;The following common block contains the parameters which describe the geometry
;and position of the machine  plasma.
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower

;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration
;calculation. ;The following common block contains the name of the input file from which the input
;data is extracted 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,$
ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
afiles = strsplit(plasma_geom_file,'*',/extract)
afiles = afiles(0)+'a'+shot+'.*'
afiles_all=file_search(afiles)
if n_elements(afiles_all) le 1 then begin
    Widget_control, status_wid, Get_Value=status_tx
    Widget_Control, status_wid,$
    Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : There are no EFIT files available for selected time interval']], Set_text_top_line=n_elements(status_tx)-4
    st_err=1
    return
endif
afiles = ""
;only consider times within time interval
for i=0, n_elements(afiles_all)-1 do begin
   tfile = float((strsplit(afiles_all(i),'.',/extract))(1))/1000.0
   if  tfile ge t1 and tfile le t2 then afiles = [afiles,afiles_all(i)]
endfor
afiles=afiles[1:n_elements(afiles)-1]
; Establish formats for formatted reads
form1040 = '(1x,4e16.9)'
rout = fltarr(n_elements(afiles))
zout = fltarr(n_elements(afiles))
aout = fltarr(n_elements(afiles))
eout = fltarr(n_elements(afiles))
doutu = fltarr(n_elements(afiles))
doutl = fltarr(n_elements(afiles))
temp="line"
for i=0, n_elements(afiles)-1 do begin
  ;reading afile
   close,1
   openr,1,afiles(i)
   readf,1,temp
   readf,1,temp
   readf,1,temp
   readf,1,temp
   readf,1,temp
   readf,1,form=form1040,a,b,c,d
   rout(i) = float(b)
   zout(i) = float(c)
   aout(i) = float(d)
   readf,1,form=form1040,a,b,c,d
   eout(i) = float(a)
   doutu(i) = float(b)
   doutl(i) = float(c)
   close,1
endfor
r_major= mean(rout)/100.0
z_major=mean(zout)/100.0
r_minor=mean(aout)/100.0
elong=mean(eout)
triang_upper=mean(doutu)
triang_lower=mean(doutl)
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which loads plasma geometry parameters from the VMEC wout file
;-------------------------------------------------------------------------------------------------------------------------
Pro load_plasma_geom_vmec_file
;The following common block contains the parameters which describe the geometry
;and position of the machine  plasma.
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower

;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration
;calculation. ;The following common block contains the name of the input file from which the input
;data is extracted 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,$
ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 
wout_files=file_search(plasma_geom_file)
if n_elements(wout_files) ne 1 then begin
    Widget_control, status_wid, Get_Value=status_tx
    Widget_Control, status_wid,$
    Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : There are either no or more than one VMEC files selected']], Set_text_top_line=n_elements(status_tx)-4
    st_err=1
    return
endif
wout_file=wout_files(0)
ncdfid = ncdf_open(wout_file)

; get rmajor, a_minor
ncdf_varget,ncdfid, ncdf_varid(ncdfid,'Rmajor_p'),r_major
ncdf_varget,ncdfid, ncdf_varid(ncdfid,'zaxis_cs'),z_axis_cs
ncdf_varget,ncdfid, ncdf_varid(ncdfid,'zmax_surf'),zmax_surf
z_major = z_axis_cs(0); 0-order of Fourier
ncdf_varget,ncdfid, ncdf_varid(ncdfid,'rmax_surf'),rmax_surf
ncdf_varget,ncdfid, ncdf_varid(ncdfid,'rmin_surf'),rmin_surf
r_minor = max([r_major-rmin_surf,rmax_surf-r_major,zmax_surf-z_major])
elong = 1.0
triang_upper = 0.0
triang_lower = 0.0 
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which constructs 3D plasma rho surfaces either from input data or
;from EFIT parameters and 
;"plasma geometry" parameters.
;-------------------------------------------------------------------------------------------------------------------------

Pro make_flux_surf
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation. flux_surf_arr_type parameter defines which way to
;construct 3D rho array.
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration
;calculation. ;The following common block contains the name of the input file from which the input
;data is extracted 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,$
ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for
;calculation. These parameters are needed here to map the plasma
;surfaces defined in machine coordinates to the beam coordinates
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block contains the table of the parameters which
;defile the 3D spatial grid which used for calculation
common grid_arr, code_grid_arr
;The following common block contains the parameters which describe the geometry
;and position of the machine plasma. These parameters are used here to
;construct rho array based on the equillibrium formula.
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower
;The following common block contains X,Y,Z coordinate arrays for the beam
;calculation grid and output 3D arrays of the beam density and excitation fracitons
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following commong block contains the rho arrays which used for
;mapping of 1D Ne,Te,Z_eff arrays to the machine 3D coordinated and
;eventually to the beam coordinates.
common flux_surfaces, rho_arr_beam_coord,rho_grid,rgrid_arr,zgrid_arr,rgrid_midplane,rho_grid_midplane
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;----------------------------------------------------- 

  n_z=n_elements(z_beam)
  n_x=n_elements(x_beam)
  n_y=n_elements(y_beam)
  
  rho_arr_beam_coord=fltarr(n_z,n_x,n_y)
  rho_arr_beam_coord(*,*,*)=1.1 ;value outside of the real rho range - serves as NAN value
  
  
  grid_cent_x=r_grid*cos(phi_grid)
  grid_cent_y=-r_grid*sin(phi_grid)
  wall_cent_x=r_wall*cos(phi_wall)
  wall_cent_y=-r_wall*sin(phi_wall)
  dist_all_XY=sqrt((wall_cent_x-grid_cent_x)^2.0+(wall_cent_y-grid_cent_y)^2.0)
  sin_pivot=-(wall_cent_y-grid_cent_y)/dist_all_XY;angle in machine XY plane (horizontal)
  cos_pivot=-(wall_cent_x-grid_cent_x)/dist_all_XY
  
  dist_all_XYZ=sqrt((wall_cent_x-grid_cent_x)^2.0+(wall_cent_y-grid_cent_y)^2.0+(z_wall-z_grid)^2.0)
  sin_alpha=(z_wall-z_grid)/dist_all_XYZ ; angle in machine XZ plane (vertical)
  cos_alpha=sqrt(1.0-sin_alpha^2.0)
   
; do this if EFIT(MDSPLUS) setting is choosen
 if strtrim(flux_surf_names(flux_surf_arr_type)) eq 'EFIT (MDSPLUS)' then begin
    sel=0 
    ;-----------get EFIT grid
    mdsopen,'analysis',shot
      mdsset_def,'\efit_geqdsk'
      psirz= mdsvalue('psirz')
      zgrid= mdsvalue('zgrid')
      rgrid= mdsvalue('rgrid')
      sibry= mdsvalue('ssibry')
      simag= mdsvalue('ssimag')
      t_efit = mdsvalue('dim_of(ssibry)') 
    mdsclose
 
    t1_ind=(locate(t_efit,t1))(0)
    t2_ind=(locate(t_efit,t2))(0)

    psirz = total(psirz(*,*,t1_ind:t2_ind),3)/(t2_ind-t1_ind+1)
    simag = mean(simag(t1_ind:t2_ind))
    sibry = mean(sibry(t1_ind:t2_ind))
    n_z_int=201
    n_r_int=1000
    rgrid_arr = interpol([rgrid(0),rgrid(n_elements(rgrid)-1)],n_r_int)
    zgrid_arr = interpol([zgrid(0),zgrid(n_elements(zgrid)-1)],n_z_int)
    rgrid_arr_2 = interpol([0,n_elements(rgrid)-1],n_r_int)
    zgrid_arr_2 = interpol([0,n_elements(zgrid)-1],n_z_int)
    rgrid_arr_1 = make_array(n_r_int,/index)
    zgrid_arr_1 = make_array(n_z_int,/index)  
       

   psi_grid = interpolate(psirz,rgrid_arr_2,zgrid_arr_2,cubic = -0.5, /grid)
   rho_grid = sqrt((psi_grid-simag)/(sibry-simag))
   ind_bound=where(rho_grid gt 1.0)
   ;patch to remove the no-plasma filedline islands
   rho_grid(ind_bound)=1.1
   z_bound = where(zgrid_arr gt z_major + r_minor*elong*1.1 or zgrid_arr lt z_major - r_minor*elong*1.1)
   rho_grid (*,z_bound) = 1.1     
  endif
 ; do this if EFIT(EQDSK files) setting is choosen
 if strtrim(flux_surf_names(flux_surf_arr_type)) eq 'EFIT (EQDSK files)' then begin
    gfiles = strsplit(plasma_geom_file,'*',/extract)
    gfiles = gfiles(0)+'g'+shot+'.*'
    gfiles_all=file_search(gfiles)
    ; Establish formats for formatted reads
        BOM = ['EF'x,'BB'x,'BF'x]      ; UTF-8 "BOM" marker code
	form2000 = '(6a8,3i4)'
        form2000U = '(3x,6a8,3i4)'
	form2020 = '(5e16.9)'
    if n_elements(gfiles_all) le 1 then begin
        Widget_control, status_wid, Get_Value=status_tx
        Widget_Control, status_wid,$
        Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
    ' : There are no EFIT files available for selected time interval']], Set_text_top_line=n_elements(status_tx)-4
        st_err=1
        return
    endif
    sel=1
    gfiles = ""
    ;only consider times within time interval
    for i=0, n_elements(gfiles_all)-1 do begin
       tfile = float((strsplit(gfiles_all(i),'.',/extract))(1))/1000.0
       if  tfile ge t1 and tfile le t2 then gfiles = [gfiles,gfiles_all(i)]
    endfor
    gfiles=gfiles[1:n_elements(gfiles)-1]

    
    doutl = fltarr(n_elements(gfiles))
    temp="line"
    for i=0, n_elements(gfiles)-1 do begin
      ;reading afile
      close,1
      openr,1,gfiles(i)
      ; Test first three bytes for UTF-8 BOM code. This encoding is used in Eqdsk
      ; files from EAST, and possibly elsewhere
      casee= strarr(6)
      first_line = ''
      readf,1,form='(a)',first_line
      test_UTF = array_equal((byte(first_line))[0:2],BOM) 
      reads,first_line,form=(test_UTF ? form2000U : form2000),casee,idum,mw,mh
      aa = fltarr(mw)
      aaa = fltarr(mw,mh)
      if i eq 0 then begin
         psirz = fltarr(mw,mh,n_elements(gfiles))
         zgrid = fltarr(mh,n_elements(gfiles))
         rgrid = fltarr(mw,n_elements(gfiles))
         simag = fltarr(n_elements(gfiles))
         sibry = fltarr(n_elements(gfiles)) 
      endif
      readf,1,form=form2020,a,b,c,d,e
      zgrid(*,i)= interpol([float(e)-float(b)/2.0,float(e)+float(b)/2.0],mh)
      rgrid(*,i)= interpol([float(d),float(d)+float(a)],mw)
      readf,1,form=form2020,a,b,c,d,e
      simag(i) = c
      sibry(i) = d
      readf,1,temp
      readf,1,temp
      readf,1,form=form2020,aa
      readf,1,form=form2020,aa
      readf,1,form=form2020,aa
      readf,1,form=form2020,aa 
      readf,1,form=form2020,aaa
      psirz(*,*,i)=aaa
      close,1   
    endfor
   ;interpolation
   psirz = total(psirz,3)/n_elements(gfiles)
   rgrid = mean2d(rgrid)
   zgrid = mean2d(zgrid)
   simag = mean(simag)
   sibry = mean(sibry)

   n_z_int=201
   n_r_int=1000
   rgrid_arr = interpol([rgrid(0),rgrid(n_elements(rgrid)-1)],n_r_int)
   zgrid_arr = interpol([zgrid(0),zgrid(n_elements(zgrid)-1)],n_z_int)
   rgrid_arr_2 = interpol([0,n_elements(rgrid)-1],n_r_int)
   zgrid_arr_2 = interpol([0,n_elements(zgrid)-1],n_z_int)
   rgrid_arr_1 = make_array(n_r_int,/index)
   zgrid_arr_1 = make_array(n_z_int,/index)  
       

   psi_grid = interpolate(psirz,rgrid_arr_2,zgrid_arr_2,cubic = -0.5, /grid)
   rho_grid = sqrt((psi_grid-simag)/(sibry-simag))
   ind_bound=where(rho_grid gt 1.0)
   ;patch to remove the no-plasma filedline islands
   rho_grid(ind_bound)=1.1
   z_bound = where(zgrid_arr gt z_major + r_minor*elong*1.1 or zgrid_arr lt z_major - r_minor*elong*1.1)
   rho_grid (*,z_bound) = 1.1 
 
  endif
  ; do this if VMEC (wout file)  setting is choosen
  if strtrim(flux_surf_names(flux_surf_arr_type)) eq 'VMEC (wout file)' then begin
  wout_files=file_search(plasma_geom_file)
  if n_elements(wout_files) ne 1 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
 ' : There are either no or more than one VMEC files selected']], Set_text_top_line=n_elements(status_tx)-4
     st_err=1
     return
  endif
  wout_file=wout_files(0)
  ncdfid = ncdf_open(wout_file)

  ;find range of neede phi values to cover beam grid
  z_corners = [z_beam(0),z_beam(0),z_beam(0),z_beam(0),z_beam(n_z-1),z_beam(n_z-1),z_beam(n_z-1),z_beam(n_z-1)]
  x_corners = [x_beam(0),x_beam(0),x_beam(n_x-1),x_beam(n_x-1),x_beam(0),x_beam(0),x_beam(n_x-1),x_beam(n_x-1)]
  y_corners = [y_beam(0),x_beam(n_y-1),x_beam(0),x_beam(n_y-1),x_beam(0),x_beam(n_y-1),x_beam(0),x_beam(n_y-1)]
  phi_corners = fltarr(8)
  
  z_beam1=z_corners*cos_alpha-y_corners*sin_alpha
  y_beam1=z_corners*sin_alpha+y_corners*cos_alpha+z_grid
  x_beam1=x_corners                    
 
  x_tor2=-z_beam1*cos_pivot+x_beam1*sin_pivot+r_grid*cos(phi_grid)
  y_tor2=-z_beam1*sin_pivot-x_beam1*cos_pivot-r_grid*sin(phi_grid)
   
  
  for i = 0,7 do phi_corners(i) = atan(y_tor2(i),x_tor2(i))
  
  phi_max = max(phi_corners)+beam_port_phi
  phi_min = min(phi_corners)+beam_port_phi

  min_phi_step = 0.01
  
  n_phi = fix((phi_max-phi_min)/min_phi_step)+1
  
  ;n_phi > 10
  n_phi=n_phi>10
  

  ;get other parameters
  ncdf_varget,ncdfid, ncdf_varid(ncdfid,'ns'),n_s_all ; number surfaces
  ncdf_varget,ncdfid, ncdf_varid(ncdfid,'mnmax'),n_f ; number fourier components
  ncdf_varget,ncdfid, ncdf_varid(ncdfid,'xn'),xn
  ncdf_varget,ncdfid, ncdf_varid(ncdfid,'xm'),xm
  ncdf_varget,ncdfid, ncdf_varid(ncdfid,'rmnc'),rmnc
  ncdf_varget,ncdfid, ncdf_varid(ncdfid,'zmns'),zmns  


  n_s = 20 ; how many surfaces to use
  n_surf = fix(interpol([1,sqrt(n_s_all-1)],n_s)^2.0)

  n_surf = n_surf(uniq(n_surf))
  n_s = n_elements(n_surf)

  n_theta = 75>fix(2e4/n_phi/n_s) ;data points in pol dir
  
  r_arr = fltarr(n_f,n_theta,n_phi)
  z_arr = fltarr(n_f,n_theta,n_phi)
 
  x_out = fltarr(n_s,n_theta,n_phi)
  y_out = fltarr(n_s,n_theta,n_phi)
  r_out = fltarr(n_s,n_theta,n_phi)
  z_out = fltarr(n_s,n_theta,n_phi)
  f_out = fltarr(n_s,n_theta,n_phi)  
    
  theta_arr = fltarr(n_f,n_theta,n_phi)
  phi_arr = fltarr(n_f,n_theta,n_phi)
  xn_arr = fltarr(n_f,n_theta,n_phi)
  xm_arr = fltarr(n_f,n_theta,n_phi)      

  
  for i=0,n_f-1 do begin
     theta_arr(i,*,*) = make_array(n_phi,value=1) ## (interpol([0.0,2.0*!Pi],n_theta+1))[1:*]
     phi_arr(i,*,*) = (interpol([phi_min,phi_max],n_phi)) ## make_array(n_theta,value=1)    
     xn_arr(i,*,*) = xn(i)
     xm_arr(i,*,*) = xm(i)
  endfor 
 
  cos_arr = cos(xm_arr*theta_arr - xn_arr*phi_arr)
  sin_arr = sin(xm_arr*theta_arr - xn_arr*phi_arr)   
  
  ;for rho=0 surface
  cos_arr0 = cos(-xn_arr*phi_arr)
  sin_arr0 = sin(-xn_arr*phi_arr)

  cos_phi = cos(reform(phi_arr(0,*,*))-beam_port_phi)
  sin_phi = sin(reform(phi_arr(0,*,*))-beam_port_phi)

  ;calculate flux lines for all flux surfaces except rho=0
  for j=0,n_s-1 do begin
     for k=0, n_f-1 do begin
        r_arr(k,*,*) = rmnc(k,n_surf(j))
        z_arr(k,*,*) = zmns(k,n_surf(j))
     endfor
     fact = total(r_arr*cos_arr,1)
     z_out(j,*,*) = total(z_arr*sin_arr,1)
     f_out(j,*,*) = sqrt(float(n_surf(j))/(n_s_all-1))
     ;r_out(j,*,*) = fact
     x_out(j,*,*) = fact*cos_phi
     y_out(j,*,*) = fact*sin_phi     
  endfor

  x_out = reform(x_out, long(n_s)*n_theta*n_phi,/overwrite)
  y_out = reform(y_out, long(n_s)*n_theta*n_phi,/overwrite)
  z_out = reform(z_out, long(n_s)*n_theta*n_phi,/overwrite)
  f_out = reform(f_out, long(n_s)*n_theta*n_phi,/overwrite)   

  ;calculate flux lines for rho=0 surface (no theta
  for k=0, n_f-1 do begin
     r_arr(k,*,*) = rmnc(k,0)
     z_arr(k,*,*) = zmns(k,0)
  endfor
  fact = total(r_arr*cos_arr0,1)
  z_out0 = total(z_arr*sin_arr0,1)
  ;r_out0 = fact
  x_out0 = fact*cos_phi
  y_out0 = fact*sin_phi
  f_out0 = x_out0*0.0

  x_out=[reform(x_out0(0,*)),x_out]
  y_out=[reform(y_out0(0,*)),y_out]
  z_out=[reform(z_out0(0,*)),z_out]
  f_out=[reform(f_out0(0,*)),f_out]


  QHULL, x_out, y_out, z_out, tet, /DELAUNAY
  ; getting midplane values
  n_r_int=1000
  n_z_int=201
  rgrid1=r_major-r_minor*1.1
  rgrid2=r_major+r_minor*1.1
  zgrid1=-r_minor*elong*1.1+z_major
  zgrid2=r_minor*elong*1.1+z_major    
  rgrid_arr = interpol([rgrid1,rgrid2],n_r_int)
  zgrid_arr = interpol([zgrid1,zgrid2],n_z_int)
  
  rgrid_midplane = rgrid_arr
  result = QGRID3(y_out, x_out, z_out, f_out, tet, start=[0.0,rgrid1,zgrid1],dimension=[2,n_r_int,n_z_int], delta=[0.0001,2.2*r_minor/n_r_int,2.2*r_minor*elong/n_z_int],missing=1.1)
  rho_grid = reform(result(0,*,*))
  rho_grid_midplane = reform(rho_grid(*,(n_z_int-1)/2))
  rho_grid_midplane(where(rho_grid_midplane ge 1.0)) = 1.1 ; NANs

  ; moving from toroidal coordinates to beam coordinates
  y_beam1 = z_out
  z_beam1 = -(x_out-r_grid*cos(phi_grid))*cos_pivot - (y_out+r_grid*sin(phi_grid))*sin_pivot
  x_beam1 = (x_out-r_grid*cos(phi_grid))*sin_pivot - (y_out+r_grid*sin(phi_grid))*cos_pivot

  x_beam2 = x_beam1
  z_beam2 = z_beam1*cos_alpha+(y_beam1-z_grid)*sin_alpha
  y_beam2 = -z_beam1*sin_alpha+(y_beam1-z_grid)*cos_alpha

  QHULL, x_beam2, y_beam2, z_beam2, tet, /DELAUNAY

  ;z_beam in plasma
  z_mid = code_grid_arr.z(2)
  z_end = code_grid_arr.z(4)
  z_step2 = code_grid_arr.z(3)
  n_z2 = (z_end-z_mid)/z_step2+1

  rho_arr_beam_coord(locate(z_beam,z_mid):*,*,*) = QGRID3(z_beam2, x_beam2, y_beam2, f_out, tet, start=[z_mid,x_beam[0],y_beam[0]],dimension=[n_z2,n_x,n_y], $
  delta=[z_step2,(x_beam[n_x-1]-x_beam(0))/(n_x-1),(y_beam[n_y-1]-y_beam(0))/(n_y-1)],missing=1.1)

  rho_arr_beam_coord(where(rho_arr_beam_coord ge 1.0))=1.1;value outside of the real rho range - serves as NAN value

  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid, $
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Flux Surfaces Array was constructed successfully from VMEC equillibrium']], Set_text_top_line=n_elements(status_tx)-4
  return 
 endif
 ; do this if Miller or Hakkarainen setting are choosen
 if strpos(flux_surf_names(flux_surf_arr_type), 'Miller') ne -1 or strpos(flux_surf_names(flux_surf_arr_type), 'Hakkarainen') ne -1 then begin
 ;Miller Physics of Plasmas,5,5,1998 (Miller equillibrium)
 ;SP Hakkarainen, phys_fluids B 2(7) 1990
   if strpos(flux_surf_names(flux_surf_arr_type), 'Miller') ne -1 then sel=2 else sel=3  
    n_z_int=201
    n_r_int=1000
    rgrid1=r_major-r_minor*1.1
    rgrid2=r_major+r_minor*1.1
    zgrid1=-r_minor*elong*1.1+z_major
    zgrid2=r_minor*elong*1.1+z_major    
    rgrid_arr = interpol([rgrid1,rgrid2],n_r_int)
    zgrid_arr = interpol([zgrid1,zgrid2],n_z_int)
    rgrid_arr_1 = make_array(n_r_int,/index)
    zgrid_arr_1 = make_array(n_z_int,/index)       

    rho_grid=fltarr(n_r_int,n_z_int)
    rho_grid(*,*)=1.1
    n_r_minor=500 
    r_minor_arr=interpol([0.0,r_minor],n_r_minor)
    n_theta=5000
    theta_arr=interpol([-!Pi,!Pi],n_theta)    
    triang=fltarr(n_theta)
    triang(where(theta_arr gt 0))=triang_upper
    triang(where(theta_arr le 0))=triang_lower
    for i=0,n_r_minor-1 do begin   
        if sel eq 2 then r_new=r_major+r_minor_arr(i)*cos(theta_arr+sin(theta_arr)*asin(triang))
        if sel eq 2 then z_new=elong*r_minor_arr(i)*sin(theta_arr)+z_major
        if sel eq 3 then r_add=r_minor_arr(i)*(1-((elong-1.0)/2.0)*(cos(2.0*theta_arr)-1)+(triang/4.0)*(cos(3.0*theta_arr)-cos(theta_arr)))
        if sel eq 3 then r_new=r_major+r_add*cos(theta_arr)
        if sel eq 3 then z_new=r_add*sin(theta_arr)+z_major
        rho_grid(locate(rgrid_arr,r_new),locate(zgrid_arr,z_new))=r_minor_arr(i)/r_minor
    endfor 
 endif

  ;calculation rho values at the machine midplane
  rgrid_midplane=rgrid_arr
  rho_grid_midplane=rho_grid(*,locate(zgrid_arr,0.0))
    ;---------------------------
    for ix=0,n_x-1 do begin
      for iy=0,n_y-1 do begin 
        ;rotating beam coordinate to machine midplane projection 
        z_beam1=z_beam*cos_alpha-y_beam(iy)*sin_alpha
        y_beam1=z_beam*sin_alpha+y_beam(iy)*cos_alpha+z_grid
        x_beam1=x_beam(ix)                    
        ;moving beam to machine center and rotating
        x_tor2=-z_beam1*cos_pivot+x_beam1*sin_pivot+r_grid*cos(phi_grid)
        y_tor2=-z_beam1*sin_pivot-x_beam1*cos_pivot-r_grid*sin(phi_grid)
        z_tor2=y_beam1
        r_tor2=sqrt(x_tor2^2.0+y_tor2^2.0)
        rho_arr_beam_coord(*,ix,iy)=interpolate(rho_grid,interpol(rgrid_arr_1,rgrid_arr,r_tor2),interpol(zgrid_arr_1,zgrid_arr,z_tor2))
       ; if ix eq 15 and iy eq 15 then stop
      endfor
    endfor
    ;contour,reform(rho_arr_beam_coord(8,*,*)),x_beam,y_beam,nlevels=60
    ;stop
   ; rho_arr_beam_coord=rho_arr_beam_coord<1.1
    ;help,rho_arr_beam_coord
   
    if sel eq 0 or sel eq 1 then begin 
      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid, $
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Flux Surfaces Array was constructed successfully from EFIT equillibrium']], Set_text_top_line=n_elements(status_tx)-4 
    endif
    if sel eq 2 then begin 
      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid, $
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Flux Surfaces Array was constructed successfully from plasma parameters and Miller equillibrium']], Set_text_top_line=n_elements(status_tx)-4 
    endif
    if sel eq 3 then begin
      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid, $
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Flux Surfaces Array was constructed successfully from plasma parameters and Hakkaraien equllibrium']], Set_text_top_line=n_elements(status_tx)-4 
    endif 

 if strpos(flux_surf_names(flux_surf_arr_type), 'skip') ne -1 then begin
    Widget_control, status_wid, Get_Value=status_tx
    Widget_Control, status_wid, $
    Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The flux Surface Array was NOT constructed. Previously constructed array will be used']], Set_text_top_line=n_elements(status_tx)-4 
 endif
 rho_arr_beam_coord(where(rho_arr_beam_coord gt 1.0))=1.1;value outside of the real rho range - serves as NAN value
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which constructs 3D n_e array from 1D ne_arrays and
;pre-constructed 3D rho array
;-------------------------------------------------------------------------------------------------------------------------
Pro make_n_e_arr
;The following common block contains 1D n_e profiles of raw and smoothed data, and 3D
;n_e array after it constructed. 
common dens_electrons,n_e_coord,n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr,ne_stop_cross_section
;The following common block contains X,Y,Z coordinate arrays for the beam
;calculation grid and output 3D arrays of the beam density and excitation fracitons
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following commong block contains the rho arrays which used for
;mapping of 1D Ne,Te,Z_eff arrays to the machine 3D coordinated and
;eventually to the beam coordinates.
common flux_surfaces, rho_arr_beam_coord,rho_grid,rgrid_arr,zgrid_arr,rgrid_midplane,rho_grid_midplane
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation. ne_arr_type parameter defines which way to
;construct the 3D ne array.
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------  

if ne_arr_type eq 0 then begin
  if n_e_coord eq 0 then begin
    val=min(rho_grid_midplane,min_ind,/Nan)
    rho_grid_ne=rho_grid_midplane(min_ind:*)
    rgrid=rgrid_midplane(min_ind:*)
                                  ;to make arrays ascending
    rgrid=rgrid(uniq(rho_grid_ne))
    rho_grid_ne=rho_grid_ne(uniq(rho_grid_ne)) 
                                  ; correction for lack of the non-midplane data Dec 16 2011
    rho_arr_beam_coord=rho_arr_beam_coord>min(rho_grid_ne)
                                  ;--------------------------
    ind_1=interpol(rgrid,rho_grid_ne,rho_arr_beam_coord,/spline)
    ind_1=reform(ind_1,(size(rho_arr_beam_coord))(1),(size(rho_arr_beam_coord))(2),(size(rho_arr_beam_coord))(3),/overwrite)
    num=100
  endif else ind_1 = rho_arr_beam_coord
 
  n_e_r1=interpol([n_e_r(0),n_e_r(n_elements(n_e)-1)],2000)
  n_e1=interpol(n_e,n_e_r,n_e_r1)
  n_e_err1=interpol(n_e_err,n_e_r,n_e_r1)
  
  ind_2=locate(n_e_r1,ind_1)  

  n_e_arr=n_e1(ind_2)
  n_e_arr(where(rho_arr_beam_coord eq max(rho_arr_beam_coord)))=0
  n_e_arr_err=n_e_err1(ind_2)
  n_e_arr_err(where(rho_arr_beam_coord eq max(rho_arr_beam_coord)))=0
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Electron density array was constructed successfully']], Set_text_top_line=n_elements(status_tx)-4
endif else begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Electron density array was NOT constructed. Previously constructed array will be used']], Set_text_top_line=n_elements(status_tx)-4
endelse
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which constructs 3D t_e array from 1D te_arrays and
;pre-constructed 3D rho array
;-------------------------------------------------------------------------------------------------------------------------
Pro make_t_e_arr
;The following common block contains 1D t_e profiles of raw and smoothed data, and 3D
;t_e array after it constructed. 
common temp_electrons,t_e_coord,t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
;The following commong block contains the rho arrays which used for
;mapping of 1D Ne,Te,Z_eff arrays to the machine 3D coordinated and
;eventually to the beam coordinates.
common flux_surfaces, rho_arr_beam_coord,rho_grid,rgrid_arr,zgrid_arr,rgrid_midplane,rho_grid_midplane
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation. te_arr_type parameter defines which way to
;construct the 3D te array.
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------

if te_arr_type eq 0 then begin
  if t_e_coord eq 0 then begin
    val=min(rho_grid_midplane,min_ind,/Nan)
    rho_grid_te=rho_grid_midplane(min_ind:*)
    rgrid=rgrid_midplane(min_ind:*)
    ;to make arrays ascending
    rgrid=rgrid(uniq(rho_grid_te))
    rho_grid_te=rho_grid_te(uniq(rho_grid_te))
    ; correction for lack of the non-midplane data Dec 16 2011
    rho_arr_beam_coord=rho_arr_beam_coord>min(rho_grid_te)
    ;--------------------------  

    ind_1=interpol(rgrid,rho_grid_te,rho_arr_beam_coord,/spline)
    ind_1=reform(ind_1,(size(rho_arr_beam_coord))(1),(size(rho_arr_beam_coord))(2),(size(rho_arr_beam_coord))(3),/overwrite)
    num=100
  endif else ind_1 = rho_arr_beam_coord

  t_e_r1=interpol([t_e_r(0),t_e_r(n_elements(t_e)-1)],2000)
  t_e1=interpol(t_e,t_e_r,t_e_r1)
  t_e_err1=interpol(t_e_err,t_e_r,t_e_r1)

  ind_2=locate(t_e_r1,ind_1)

 
  t_e_arr=t_e1(ind_2)
  t_e_arr(where(rho_arr_beam_coord eq max(rho_arr_beam_coord)))=0.000027
  t_e_arr_err=t_e_err1(ind_2)
  t_e_arr_err(where(rho_arr_beam_coord eq max(rho_arr_beam_coord)))=0.0
  Widget_control, status_wid, Get_Value=status_tx  
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Electron temperature array was constructed successfully']], Set_text_top_line=n_elements(status_tx)-4
endif else begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Electron temperature array was NOT constructed. Previously constructed array will be used']], Set_text_top_line=n_elements(status_tx)-4
endelse
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which constructs 3D z_eff array from 1D z_eff_arrays and
;pre-constructed 3D rho array
;-------------------------------------------------------------------------------------------------------------------------
Pro make_z_eff_arr
;The following common block contains 1D z_eff profiles of raw and smoothed data, and 3D
;z_eff array after it constructed.
common effective_charge, z_eff_coord, z_eff_raw,z_eff_raw_err,z_eff_raw_r,z_eff,z_eff_err,z_eff_r,z_eff_arr,z_eff_err_arr
;The following commong block contains the rho arrays which used for
;mapping of 1D Ne,Te,Z_eff arrays to the machine 3D coordinated and
;eventually to the beam coordinates.
common flux_surfaces, rho_arr_beam_coord,rho_grid,rgrid_arr,zgrid_arr,rgrid_midplane,rho_grid_midplane
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation. z_eff_arr_type parameter defines which way to
;construct the 3D z_eff array.
common plasma_param, main_ion,n_impur,impur_table
;The following common block contains the table of the parameters which
;defile the 3D spatial grid which used for calculation
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------

if z_eff_arr_type eq 0 then begin
  if z_eff_coord eq 0 then begin
    val=min(rho_grid_midplane,min_ind,/Nan)
    rho_grid_z_eff=rho_grid_midplane(min_ind:*)
    rgrid=rgrid_midplane(min_ind:*)

    ;to make arrays ascending
    rgrid=rgrid(uniq(rho_grid_z_eff))
    rho_grid_z_eff=rho_grid_z_eff(uniq(rho_grid_z_eff))
    ; correction for lack of the non-midplane data Dec 16 2011
    rho_arr_beam_coord=rho_arr_beam_coord>min(rho_grid_z_eff)
    ;--------------------------

    ind_1=interpol(rgrid,rho_grid_z_eff,rho_arr_beam_coord,/spline)
    ind_1=reform(ind_1,(size(rho_arr_beam_coord))(1),(size(rho_arr_beam_coord))(2),(size(rho_arr_beam_coord))(3),/overwrite)
    num=100
  endif else ind_1 = rho_arr_beam_coord

  z_eff_r1=interpol([z_eff_r(0),z_eff_r(n_elements(z_eff)-1)],2000)
  z_eff1=interpol(z_eff,z_eff_r,z_eff_r1)
  z_eff_err1=interpol(z_eff_err,z_eff_r,z_eff_r1)

  ind_2=locate(z_eff_r1,ind_1)
 
  z_eff_arr=z_eff1(ind_2)
  z_eff_arr(where(rho_arr_beam_coord eq max(rho_arr_beam_coord)))=1.0
  z_eff_arr_err=z_eff_err1(ind_2)
  z_eff_arr_err(where(rho_arr_beam_coord eq max(rho_arr_beam_coord)))=0.0
  Widget_control, status_wid, Get_Value=status_tx  
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Z_eff array was constructed successfully']], Set_text_top_line=n_elements(status_tx)-4
endif else begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Z_eff array was NOT constructed. Previously constructed array will be used']], Set_text_top_line=n_elements(status_tx)-4
endelse
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which constructs 3D plasma stopping cross section array
;from 1D ne_arr,t_e_arr and z_eff_arr
;-------------------------------------------------------------------------------------------------------------------------
Pro make_stop_cs_arr
;The following block contains structures of ADAS data
common adas_data, adas_stop,adas_exc2,adas_exc3
;The following common block contains 1D n_e profiles of raw and smoothed data, and 3D
;n_e array after it constructed. It also contains the constructed
;3D ne_stop_cross_section array.
common dens_electrons,n_e_coord,n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr,ne_stop_cross_section
;The following common block contains 1D t_e profiles of raw and smoothed data, and 3D
;t_e array after it constructed. 
common temp_electrons,t_e_coord,t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
;The following common block contains X,Y,Z coordinate arrays for the beam
;calculation grid and output 3D arrays of the beam density and excitation fracitons
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following common block contains 1D z_eff profiles of raw and smoothed data, and 3D
;z_eff array after it constructed.
common effective_charge, z_eff_coord, z_eff_raw,z_eff_raw_err,z_eff_raw_r,z_eff,z_eff_err,z_eff_r,z_eff_arr,z_eff_err_arr
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation. stop_plasma_type parameter defines which way to
;construct the 3D ne_stop_cross_section array.
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------
if stop_plasma_type eq 0 or stop_plasma_type eq 1 or stop_plasma_type eq 2 then begin
  read_adas,0,adas_stop
  n_energy=n_elements(e_beam)
  n_z=n_elements(z_beam)
  n_x=n_elements(x_beam)
  n_y=n_elements(y_beam)
  ne_stop_cross_section=fltarr(n_energy,n_z,n_x,n_y)
  
  ind_0=make_array(n_y,value=0)
  ind=make_array(n_y,/index)
  for i_e=0,n_energy-1 do begin
    for i_z=0, n_z-1 do begin
      n_cut=reform(n_e_arr(i_z,*,*))
      if total(n_cut) ne 0.0 then begin
        n_e_used=n_cut(where(n_cut ne 0))
        t_e_used=(t_e_arr(i_z,*,*))(where(n_cut ne 0))
        z_eff_used=(z_eff_arr(i_z,*,*))(where(n_cut ne 0))
        cs_full=fltarr(n_x,n_y)
        ;cs_full(where(n_e_arr(i_z,*,*) ne 0))= s_adas_full(e_beam(i_e),n_e_used,t_e_used,z_eff_used)
        cs_full(where(n_cut ne 0))= s_adas_full(e_beam(i_e),n_e_used,t_e_used,z_eff_used)
        ne_stop_cross_section(i_e,i_z,*,*)=cs_full
        ;if i_z eq 60 then stop
      endif
      if st_err then return
    endfor
  endfor
  Widget_control, status_wid, Get_Value=status_tx  
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plasma Stopping cross section array was constructed successfully from ADAS data']], Set_text_top_line=n_elements(status_tx)-4
endif
if stop_plasma_type eq 3 then begin
  n_energy=n_elements(e_beam)
  n_z=n_elements(z_beam)
  n_x=n_elements(x_beam)
  n_y=n_elements(y_beam)
  ne_stop_cross_section=fltarr(n_energy,n_z,n_x,n_y)
  
  ind_0=make_array(n_y,value=0)
  ind=make_array(n_y,/index)
  for i_e=0,n_energy-1 do begin
    for i_z=0, n_z-1 do begin
      n_cut=reform(n_e_arr(i_z,*,*))
      if total(n_cut) ne 0.0 then begin
        n_e_used=n_cut(where(n_cut ne 0))
        t_e_used=(t_e_arr(i_z,*,*))(where(n_cut ne 0))
        z_eff_used=(z_eff_arr(i_z,*,*))(where(n_cut ne 0))
        cs_full=fltarr(n_x,n_y)
        cs_full(where(n_e_arr(i_z,*,*) ne 0))= s_suzuki_full(e_beam(i_e),n_e_used,t_e_used,z_eff_used) 
        ne_stop_cross_section(i_e,i_z,*,*)=cs_full
      endif
      if st_err then return
    endfor
  endfor  
  Widget_control, status_wid, Get_Value=status_tx  
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plasma Stopping cross section array was constructed successfully from Suzuki data']], Set_text_top_line=n_elements(status_tx)-4
  st_err=0
endif
if stop_plasma_type eq 4 then begin
  Widget_control, status_wid, Get_Value=status_tx  
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plasma Stopping cross section array was NOT constructed. Previously constructed array will be used']], Set_text_top_line=n_elements(status_tx)-4
endif
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which constructs 3D plasma excitation fractions array
;from 1D ne_arr,t_e_arr and z_eff_arr
;-------------------------------------------------------------------------------------------------------------------------
Pro make_exc_arr
;The following block contains structures of ADAS data
common adas_data, adas_stop,adas_exc2,adas_exc3
;The following common block contains 1D n_e profiles of raw and smoothed data, and 3D
;n_e array after it constructed. It also contains the constructed
;3D ne_stop_cross_section array.
common dens_electrons,n_e_coord,n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr,ne_stop_cross_section
;The following common block contains 1D t_e profiles of raw and smoothed data, and 3D
;t_e array after it constructed.
common temp_electrons,t_e_coord,t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
;The following common block contains X,Y,Z coordinate arrays for the beam
;calculation grid and output 3D arrays of the beam density and excitation fracitons
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following common block contains 1D z_eff profiles of raw and smoothed data, and 3D
;z_eff array after it constructed.
common effective_charge, z_eff_coord, z_eff_raw,z_eff_raw_err,z_eff_raw_r,z_eff,z_eff_err,z_eff_r,z_eff_arr,z_eff_err_arr
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation. exc_plasma_type parameter defines which way to
;construct the 3D exc_n2_frac and exc_n3_frac arrays.
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------

if exc_plasma_type eq 0 or exc_plasma_type eq 1 or exc_plasma_type eq 2  then begin
  read_adas,1,adas_exc2
  read_adas,2,adas_exc3
  n_energy=n_elements(e_beam)
  n_z=n_elements(z_beam)
  n_x=n_elements(x_beam)
  n_y=n_elements(y_beam)
  exc_n2_frac=fltarr(n_energy,n_z,n_x,n_y)
  exc_n3_frac=fltarr(n_energy,n_z,n_x,n_y)
  ind_0=make_array(n_y,value=0)
  ind=make_array(n_y,/index)
  for i_e=0,n_energy-1 do begin
    for i_z=0, n_z-1 do begin
      n_cut=reform(n_e_arr(i_z,*,*))
      if total(n_cut) ne 0.0 then begin
        exc_full=exc_adas(e_beam(i_e),n_e_arr(i_z,*,*),t_e_arr(i_z,*,*),z_eff_arr(i_z,*,*))       
        if st_err then return
        n_ind=where(n_cut eq 0)
        exc_2=reform(exc_full(0,*,*))
        if n_ind(0) ne -1 then exc_2(n_ind)=0
        exc_3=reform(exc_full(1,*,*))
        if n_ind(0) ne -1 then exc_3(n_ind)=0  
        exc_n2_frac(i_e,i_z,*,*)=exc_2
        exc_n3_frac(i_e,i_z,*,*)=exc_3
      endif
    endfor
  endfor
  Widget_control, status_wid, Get_Value=status_tx  
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plasma Excitation Arrays were constructed successfully from ADAS data']], Set_text_top_line=n_elements(status_tx)-4
endif
if exc_plasma_type eq 3 then begin
  n_energy=n_elements(e_beam)
  n_z=n_elements(z_beam)
  n_x=n_elements(x_beam)
  n_y=n_elements(y_beam)
  exc_n2_frac=fltarr(n_energy,n_z,n_x,n_y)
  exc_n3_frac=fltarr(n_energy,n_z,n_x,n_y)
  ind_0=make_array(n_y,value=0)
  ind=make_array(n_y,/index)
  for i_e=0,n_energy-1 do begin
    for i_z=0, n_z-1 do begin
    n_cut=reform(n_e_arr(i_z,*,*))
      if total(n_cut) ne 0.0 then begin
        exc_full=exc_hutch(e_beam(i_e),n_e_arr(i_z,*,*),t_e_arr(i_z,*,*),z_eff_arr(i_z,*,*))       
        if st_err then return
        n_ind=where(n_cut eq 0)
        exc_2=reform(exc_full(0,*,*))
        if n_ind(0) ne -1 then exc_2(n_ind)=0
        exc_3=reform(exc_full(1,*,*))
        if n_ind(0) ne -1 then exc_3(n_ind)=0  
        exc_n2_frac(i_e,i_z,*,*)=exc_2
        exc_n3_frac(i_e,i_z,*,*)=exc_3
      endif  
    endfor
  endfor
  Widget_control, status_wid, Get_Value=status_tx  
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plasma excitation arrays were constructed successfully from Ian Hutchinson data']], Set_text_top_line=n_elements(status_tx)-4
endif
if exc_plasma_type eq 4 then begin
  Widget_control, status_wid, Get_Value=status_tx  
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plasma excitation arraya were NOT constructed. Previously constructed array will be used']], Set_text_top_line=n_elements(status_tx)-4
endif

end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which constructs 3D neutral gas density array
;from 1D n0_arr and pre-constructed 3D rho array
;-------------------------------------------------------------------------------------------------------------------------
Pro make_gas_arr
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for calculation.
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block contains X,Y,Z coordinate arrays used for the beam
;calculation grid and output 3D arrays of the beam density and excitation fracitons
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following common block contains the parameters which describe the
;positions and sizes of the beam limiters. This block also contains the
;3D array of the limiters positions after it is constructed
common beam_limiters, n_limiters, limiters_table,limiters_arr
;The following common block contains 1D t_e profiles of raw and smoothed data, and 3D
;t_e array after it constructed.
common temp_electrons,t_e_coord,t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
;The following common block contains neutral gas parameters used in
;calculation of the beam attenuation in the gas. It also contains the
;constructed 3D neutral gas array.
common neutral_gas,tank_pressure,torus_pressure,duct_pressure,duct_pressure_loc,n0_arr,n0_stop_cross_section
;The following commong block contains the rho arrays which used for
;mapping of 1D Ne,Te,Z_eff arrays to the machine 3D coordinated and
;eventually to the beam coordinates.
common flux_surfaces, rho_arr_beam_coord,rho_grid,rgrid_arr,zgrid_arr,rgrid_midplane,rho_grid_midplane
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation. gas_array_type parameter defines which way to
;construct the 3D n0_arr array.
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------

if gas_arr_type eq 0 then begin
  n_z=n_elements(z_beam)
  n_x=n_elements(x_beam)
  n_y=n_elements(y_beam)
  n0_arr=fltarr(n_z,n_x,n_y)

  tank_dens=0.133/1.38e-23/300.0*tank_pressure*1e-6 ;cm-3
  torus_dens=0.133/1.38e-23/300.0*torus_pressure*1e-6 ;cm-3
  duct_dens=0.133/1.38e-23/300.0*duct_pressure*1e-6 ;cm-3
  
  ind_0=locate(z_beam,neutr_front_dist+neutr_size)
  ind_1=locate(z_beam,tank_front_dist+tank_size)
  ind_2 =locate(z_beam,tank_front_dist+tank_size+duct_pressure_loc)
  max_dist=tank_front_dist+tank_size
  ;size_lim=(size(limiters_table))(2)
  ;if n_elements(limiters_table) lt 2 then size_lim=0
  if n_limiters eq 1 then begin
    if strpos(strtrim(limiters_table(0),2),'duct') ne -1 then max_dist=max_dist>max(float(limiters_table(1))+float(limiters_table(2)))
  endif
  if n_limiters gt 1 then begin
    for j=0,n_limiters-1 do if strpos(strtrim(limiters_table(0,j),2),'duct') ne -1 then  max_dist=max_dist>max(float(limiters_table(1,j))+float(limiters_table(2,j)))
  endif
  ind_3=locate(z_beam,max_dist)

  n0_arr(ind_3:n_z-1,*,*)=torus_dens
  n0_arr(ind_0:ind_1,*,*)=tank_dens
  if ind_3 gt ind_2 and duct_pressure gt min([torus_pressure,tank_pressure])*0.5 then begin

    for i=ind_1,ind_2 do n0_arr(i,*,*)=tank_dens+(duct_dens-tank_dens)*(i-ind_1)/(ind_2-ind_1)
    for i=ind_2,ind_3 do n0_arr(i,*,*)=duct_dens+(torus_dens-duct_dens)*(i-ind_2)/(ind_3-ind_2)
  endif
  if ind_2 ge ind_3 and duct_pressure gt min([torus_pressure,tank_pressure])*0.5 then begin

    for i=ind_1,ind_2 do n0_arr(i,*,*)=tank_dens+(duct_dens-tank_dens)*(i-ind_1)/(ind_2-ind_1)
    n0_arr(ind_2,*,*)=(duct_dens+torus_dens)/2.0
  endif
  if ind_2 ge ind_3 and duct_pressure le min([torus_pressure,tank_pressure])*0.5 then begin
    n0_arr(ind_3,*,*)=(torus_dens+tank_dens)/2.0
  endif
 
  if ind_3 gt ind_2 and duct_pressure le min([torus_pressure,tank_pressure])*0.5 then begin

    for i=ind_1,ind_3 do n0_arr(i,*,*)=tank_dens+(torus_dens-tank_dens)*(i-ind_1)/(ind_3-ind_1)    
  endif
  ; no gas where plasma with T_e>10ev
  if n_elements(t_e_arr) gt 0 then if (where(t_e_arr gt 0.01))(0) ne -1 then n0_arr(where(t_e_arr gt 0.01))=0
  Widget_control, status_wid, Get_Value=status_tx  
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Neutral Gas Density  array was constructed successfully']], Set_text_top_line=n_elements(status_tx)-4
endif else begin
  Widget_control, status_wid, Get_Value=status_tx  
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Neutral Gas Density Array was NOT constructed. Previously constructed array will be used']], Set_text_top_line=n_elements(status_tx)-4
endelse
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which constructs 3D geometrical array of the beam limiters position
;from parameters which defiles the limiter positions
;-------------------------------------------------------------------------------------------------------------------------
Pro make_lim_arr
;The following common block contains the parameters which describe the
;positions and sizes of the beam limiters. This block also contains the
;3D array of the limiters positions after it is constructed
common beam_limiters, n_limiters, limiters_table,limiters_arr
;The following common block contains the parameters which describe the geometry
;and position of the machine plasma
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lowe
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for calculation.
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block contains X,Y,Z coordinate arrays used for the beam
;calculation grid and output 3D arrays of the beam density and excitation fracitons
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation. lim_array_type parameter defines which way to
;construct the 3D limiters_arr array.
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------

if lim_arr_type eq 0 then begin
  n_z=n_elements(z_beam)
  n_x=n_elements(x_beam)
  n_y=n_elements(y_beam)
  limiters_arr=fltarr(n_z,n_x,n_y)
  for i=0,n_limiters-1 do begin
    z_pos=float(limiters_table(1,i))
    z_size=float(limiters_table(2,i))
    diam=float(limiters_table(3,i))
    x_size=float(limiters_table(4,i))
    y_size=float(limiters_table(5,i))
    r_lim=float(limiters_table(6,i))
    if finite(r_lim) then begin
      ;calulation r_major along the beam centerline x_beam=0, y_beam=0
      grid_cent_x=r_grid*cos(phi_grid)
      grid_cent_y=-r_grid*sin(phi_grid)
      wall_cent_x=r_wall*cos(phi_wall)
      wall_cent_y=-r_wall*sin(phi_wall)
      dist_all_XY=sqrt((wall_cent_x-grid_cent_x)^2.0+(wall_cent_y-grid_cent_y)^2.0)
      sin_pivot=-(wall_cent_y-grid_cent_y)/dist_all_XY;angle in machine XY plane (horizontal)
      cos_pivot=-(wall_cent_x-grid_cent_x)/dist_all_XY

      dist_all_XYZ=sqrt((wall_cent_x-grid_cent_x)^2.0+(wall_cent_y-grid_cent_y)^2.0+(z_wall-z_grid)^2.0)
      sin_alpha=(z_wall-z_grid)/dist_all_XYZ ; angle in machine XZ plane (vertical)
      cos_alpha=sqrt(1.0-sin_alpha^2.0)
      ;rotating beam coordinate to machine midplane projection
      ;find tangent rad
      z_beam1_tang=z_beam*cos_alpha-y_beam((n_y-1)/2)*sin_alpha
      y__beam1_tang=z_beam*sin_alpha+y_beam((n_y-1)/2)*cos_alpha+z_grid
      x_beam1_tang=x_beam((n_x-1)/2)                   
      ;moving beam to machine center and rotating
      x_tang=-z_beam1_tang*cos_pivot+x_beam1_tang*sin_pivot+r_grid*cos(phi_grid)
      y_tang=-z_beam1_tang*sin_pivot-x_beam1_tang*cos_pivot-r_grid*sin(phi_grid)
      r_tang=sqrt(x_tang^2.0+y_tang^2.0) 
      r_tang_mic=min(r_tang,min_r_ind)
      for j=0,n_x-1 do begin
        for k=0, n_y-1 do begin
          for l=0,n_z-1 do begin
            z_beam1=z_beam(l)*cos_alpha-y_beam(k)*sin_alpha
            y_beam1=z_beam(l)*sin_alpha+y_beam(k)*cos_alpha+z_grid
            x_beam1=x_beam(j)                   
            ;moving beam to machine center and rotating
            x_tor2=-z_beam1*cos_pivot+x_beam1*sin_pivot+r_grid*cos(phi_grid)
            y_tor2=-z_beam1*sin_pivot-x_beam1*cos_pivot-r_grid*sin(phi_grid)
            r_tor2=sqrt(x_tor2^2.0+y_tor2^2.0)
            if r_tor2 le r_lim and r_lim lt r_major then limiters_arr(l,j,k)=1e6
            if r_tor2 ge r_lim and r_lim gt r_major and l gt min_r_ind then limiters_arr(l,j,k)=1e6
          endfor
        endfor
      endfor
    endif        
    if finite(diam) then begin
      for j=0,n_x-1 do begin
        for k=0, n_y-1 do begin
          if (round(sqrt(x_beam(j)^2.0+y_beam(k)^2.0)*1000.0)/1000.0) ge diam/2.0 then limiters_arr(locate(z_beam,z_pos):locate(z_beam,z_pos+z_size),j,k)=1e6
        endfor
      endfor
    endif
    if finite(x_size) then begin
      for j=0,n_x-1 do begin
        for k=0, n_y-1 do begin
          if abs(x_beam(j)) ge x_size/2.0 or abs(y_beam(k)) ge y_size/2.0 then limiters_arr(locate(z_beam,z_pos):locate(z_beam,z_pos+z_size),j,k)=1e6
        endfor
      endfor
    endif
  endfor
  Widget_control, status_wid, Get_Value=status_tx  
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Beam Limiters Array was constructed successfully']], Set_text_top_line=n_elements(status_tx)-4
endif else begin
  Widget_control, status_wid, Get_Value=status_tx  
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Beam Limiters Array was NOT constructed. Previously constructed array will be used']], Set_text_top_line=n_elements(status_tx)-4
endelse
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which load beam grid parameters from the *.abi input file
;-------------------------------------------------------------------------------------------------------------------------
Pro load_beam_grid_file
;The following common block contains the table of the parameters which
;defile the 3D spatial grid which used for calculation
common grid_arr, code_grid_arr
;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration
;calculation. ;The following common block contains the name of the input file from which the input
;data is extracted 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,$
ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------
val='template'
close,1
st=0
file=file_search(grid_file)
if file(0) eq "" then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The '+grid_file+' does not exist']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
  return
endif
openr,1,grid_file

while ~EOF(1) do begin

readf,1,val

if val eq 'code_grid_arr.Z:' then begin 
  readf,1,val
  code_grid_arr.z=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'code_grid_arr.X:' then begin 
  readf,1,val
  code_grid_arr.x=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'code_grid_arr.Y:' then begin 
  readf,1,val
  code_grid_arr.y=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
endwhile
if st ne 3 then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Full set of Beam Grid input data is missing in the file']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
endif
close,1

end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which constructs the beam grid (z_beam, x_beam and y_beam)
;array from the code_grid_arr array 
;-------------------------------------------------------------------------------------------------------------------------
Pro make_beam_grid
;The following common block contains the table of the parameters which
;defile the 3D spatial grid which used for calculation
common grid_arr, code_grid_arr
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution)
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
;The following common block contains X,Y,Z coordinate arrays used for the beam
;calculation grid and output 3D arrays of the beam density and excitation fracitons
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------
  if code_grid_arr.x(0) ne -code_grid_arr.x(2) or code_grid_arr.y(0) ne -code_grid_arr.y(2) or code_grid_arr.x(1) le 0 or code_grid_arr.y(1) le 0 $
    or code_grid_arr.x(0) ge code_grid_arr.x(2) or code_grid_arr.y(0) ge code_grid_arr.y(2)then begin
    Widget_control, status_wid, Get_Value=status_tx
    Widget_Control, status_wid,$
    Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Wrong Code Grid/Mesh parameters. X and Y grids should be symmetrical.']], Set_text_top_line=n_elements(status_tx)-4
    st_err=1
    return
  endif
  z_beam1=interpol([code_grid_arr.z(0),code_grid_arr.z(2)],round((code_grid_arr.z(2)-code_grid_arr.z(0))/code_grid_arr.z(1)+1))
  z_beam2=interpol([code_grid_arr.z(2),code_grid_arr.z(4)],round((code_grid_arr.z(4)-code_grid_arr.z(2))/code_grid_arr.z(3)+1))
  z_beam=[z_beam1,z_beam2(1:*)]
  
  x_beam=interpol([code_grid_arr.x(0),code_grid_arr.x(2)],round((code_grid_arr.x(2)-code_grid_arr.x(0))/code_grid_arr.x(1)/2.0)*2+1)
  y_beam=interpol([code_grid_arr.y(0),code_grid_arr.y(2)],round((code_grid_arr.y(2)-code_grid_arr.y(0))/code_grid_arr.y(1)/2.0)*2+1)
 
                                ;make sure all values are round to the 5 digit (necessary for proper colculations)
  x_beam=(round(x_beam*100000.0)/100000.0)
  y_beam=(round(y_beam*100000.0)/100000.0)
  z_beam=(round(z_beam*100000.0)/100000.0)
  e_beam=e_full*e_frac
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which loads the code_grid_arr parameters based on the
;beam_geometry parameters. The z direction is split efficiently on two
;regular intervals. One with finer grid for plasma region and another
;is less fine grid for other region.
;-------------------------------------------------------------------------------------------------------------------------
Pro load_beam_grid
;The following common block contains the table of the parameters which
;defile the 3D spatial grid which used for calculation
common grid_arr, code_grid_arr
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for calculation.
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block contains the parameters which describe the geometry
;and position of the machine plasma
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  


;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
endif
;-----------------------------------------------------
      
    grid_prev_plasma=fix(sqrt(r_grid^2.0+(r_major+r_minor*1.4)^2.0-2.0*r_grid*(r_major+r_minor*1.4)*cos(phi_grid))*10.0)/10.0
    Z_end=fix(sqrt((r_wall*cos(phi_wall)-r_grid*cos(phi_grid))^2.0+(r_wall*sin(phi_wall)-r_grid*sin(phi_grid))^2.0+(z_wall-z_grid)^2.0)*10.0+1)/10.0
    code_grid_arr={z:[tank_front_dist-0.1,0.1,grid_prev_plasma,0.01,z_end],x:[-0.15,0.01,0.15],y:[-0.15,0.01,0.15]}
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which load neutral gas parameters from the *.abi input file
;-------------------------------------------------------------------------------------------------------------------------
Pro load_neutral_gas_file
;The following common block contains neutral gas parameters used in
;calculation of the beam attenuation in the gas. It also contains the
;constructed 3D neutral gas array.
common neutral_gas,tank_pressure,torus_pressure,duct_pressure,duct_pressure_loc,n0_arr,n0_stop_cross_section 
;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration
;calculation. ;The following common block contains the name of the input file from which the input
;data is extracted 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,$
ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err


;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------
val='template'
close,1
st=0
file=file_search(gas_file)
if file(0) eq "" then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The '+gas_file+' does not exist']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
  return
endif
openr,1,gas_file

;put ofor duct pressure
duct_pressure=0.0
duct_pressure_loc=0.0

while ~EOF(1) do begin

readf,1,val

if val eq 'tank_pressure:' then begin 
  readf,1,val
  tank_pressure=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'torus_pressure:' then begin 
  readf,1,val
  torus_pressure=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'duct_pressure:' then begin 
  readf,1,val
  duct_pressure=float(val)
endif
if val eq 'duct_pressure_loc:' then begin 
  readf,1,val
  duct_pressure_loc=float(val)
endif
endwhile
if st ne 2 then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Full set of Neutral Gas input data is missing in the file']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
endif

close,1

end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which loads neutral gas parameters from the MDSPLUS.
;Currently the tank_presusre is set up to be constant 0.3 mtorr.
;-------------------------------------------------------------------------------------------------------------------------
Pro load_neutral_gas
;The following common block contains neutral gas parameters used in
;calculation of the beam attenuation in the gas. It also contains the
;constructed 3D neutral gas array.
common neutral_gas,tank_pressure,torus_pressure,duct_pressure,duct_pressure_loc,n0_arr,n0_stop_cross_section
;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration
;calculation. ;The following common block contains the name of the input file from which the input
;data is extracted 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,$
ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------
 
if gas_type eq 0 then begin
   duct_pressure_loc=1.09; m
   MDSOPEN,'CMOD',SHOT,/QUIET,STATUS=ST0
   if st0 then begin
     F_side_p=mdsvalue('\edge::top.gas.ratiomatic:F_side',/quiet,status=st1)
     F_side_t=mdsvalue('Dim_of(\edge::top.gas.ratiomatic:F_side)',/quiet,status=st2)
     G_side_p=mdsvalue('\edge::top.gas.mks:G_side',/quiet,status=st11)
     G_side_t=mdsvalue('Dim_of(\edge::top.gas.mks:G_side)',/quiet,status=st21)
     beam_tank_p=mdsvalue('\dnb::top.dnb_eng.camac:T4012.t2812_03:input_3',/quiet,status=st3)
     beam_tank_t=mdsvalue('Dim_of(\dnb::top.dnb_eng.camac:T4012.t2812_03:input_3)',/quiet,status=st4)    
     beam_duct_p=mdsvalue('\edge::top.gas.mks.dnb',/quiet,status=st5)
     beam_duct_t=mdsvalue('Dim_of(\edge::top.gas.mks.dnb)',/quiet,status=st6)
     if st1 and st2 then begin
       torus_pressure=mean(F_side_p(locate(F_side_t,t1):locate(F_side_t,t2)))-mean(F_side_p(0:locate(F_side_t,-1)));mtorr
       ;torus_pressure_check=mean(F_side_p(locate(F_side_t,0.5):locate(F_side_t,1.0)))-mean(F_side_p(0:locate(F_side_t,-1)));mtorr
       torus_pressure_check=mean(F_side_p(locate(F_side_t,0.5):locate(F_side_t,1.5)))
       torus_pressure=round(torus_pressure*1000.0)/1000.0
       if torus_pressure_check gt 7 and st11 and st21 and n_elements(g_side_p) gt 10 then begin
         torus_pressure=mean(G_side_p(locate(G_side_t,t1):locate(G_side_t,t2)))-mean(G_side_p(0:locate(G_side_t,-1)));mtorr
         torus_pressure=round(torus_pressure*1000.0)/1000.0      
       endif
     endif else begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The Neutral Gas (torus pressure) data set is not available (MDSPLUS)']], Set_text_top_line=n_elements(status_tx)-4
       st_err=1
       return
     endelse
     if st3 and st4 then begin
       tank_pressure=mean(beam_tank_p(locate(beam_tank_t,t1):locate(beam_tank_t,t2)))*10.0-mean(beam_tank_p(0:locate(beam_tank_t,-1)))*10.0 ;mtorr
       tank_pressure=round(tank_pressure*1000.0)/1000.0
       if tank_pressure lt 0.0 then tank_pressure=0.3
     endif else begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The Neutral Gas (beam tank pressure) data set is not available (MDSPLUS)']], Set_text_top_line=n_elements(status_tx)-4
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The beam tank pressure is set to 0.3 mtorr']], Set_text_top_line=n_elements(status_tx)-4
      tank_pressure=0.3 ;mtorr
     endelse
     if st5 and st6 then begin
       duct_pressure=mean(beam_duct_p(locate(beam_duct_t,t1):locate(beam_duct_t,t2)))-mean(beam_duct_p(0:locate(beam_duct_t,-1))) ;mtorr
       duct_pressure=round(duct_pressure*1000.0)/1000.0     
     endif else begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The Neutral Gas (beam duct pressure) data set is not available (MDSPLUS)']], Set_text_top_line=n_elements(status_tx)-4
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The beam duct pressure will be interpolated']], Set_text_top_line=n_elements(status_tx)-4
      duct_pressure=0.0 ;mtorr
     endelse  
  endif else begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : This shot is not existed in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
     st_err=1
     return
   endelse
  st_n0=1
endif
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which constructs 3D stopping in gas cross section array
;from stripping cross sections and energies of the beam components 
;-------------------------------------------------------------------------------------------------------------------------
Pro make_stop_gas_arr
;The following common block contains neutral gas parameters used in
;calculation of the beam attenuation in the gas. It also contains the
;constructed neutral gas stoppping cross section array.
common neutral_gas,tank_pressure,torus_pressure,duct_pressure,duct_pressure_loc,n0_arr,n0_stop_cross_section
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution)
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation. stop_gas_type parameter defines which way to
;construct the n0_stop_cross_section array 
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err 

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------
if stop_gas_type eq 0 then begin
    ;beam atom
    beam_atom_table=['H','D','T']
    beam_atom_mass=[1.0,2.0,3.0]
    m_atom=(beam_atom_mass(where(beam_atom_table eq beam_atom)))(0)

    ; Stripping cross sections for H + H2  --> H+ + H2 + e

   E_b=[6.0e1,7.0e1,1.0e2,1.5e2,2.0e2,4.0e2,7.0e2,1.0e3,1.5e3,2.0e3,4.0e3,7.0e3,1.0e4,1.5e4,2.0e4,4.0e4,7.3e4,1.0e5,1.5e5,2.0e5,4.0e5,7.0e5,1.0e6,1.5e6,2.0e6,4.0e6,7.0e6,1.0e7,1.5e7,2.0e7]*1e-3
   sigma_n0=[1.17e-19,1.91e-19,5.24e-19,1.37e-18,2.39e-18,8.32e-18,2.09e-17,3.37e-17,5.08e-17,6.36e-17,8.63e-17,9.09e-17,9.21e-17,1.06e-16,$
1.36e-16,1.54e-16,1.34e-16,1.10e-16,8.61e-17,7.04e-17,4.20e-17,2.63e-17,1.91e-17,1.30e-17,9.74e-18,4.60e-18,2.64e-18,1.65e-18,1.02e-18,7.34e-19]
   
   n0_stop_cross_section=interpolate(sigma_n0,interpol(make_array(n_elements(E_b),/index),E_b,e_full*E_frac/m_atom),cubic=-0.5)
   Widget_control, status_wid, Get_Value=status_tx  
   Widget_Control, status_wid,$
   Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Gas Stopping Cross sections Array was constructed successfully']], Set_text_top_line=n_elements(status_tx)-4
endif else begin
  Widget_control, status_wid, Get_Value=status_tx  
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Gas Stopping Cross sections Array was NOT constructed. Previously constructed array will be used']], Set_text_top_line=n_elements(status_tx)-4
endelse
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which load beam parameters from the *.abi input file
;It loads the non-geometrical
;parameters of the beam (particle and energy distribution)
;-------------------------------------------------------------------------------------------------------------------------
Pro load_beam_param_file
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution)
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration
;calculation. ;The following common block contains the name of the input file from which the input
;data is extracted 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,$
ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
;E_beam is loaded here to the following common block
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err 

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------

beam_atom='H' ;default
val='template'
close,1
st=0

file=file_search(beam_param_file)
if file(0) eq "" then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The '+beam_param_file+' does not exist']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
  return
endif
openr,1,beam_param_file


while ~EOF(1) do begin

readf,1,val

if val eq 'beam_atom:' then begin 
  readf,1,val
  beam_atom=strtrim(val,2)
endif
if val eq 'e_full:' then begin 
  readf,1,val
  e_full=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'e_frac:' then begin 
  readf,1,val
  e_frac=float(strsplit(val,', ',/extract))
  e_beam=e_full*e_frac
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'i_beam:' then begin 
  readf,1,val
  i_beam=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'i_frac:' then begin 
  readf,1,val
  I_frac=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'i_dens_par:' then begin 
  readf,1,val
  i_dens_par=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'i_opt:' then begin 
  readf,1,val
  i_opt=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'div_bml_opt:' then begin 
  readf,1,val
  x_div_bml_opt=float(val)
  y_div_bml_opt=x_div_bml_opt
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'x_div_bml_opt:' then begin 
  readf,1,val
  x_div_bml_opt=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'y_div_bml_opt:' then begin 
  readf,1,val
  y_div_bml_opt=float(val)
endif
if val eq 'div_dist_par:' then begin 
  readf,1,val
  div_dist_par=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
endwhile
if st ne 8 then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Full set of Beam Param input data is missing in the file']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
endif
;------------------------------------------------------------------
close,1
neutralization;procedure which is needed for beam parameters
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which calculates density of the extracted and neutralized
;neutrals based on the known beam paremeters 
;-------------------------------------------------------------------------------------------------------------------------    
Pro neutralization
     ;The following common block contains the parameters which describe the non-geometrical
     ;parameters of the beam (particle and energy distribution)
     common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
     ;The following common block contains the parameters which describe the non-geometrical
     ;parameters of the beam (particle and energy distribution)
     common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
     ;E_beam is loaded here to the following common block
     common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
     

     ;beam atom
     beam_atom_table=['H','D','T']
     beam_atom_mass=[1.0,2.0,3.0]
     m_atom=(beam_atom_mass(where(beam_atom_table eq beam_atom)))(0)

     E_beam=e_full*e_frac 
     vel=SQRT(2.0*1.602E-19*E_beam*1000.0/1.673E-27/m_atom)*100 ; cm/sec

     source_neutr=1.0
     ; by default beam is hydrogen
     n_at=fltarr(n_elements(e_frac))
     for i=0,n_elements(n_at)-1 do begin
       if e_frac(i) eq 1.0 then n_at(i)=1.0 ; H+ ion
       if e_frac(i) eq 1/2.0 then n_at(i)=2.0 ; H2+ ion
       if round(1/e_frac(i)) eq 3 then n_at(i)=3.4 ; H3+ ion
       if round(1/e_frac(i)) eq 18 then n_at(i)=2.0 ; H20 ion
       if round(1/e_frac(i)) eq 16 then n_at(i)=4.0 ; CH4 ion
       if round(1/e_frac(i)) eq 20 then n_at(i)=4.0 ; ????
     endfor
     ;beam neutralization factor
     ;borrowed from Bob Granetz's spectroscopy code
     energy_keV = [    4.0,     6.0,     8.0,    10.0,    20.0, $
                  30.0,    40.0,    60.0,    80.0,   100.0, $
                  200.0,   300.0,   400.0,   600.0,   800.0]
     neut_frac  = [8.95e-1, 8.75e-1, 8.70e-1, 8.65e-1, 8.20e-1, $
                7.25e-1, 6.25e-1, 4.40e-1, 2.90e-1, 1.90e-1, $
                2.40e-2, 5.25e-3, 1.20e-3, 1.60e-4, 5.40e-5]
 
     comp_cur=I_beam*I_frac
     source_nS=sign(I_beam)*comp_cur/(vel*1.602E-19)

  
     neutr = exp(interpol(alog(neut_frac), energy_keV, E_beam/m_atom)) ;fit to log is better  
     if I_beam lt 0.0 then neutr(*)=1.0 ;neutralization fractions for negative ions are equal to 1.0
     neutr_nS=source_nS*neutr*n_at


     neutr_dens_frac=neutr_nS/total(neutr_nS)
   
     neutr_dens_ns_tot=total(neutr_nS) ;cm-1
end
;------------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which loads beam parameters from the MDSPLUS.
;-------------------------------------------------------------------------------------------------------------------------
Pro load_beam_param
;E_beam is loaded here to the following common block
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution)
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err 

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+$
strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------
 beam_atom='H'
 MDSOPEN,'CMOD',SHOT,/QUIET,STATUS=ST0
 if st0 then begin  
   I_frac_tot = MDSVALUE('\DNB::TOP.DNB_SPECTRA:ENERGY_FRACS',/quiet,status=st1)
   e_energy = MDSVALUE('\DNB::TOP.DNB_SPECTRA:beam_energy',/quiet,status=st2)
   e_frac_time = MDSVALUE('dim_of(\DNB::TOP.DNB_SPECTRA:ENERGY_FRACS,1)',/quiet,status=st3)
   e_frac_p = MDSVALUE('dim_of(\DNB::TOP.DNB_SPECTRA:ENERGY_FRACS,0)',/quiet,status=st4)
   I_beam_full = MDSVALUE('\DNB::TOP.DNB_ENG.Results.I_beam',/quiet,status=st5)
   I_beam_time=MDSVALUE('dim_of(\DNB::TOP.DNB_ENG.Results.I_beam)',/quiet,status=st6)
   V_beam_full = MDSVALUE('\DNB::TOP.DNB_ENG.Results.V_beam',/quiet,status=st6)/1000.0
   V_beam_time=MDSVALUE('dim_of(\DNB::TOP.DNB_ENG.Results.V_beam)',/quiet,status=st7)
   if st1 and st2 and st3 and st4 and st5 and st6 and st7 then begin
     I_beam=mean(I_beam_full(locate(I_beam_time,t1):locate(I_beam_time,t2)))
     V_beam=mean(V_beam_full(locate(V_beam_time,t1):locate(V_beam_time,t2)))
   
     ; if beam is not full during the time frame stop calc   
     if v_beam lt max(V_beam_full)*0.8 then begin
        Widget_control, status_wid, Get_Value=status_tx
        Widget_Control, status_wid,$
        Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Wrong beam timing. Please cancel run and pick time interval when beam has full current']], Set_text_top_line=n_elements(status_tx)-4
        st_err=1
        return
     endif
     n_int=100.0 ; interpolation for beam tank spectroscopic data
     ; patch on 17 Aug 2010
     if n_elements(e_energy) gt 1 then begin
       e_frac_time_ind=locate(interpol(e_frac_time,n_int),(t1+t2)/2.0)/(n_int-1)*(n_elements(e_frac_time)-1)
       e_frac=interpolate(e_frac_p,e_frac_time_ind,cubic=-0.5)
       I_frac=interpolate(I_frac_tot,e_frac_time_ind,cubic=-0.5)     
       E_full = interpolate(e_energy,e_frac_time_ind,cubic=-0.5)
     endif else begin
       e_frac_avg=e_frac_p
       I_frac=I_frac_tot
       E_full = e_energy(0)
     endelse
     
     ;e_frac_time_ind=locate(interpol(e_frac_time,n_int),(t1+t2)/2.0)/(n_int-1)*(n_elements(e_frac_time)-1)
     ;I_frac=interpolate(I_frac_tot,e_frac_time_ind,cubic=-0.5)
     ;e_full = interpolate(e_energy,e_frac_time_ind,cubic=-0.5)
     E_frac=e_frac_p(0:3)

    
     ;correction 03 June 11
     e_full=round(e_full*100.0)/100.0
     e_full=v_beam
     ;--------------------
     e_frac=round(e_frac*1000.0)/1000.0
     I_beam=round(I_beam*1000.0)/1000.0
     I_frac=round(I_frac*1000.0)/1000.0

     neutralization
     x_div_bml_opt=0.70 ;half divergence angle of a beamlet, degree
     y_div_bml_opt=0.70 ;half divergence angle of a beamlet, degree
     div_dist_par=0.0 ; changed from 5.0 -> 0.0  on 5 Apr 2012 
     I_opt=5.6;A (from perveance measurements at the calorimeter)
     ;n_bml=n_elements(x_bml)
     ;I_opt=I_opt/n_bml/!PI/(grid_ap_diam/2.0)^2.0*1e6*1e-1 ;mA/cm^2 based on the uniform distribution over all apertures
     I_dens_par=0 ;parabolic source density parameter J=I_beam/(PI*a^2*(1-b*a^2/2.0)*(1+b*r^2.0/a^2.0) ,where a=max([x_bml,y_bml])  
    ; st_beam_par=1
   endif else begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : The Beam Parameters data set is not available in MDSPLUS (probably Spectroscopy code failed to run)']], Set_text_top_line=n_elements(status_tx)-4
     st_err=1
     return
   endelse
 endif else begin
   Widget_control, status_wid, Get_Value=status_tx
   Widget_Control, status_wid,$
   Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : This shot is not existed in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
   st_err=1
   return
 endelse
end
;-------------------------------------------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------------------------------------------
;Procedure which finds beam intervals using MDSPLUS.
;-------------------------------------------------------------------------------------------------------------------------
Pro find_beam_intervals
;The following common block which contains the settings for the
;ALCBEAM driver
common driver_settings, driver_shots,driver_set_file, driver_time
;The following common block is used to hold the array of beam intervals
common beam_intervals,b_t1,b_t2
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err 

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------
 
 MDSOPEN,'CMOD',SHOT,/QUIET,STATUS=ST0
 if st0 then begin  
   I_beam_full = MDSVALUE('\DNB::TOP.DNB_ENG.Results.I_beam',/quiet,status=st1)
   I_beam_time=MDSVALUE('dim_of(\DNB::TOP.DNB_ENG.Results.I_beam)',/quiet,status=st2)
   V_beam_full = MDSVALUE('\DNB::TOP.DNB_ENG.Results.V_beam',/quiet,status=st3)
   if st1 and st2 and st3 then begin
     P_beam=I_beam_full*v_beam_full
     b_t1=i_beam_time(where((p_beam lt max(p_beam)*0.1)*[((p_beam gt max(p_beam)*0.1))(1:*),0]))
     b_t2=i_beam_time(where((p_beam gt max(p_beam)*0.1)*[((p_beam lt max(p_beam)*0.1))(1:*),1]))
     b_t2=b_t2(where(b_t1 gt float(driver_time(0))))
     b_t1=b_t1(where(b_t1 gt float(driver_time(0))))
     ;remove faulty beam frames
     ind_beam=where(b_t2-b_t1 gt 0.02)
     b_t2=b_t2(ind_beam)
     b_t1=b_t1(ind_beam)
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The Beam time intervals were successfully extracted from MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
   endif else begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The Beam Parameters data set is not available in MDSPLUS (probably Spectroscopy code failed to run)']], Set_text_top_line=n_elements(status_tx)-4
     st_err=1
     return
   endelse
 endif else begin
   Widget_control, status_wid, Get_Value=status_tx
   Widget_Control, status_wid,$
   Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : This shot is not existed in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
   st_err=1
   return
 endelse
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which saves the parameters and output results arrays to the
;*.abo output file.
;-------------------------------------------------------------------------------------------------------------------------
pro save_output_to_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for calculation.
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution)
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
;The following common block contains neutral gas parameters used in
;calculation of the beam attenuation in the gas.
common neutral_gas,tank_pressure,torus_pressure,duct_pressure,duct_pressure_loc,n0_arr,n0_stop_cross_section
;The following common block contains 1D n_e profiles of raw and
;smoothed data, 3D n_e and ne_stop_cross_section arrays after they constructed
common dens_electrons,n_e_coord,n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr,ne_stop_cross_section
;The following common block contains 1D t_e profiles of raw and
;smoothed data and 3D t_e array after it constructed.
common temp_electrons,t_e_coord,t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
;The following common block contains 1D z_eff profiles of raw and
;smoothed data and 3D z_eff array after it constructed.
common effective_charge, z_eff_coord, z_eff_raw,z_eff_raw_err,z_eff_raw_r,z_eff,z_eff_err,z_eff_r,z_eff_arr,z_eff_err_arr
;The following common block contains X,Y,Z coordinate arrays used for the beam
;calculation grid and output 3D arrays of the beam density and excitation fracitons
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following common block contains the parameters which describe the geometry
;and position of the machine plasma
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower
;The following common block contains the parameters which describe
;some relative  global parameters of the plasma 
common plasma_param, main_ion,n_impur,impur_table
;The following common block contains the table of the parameters which
;defile the 3D spatial grid which used for calculation
common grid_arr, code_grid_arr
;The following common block contains some of the settings of how to
;run the beam attenuation and penetration calculation. ;The following
;common block contains the name of the output save file
common run_settings, div_type,div_type_names,atten_type, atten_type_names, vel_dis_type,vel_dis_names,save_output_type,save_output_file
;The following common block contains the parameters which describe the
;positions and sizes of the beam limiters.
common beam_limiters, n_limiters, limiters_table,limiters_arr
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation.
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err 

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------

close,1
openw,1,save_output_file

printf,1,';Output Data for ALCBEAM code'
printf,1,'----------------------------------'
printf,1,''
printf,1,';File is created on:'
printf,1, systime()
printf,1,';File is created by:'
printf,1, 'ALCBEAM (ver. '+alcbeam_ver+')'

;First saved all parameters used in calculation
printf,1,''
printf,1,';Beam label'
printf,1,'beam:'
printf,1,beam
printf,1,''
printf,1,';Shot number'
printf,1,'shot:'
printf,1,shot
printf,1,''
printf,1,';Time interval t1, t2'
printf,1,'time_interv:'
printf,1,string([t1,t2],format='(F5.3,", ",F5.3)')
printf,1,''
form='('+strtrim(string(n_elements(x_bml)),2)+'(F10.6,", "))'
x_bml_str=string(x_bml,format=form)
x_bml_str=strmid(x_bml_str,0,strlen(x_bml_str)-2)
printf,1,''
printf,1,';Divergence type'
printf,1,'div_type:'
printf,1,div_type_names(div_type)
printf,1,''
printf,1,';Attenuation type'
printf,1,'atten_type:'
printf,1,atten_type_names(atten_type)
printf,1,''
printf,1,';Velocity Distribution'
printf,1,'vel_dis_type:'
printf,1,vel_dis_names(vel_dis_type)
printf,1,''
printf,1,';Plasma stopping cross sections source'
printf,1,'stop_plsm_cs:'
printf,1,stop_plasma_type_names(stop_plasma_type)
printf,1,''
printf,1,';Plasma excitation cross sections source'
printf,1,'exc_plsm_cs:'
printf,1,exc_plasma_type_names(exc_plasma_type)
printf,1,''
printf,1,'----------------------------------'
;Saving beam geometry to file
;x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
printf,1,''
printf,1,';X positions of the apertures in the accelerating grid, m'
printf,1,'x_bml:'
printf,1,x_bml_str
printf,1,''
printf,1,';y positions of the apertures in the accelerating grid, m'
printf,1,'y_bml:'
form='('+strtrim(string(n_elements(y_bml)),2)+'(F10.6,", "))'
y_bml_str=string(y_bml,format=form)
y_bml_str=strmid(y_bml_str,0,strlen(y_bml_str)-2)
printf,1,y_bml_str
printf,1,''
printf,1,';Diameter of elemental aperture in extraction grid, mm'
printf,1,'grid_ap_diam:'
printf,1,strtrim(string(grid_ap_diam,format='(F10.3)'),1)
printf,1,''
printf,1,';Toroidal angles are relative to the phi0, rad'
printf,1,'beam_port_phi:'
printf,1,strtrim(string(beam_port_phi,format='(F10.3)'),1)
printf,1,''
printf,1,';Beam injector is attached to the port'
printf,1,'beam_port:'
printf,1,beam_port
printf,1,''
printf,1,';Radius of curvature of the grids (X:horizontal), m'
printf,1,'x_grid_focus:'
printf,1,strtrim(string(x_grid_focus,format='(F10.3)'),1)
printf,1,''
printf,1,';Radius of curvature of the grids (Y:vertical), m'
printf,1,'y_grid_focus:'
printf,1,strtrim(string(y_grid_focus,format='(F10.3)'),1)
printf,1,''
printf,1,';Distance from grids to the tank front wall, m'
printf,1,'tank_front_dist:'
printf,1,strtrim(string(tank_front_dist,format='(F10.3)'),1)
printf,1,''
printf,1,';The size of the beam vacuum tank, m'
printf,1,'tank_size:'
printf,1,strtrim(string(tank_size,format='(F10.3)'),1)
printf,1,''
printf,1,';Inner diameter of the beam vacuum tank, m'
printf,1,'tank_diam:'
printf,1,strtrim(string(tank_diam,format='(F10.3)'),1)
printf,1,''
printf,1,';Distance from grids to the neutralizer front surface, m'
printf,1,'neutr_front_dist:'
printf,1,strtrim(string(neutr_front_dist,format='(F10.3)'),1)
printf,1,''
printf,1,';The size of the beam neutralizer tube, m'
printf,1,'neutr_size:'
printf,1,strtrim(string(neutr_size,format='(F10.3)'),1)
printf,1,''
printf,1,';Inner diameter of the beam neutralizer tube, m'
printf,1,'neutr_diam:'
printf,1,strtrim(string(neutr_diam,format='(F10.3)'),1)
printf,1,''
printf,1,';Distance from tank end wall to the front of magnet, m'
printf,1,'tank_magnet_dist:'
printf,1,strtrim(string(tank_magnet_dist,format='(F10.3)'),1)
printf,1,''
printf,1,';The size of the beam deflection magnet, m'
printf,1,'magnet_size:'
printf,1,strtrim(string(magnet_size,format='(F10.3)'),1)
printf,1,''
printf,1,';Inner diameter of the beam deflection magnet, m'
printf,1,'magnet_diam:'
printf,1,strtrim(string(magnet_diam,format='(F10.3)'),1)
printf,1,''
printf,1,';Distance from tank end wall to front of calorimeter, m'
printf,1,'tank_cal_dist:'
printf,1,strtrim(string(tank_cal_dist,format='(F10.3)'),1)
printf,1,''
printf,1,';Major radius of center of beam accelerating grid, m'
printf,1,'r_grid:'
printf,1,strtrim(string(R_grid,format='(F10.3)'),1)
printf,1,''
printf,1,';Z coordinate of center of beam accelerating grid, m'
printf,1,'z_grid:'
printf,1,strtrim(string(Z_grid,format='(F10.3)'),1)
printf,1,''
printf,1,';Toroidal angle of center of beam accelerating grid, m'
printf,1,'phi_grid:'
printf,1,strtrim(string(phi_grid,format='(F10.3)'),1)
printf,1,''
printf,1,';Major radius of second point defining the beam, m'
printf,1,'r_wall:'
printf,1,strtrim(string(R_wall,format='(F10.3)'),1)
printf,1,''
printf,1,';Z coordinate of second point defining the beam, m'
printf,1,'z_wall:'
printf,1,strtrim(string(Z_wall,format='(F10.3)'),1)
printf,1,''
printf,1,';Toroidal angle of second point defining the beam, m'
printf,1,'phi_wall:'
printf,1,strtrim(string(phi_wall,format='(F10.3)'),1)
printf,1,''

;Saving beam parameters to file
;e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, x_div_bml_opt, y_div_bml_opt,div_dist_par
printf,1,''
printf,1,';Beam atom:'
printf,1,'beam_atom:'
printf,1,beam_atom
printf,1,''
printf,1,';Energy of the main component, keV'
printf,1,'e_full:'
printf,1,strtrim(string(e_full,format='(F10.3)'),1)
printf,1,''
printf,1,';Beam energy components (fractions)'
form='('+strtrim(string(n_elements(e_frac)),2)+'(F5.3,", "))'
e_frac_str=string(e_frac,format=form)
e_frac_str=strmid(e_frac_str,0,strlen(e_frac_str)-2)
printf,1,'e_frac:'
printf,1,e_frac_str
printf,1,''
printf,1,';Total current of the beam, A'
printf,1,'i_beam:'
printf,1,strtrim(string(I_beam,format='(F10.3)'),1)
printf,1,''
printf,1,';Current fraction of each component'
form='('+strtrim(string(n_elements(I_frac)),2)+'(F5.3,", "))'
I_frac_str=string(I_frac,format=form)
I_frac_str=strmid(I_frac_str,0,strlen(I_frac_str)-2)
printf,1,'i_frac:'
printf,1,I_frac_str
printf,1,''
printf,1,';Optimal extraction current, I_opt, A'
printf,1,'i_opt:'
printf,1,strtrim(string(I_opt,format='(F10.3)'),1)
printf,1,''
printf,1,';Parabolic source density parameter'
printf,1,'i_dens_par:'
printf,1,strtrim(string(I_dens_par,format='(F10.3)'),1)
printf,1,''
printf,1,';beamlet divergence half-angle (X:horizontal), deg'
printf,1,'x_div_bml_opt:'
printf,1,strtrim(string(x_div_bml_opt,format='(F10.3)'),1)
printf,1,''
printf,1,';beamlet divergence half-angle (Y:vertical), deg'
printf,1,'y_div_bml_opt:'
printf,1,strtrim(string(y_div_bml_opt,format='(F10.3)'),1)
printf,1,''
printf,1,';Beamlet divergence variation parameter'
printf,1,'div_dist_par:'
printf,1,strtrim(string(div_dist_par,format='(F10.3)'),1)


;Saving beam limiters info
;limiters table
printf,1,''
printf,1,';Number of beam limiters to set up'
printf,1,'n_limiters:'
printf,1,strtrim(string(n_limiters,format='(I2)'),1)
printf,1,''
printf,1,';Table of limiters positions and sizes'
printf,1,';If limiter is circular X size and Y size should be blank or 0.000, Diameter should be non zero'
printf,1,';If limiter is rectangular Diameter should be blank or 0.000, X size and Y size should be non zero'
printf,1,'limiters_table:'
printf,1,'--------------------------------------------------------------'
printf,1,'name          :  Z pos : Z size :Diameter:  X size:Y size:R major'
printf,1,'--------------------------------------------------------------'
if n_limiters eq 0 then printf,1,''
for i=0, n_limiters-1 do begin
  printf,1,strtrim(string(limiters_table(*,i),format='(A,T15,":",A8,":",A8,":",A8,":",A8,":",A8,":",A8)'),1)
endfor
printf,1,'--------------------------------------------------------------'
printf,1,''


;Saving neutral gas parameters to file
;tank_pressure,torus_pressure,n0_arr,n0_stop_cross_section
printf,1,''
printf,1,';Pressure in the beam tank, mtorr'
printf,1,'tank_pressure:'
printf,1,strtrim(string(tank_pressure,format='(F10.3)'),1)
printf,1,''
printf,1,';Pressure of the residual gas in the torus, mtorr'
printf,1,'torus_pressure:'
printf,1,strtrim(string(torus_pressure,format='(F10.3)'),1)
printf,1,';Distance from the tank wall to the duct pressure gauge, m'
printf,1,'duct_pressure_loc:'
printf,1,strtrim(string(duct_pressure_loc,format='(F10.3)'),1)
printf,1,';Pressure in the duct, mtorr'
printf,1,'duct_pressure:'
printf,1,strtrim(string(duct_pressure,format='(F10.3)'),1)


;Saving plasma geometry parameters to file
;r_major,z_major,r_minor,elong,triang_upper,triang_lower
printf,1,''
printf,1,';Major radius of the plasma, (radius of plasma center), m'
printf,1,'r_major:'
printf,1,strtrim(string(R_major,format='(F10.3)'),1)
printf,1,''
printf,1,';Vertical position of the plasma center, m'
printf,1,'z_major:'
printf,1,strtrim(string(Z_major,format='(F10.3)'),1)
printf,1,''
printf,1,';Minor radius of the plasma, m'
printf,1,'r_minor:'
printf,1,strtrim(string(R_minor,format='(F10.3)'),1)
printf,1,''
printf,1,';Elongation of the plasma'
printf,1,'elong:'
printf,1,strtrim(string(elong,format='(F10.3)'),1)
printf,1,''
printf,1,';Upper triangularity of the plasma'
printf,1,'triang_upper:'
printf,1,strtrim(string(triang_upper,format='(F10.3)'),1)
printf,1,''
printf,1,';Lower triangularity of the plasma'
printf,1,'triang_lower:'
printf,1,strtrim(string(triang_lower,format='(F10.3)'),1)

;Saving plasma parameters info
;plasma parameters
printf,1,''
printf,1,';Main Plasma Ion'
printf,1,'main_ion:'
printf,1,strtrim(main_ion,1)
printf,1,''
printf,1,';Number of plasma impurities to set up'
printf,1,'n_impur:'
printf,1,strtrim(string(n_impur,format='(I2)'),1)
printf,1,''
printf,1,';Table of impurities (symbol, ion charge, and density fractions relative to total density of all impurities)'
printf,1,';At least one impurity column should be selected'
printf,1,'impur_table:'
printf,1,'--------------------------------------------------------------'
format_impur='(A,T15'
for i=0,n_impur-1 do format_impur=format_impur+',":",A8'
format_impur=format_impur+')'
printf,1,strtrim(string(['Label',impur_table(*,0)],format=format_impur),1)
printf,1,strtrim(string(['Ion charge',impur_table(*,1)],format=format_impur),1)
printf,1,strtrim(string(['Fraction',impur_table(*,2)],format=format_impur),1)
printf,1,'--------------------------------------------------------------'
printf,1,''

;save code_grid_arr
printf,1,''
printf,1,';Irregular grid for code calculation (Z_min:Z_step1:Z_mid:Z_step2:Z_max), (X_min:X_step:X_max),(Y_min:Y_step:Y_max)'
printf,1,'code_grid_arr.Z:'
form='('+strtrim(string(n_elements(code_grid_arr.z)),2)+'(F6.3,", "))'
code_grid_z_str=string(code_grid_arr.z,format=form)
code_grid_z_str=strmid(code_grid_z_str,0,strlen(code_grid_z_str)-2)
printf,1,code_grid_z_str
printf,1,'code_grid_arr.X:'
form='('+strtrim(string(n_elements(code_grid_arr.x)),2)+'(F6.3,", "))'
code_grid_x_str=string(code_grid_arr.x,format=form)
code_grid_x_str=strmid(code_grid_x_str,0,strlen(code_grid_x_str)-2)
printf,1,code_grid_x_str
printf,1,'code_grid_arr.Y:'
form='('+strtrim(string(n_elements(code_grid_arr.y)),2)+'(F6.3,", "))'
code_grid_y_str=string(code_grid_arr.y,format=form)
code_grid_y_str=strmid(code_grid_y_str,0,strlen(code_grid_y_str)-2)
printf,1,code_grid_y_str



;Save 1D electron density profile
;n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr
printf,1,''
printf,1,';Radial coordinate for electron densities, 0 - r_major (m), 1 - rho=sqrt(psi), 2 - rho=sqrt(phi)'
printf,1,'n_e_coord:'
printf,1, strtrim(string(n_e_coord,format='(I10)'),2)
printf,1,''
printf,1,';Density of electrons, radial position for raw data'
printf,1,'n_e_raw_r:'
form='('+strtrim(string(n_elements(n_e_raw_r)),2)+'(F6.4,", "))'
n_e_raw_r_str=string(n_e_raw_r,format=form)
n_e_raw_r_str=strmid(n_e_raw_r_str,0,strlen(n_e_raw_r_str)-2)
printf,1,n_e_raw_r_str
printf,1,''
printf,1,';Density of electrons, raw data, cm-3'
printf,1,'n_e_raw:'
form='('+strtrim(string(n_elements(n_e_raw)),2)+'(G10.4,", "))'
n_e_raw_str=string(n_e_raw,format=form)
n_e_raw_str=strmid(n_e_raw_str,0,strlen(n_e_raw_str)-2)
printf,1,n_e_raw_str
printf,1,''
printf,1,';Density of electrons, errors of the raw data, cm-3'
printf,1,'n_e_raw_err:'
form='('+strtrim(string(n_elements(n_e_raw_err)),2)+'(G10.4,", "))'
n_e_raw_err_str=string(n_e_raw_err,format=form)
n_e_raw_err_str=strmid(n_e_raw_err_str,0,strlen(n_e_raw_err_str)-2)
printf,1,n_e_raw_err_str
printf,1,''
printf,1,';Density of electrons, radial position for smoothed data'
printf,1,'n_e_r:'
form='('+strtrim(string(n_elements(n_e_r)),2)+'(F6.4,", "))'
n_e_r_str=string(n_e_r,format=form)
n_e_r_str=strmid(n_e_r_str,0,strlen(n_e_r_str)-2)
printf,1,n_e_r_str
printf,1,''
printf,1,';Density of electrons, smoothed data, cm-3'
printf,1,'n_e:'
form='('+strtrim(string(n_elements(n_e)),2)+'(G10.4,", "))'
n_e_str=string(n_e,format=form)
n_e_str=strmid(n_e_str,0,strlen(n_e_str)-2)
printf,1,n_e_str
printf,1,''
printf,1,';Density of electrons, errors of the smoothed data, cm-3'
printf,1,'n_e_err:'
form='('+strtrim(string(n_elements(n_e_err)),2)+'(G10.4,", "))'
n_e_err_str=string(n_e_err,format=form)
n_e_err_str=strmid(n_e_err_str,0,strlen(n_e_err_str)-2)
printf,1,n_e_err_str

;Save 1D electron temperature profile
;t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
printf,1,''
printf,1,';Radial coordinate for electron temperatures, 0 - r_major (m), 1 - rho=sqrt(psi), 2 - rho=sqrt(phi)'
printf,1,'t_e_coord:'
printf,1, strtrim(string(t_e_coord,format='(I10)'),2)
printf,1,''
printf,1,';Temperature of electrons, radial position for raw data'
printf,1,'t_e_raw_r:'
form='('+strtrim(string(n_elements(t_e_raw_r)),2)+'(F6.4,", "))'
t_e_raw_r_str=string(t_e_raw_r,format=form)
t_e_raw_r_str=strmid(t_e_raw_r_str,0,strlen(t_e_raw_r_str)-2)
printf,1,t_e_raw_r_str
printf,1,''
printf,1,';Temperature of electrons, raw data, keV'
printf,1,'t_e_raw:'
form='('+strtrim(string(n_elements(t_e_raw)),2)+'(F6.4,", "))'
t_e_raw_str=string(t_e_raw,format=form)
t_e_raw_str=strmid(t_e_raw_str,0,strlen(t_e_raw_str)-2)
printf,1,t_e_raw_str
printf,1,''
printf,1,';Temperature of electrons, errors of the raw data, keV'
printf,1,'t_e_raw_err:'
form='('+strtrim(string(n_elements(t_e_raw_err)),2)+'(F6.4,", "))'
t_e_raw_err_str=string(t_e_raw_err,format=form)
t_e_raw_err_str=strmid(t_e_raw_err_str,0,strlen(t_e_raw_err_str)-2)
printf,1,t_e_raw_err_str
printf,1,''
printf,1,';Temperature of electrons, radial position for smoothed data'
printf,1,'t_e_r:'
form='('+strtrim(string(n_elements(t_e_r)),2)+'(F6.4,", "))'
t_e_r_str=string(t_e_r,format=form)
t_e_r_str=strmid(t_e_r_str,0,strlen(t_e_r_str)-2)
printf,1,t_e_r_str
printf,1,''
printf,1,';Temperature of electrons, smoothed data, keV'
printf,1,'t_e:'
form='('+strtrim(string(n_elements(t_e)),2)+'(F6.4,", "))'
t_e_str=string(t_e,format=form)
t_e_str=strmid(t_e_str,0,strlen(t_e_str)-2)
printf,1,t_e_str
printf,1,''
printf,1,';Temperature of electrons, errors of the smoothed data, keV'
printf,1,'t_e_err:'
form='('+strtrim(string(n_elements(t_e_err)),2)+'(F6.4,", "))'
t_e_err_str=string(t_e_err,format=form)
t_e_err_str=strmid(t_e_err_str,0,strlen(t_e_err_str)-2)
printf,1,t_e_err_str



;Save 1D z_eff  profiles
;z_eff_raw,z_eff_raw_err,z_eff_raw_r,z_eff,z_eff_err,z_eff_r,z_eff_arr,z_eff_err_arr
printf,1,''
printf,1,';Radial coordinate for effective charge, 0 - r_major (m), 1 - rho=sqrt(psi), 2 - rho=sqrt(phi)'
printf,1,'z_eff_coord:'
printf,1, strtrim(string(z_eff_coord,format='(I10)'),2)
printf,1,''
printf,1,';Effective Charge Z_Eff, radial position for raw data'
printf,1,'z_eff_raw_r:'
form='('+strtrim(string(n_elements(z_eff_raw_r)),2)+'(F6.4,", "))'
z_eff_raw_r_str=string(z_eff_raw_r,format=form)
z_eff_raw_r_str=strmid(z_eff_raw_r_str,0,strlen(z_eff_raw_r_str)-2)
printf,1,z_eff_raw_r_str
printf,1,''
printf,1,';Effective Charge. Z_eff, raw data'
printf,1,'z_eff_raw:'
form='('+strtrim(string(n_elements(z_eff_raw)),2)+'(F6.4,", "))'
z_eff_raw_str=string(z_eff_raw,format=form)
z_eff_raw_str=strmid(z_eff_raw_str,0,strlen(z_eff_raw_str)-2)
printf,1,z_eff_raw_str
printf,1,''
printf,1,';Effective Charge Z_Eff, errors of the raw data'
printf,1,'z_eff_raw_err:'
form='('+strtrim(string(n_elements(z_eff_raw_err)),2)+'(F6.4,", "))'
z_eff_raw_err_str=string(z_eff_raw_err,format=form)
z_eff_raw_err_str=strmid(z_eff_raw_err_str,0,strlen(z_eff_raw_err_str)-2)
printf,1,z_eff_raw_err_str
printf,1,''
printf,1,';Effective Charge Z_Eff, radial position for smoothed data'
printf,1,'z_eff_r:'
form='('+strtrim(string(n_elements(z_eff_r)),2)+'(F6.4,", "))'
z_eff_r_str=string(z_eff_r,format=form)
z_eff_r_str=strmid(z_eff_r_str,0,strlen(z_eff_r_str)-2)
printf,1,z_eff_r_str
printf,1,''
printf,1,';Effective Charge Z_Eff, smoothed data'
printf,1,'z_eff:'
form='('+strtrim(string(n_elements(z_eff)),2)+'(F6.4,", "))'
z_eff_str=string(z_eff,format=form)
z_eff_str=strmid(z_eff_str,0,strlen(z_eff_str)-2)
printf,1,z_eff_str
printf,1,''
printf,1,';Effective Charge Z_Eff, errors of the smoothed data'
printf,1,'z_eff_err:'
form='('+strtrim(string(n_elements(z_eff_err)),2)+'(F6.4,", "))'
z_eff_err_str=string(z_eff_err,format=form)
z_eff_err_str=strmid(z_eff_err_str,0,strlen(z_eff_err_str)-2)
printf,1,z_eff_err_str


;Save 3D arrays of the beam data
;n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
printf,1,''
printf,1,';Energy components of the beam, keV'
printf,1,'e_beam:'
form='('+strtrim(string(n_elements(e_beam)),2)+'(F6.3,", "))'
e_beam_str=string(e_beam,format=form)
e_beam_str=strmid(e_beam_str,0,strlen(e_beam_str)-2)
printf,1,e_beam_str
printf,1,''
printf,1,';Z_grid of the beam, m'
printf,1,'z_beam:'
form='('+strtrim(string(n_elements(z_beam)),2)+'(F6.3,", "))'
z_beam_str=string(z_beam,format=form)
z_beam_str=strmid(z_beam_str,0,strlen(z_beam_str)-2)
printf,1,z_beam_str
printf,1,''
printf,1,';X_grid of the beam, m'
printf,1,'x_beam:'
form='('+strtrim(string(n_elements(x_beam)),2)+'(F6.3,", "))'
x_beam_str=string(x_beam,format=form)
x_beam_str=strmid(x_beam_str,0,strlen(x_beam_str)-2)
printf,1,x_beam_str
printf,1,''
printf,1,';Y_grid of the beam, m'
printf,1,'y_beam:'
form='('+strtrim(string(n_elements(y_beam)),2)+'(F6.3,", "))'
y_beam_str=string(y_beam,format=form)
y_beam_str=strmid(y_beam_str,0,strlen(y_beam_str)-2)
printf,1,y_beam_str

printf,1,''
printf,1,';Calculated Density of the beam, cm-3'
printf,1,'n_beam:'
;form='('+strtrim(string(n_elements(n_beam)),2)+'(G10.4,", "))'
;n_beam_str=string(n_beam,format=form)
;n_beam_str=strmid(n_beam_str,0,strlen(n_beam_str)-2)
;printf,1,n_beam_str
writeu,1,n_beam
printf,1,''
printf,1,';Fraction of the atoms in first excited state, n=2'
printf,1,'exc_n2_frac:'
writeu,1,exc_n2_frac

printf,1,''
printf,1,';Fraction of the atoms in second excited state, n=2'
printf,1,'exc_n3_frac:'
writeu,1,exc_n3_frac

if vel_dis_type eq 0 then begin
  printf,1,''
  printf,1,';X Coordinates of the velocity vector for all beam pores, m'
  printf,1,'vel_vec_x:'
  writeu,1,vel_vec_x

  printf,1,''
  printf,1,';Y Coordinates of the velocity vector for all beam pores, m'
  printf,1,'vel_vec_y:'
  writeu,1,vel_vec_y
 
  printf,1,''
  printf,1,'; Polynomial fit coefficients for XY velocity distribution'
  printf,1,'vel_vec_coef:'
  writeu,1,vel_vec_coef
endif


printf,1,''
printf,1,'End of file:'
close,1


end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which saves the parameters and input arrays to the
;*.abi input file.
;-------------------------------------------------------------------------------------------------------------------------
pro save_input_to_file
;The following common block contains some of the settings of "saving
;parameters to the file"
common save_param, save_param_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for calculation.
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution)
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
;The following common block contains neutral gas parameters used in
;calculation of the beam attenuation in the gas.
common neutral_gas,tank_pressure,torus_pressure,duct_pressure,duct_pressure_loc,n0_arr,n0_stop_cross_section
;The following common block contains 1D n_e profiles of raw and smoothed data, and 3D
;n_e array after it constructed.
common dens_electrons,n_e_coord,n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr,ne_stop_cross_section
;The following common block contains 1D t_e profiles of raw and smoothed data, and 3D
;t_e array after it constructed.
common temp_electrons,t_e_coord,t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
;The following common block contains 1D z_eff profiles of raw and smoothed data, and 3D
;z_eff array after it constructed.
common effective_charge, z_eff_coord, z_eff_raw,z_eff_raw_err,z_eff_raw_r,z_eff,z_eff_err,z_eff_r,z_eff_arr,z_eff_err_arr
;The following common block contains X,Y,Z coordinate arrays used for the beam
;calculation grid and output 3D arrays of the beam density and excitation fracitons
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following common block contains the parameters which describe the geometry
;and position of the machine plasma
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower
;The following common block contains the parameters which describe
;some relative  global parameters of the plasma 
common plasma_param, main_ion,n_impur,impur_table
;The following common block contains the table of the parameters which
;defile the 3D spatial grid which used for calculation
common grid_arr, code_grid_arr
;The following common block contains the parameters which describe the
;positions and sizes of the beam limiters.
common beam_limiters, n_limiters, limiters_table,limiters_arr
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err 

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------


close,1
openw,1,save_param_file

printf,1,';Input parameters for ALCBEAM code'
printf,1,'----------------------------------'
printf,1,''
printf,1,';File is created on:'
printf,1, systime()
printf,1,';File is created by:'
printf,1, 'ALCBEAM (ver. '+alcbeam_ver+')'

;Saving beam geometry to file
;x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
printf,1,''
printf,1,';Beam label'
printf,1,'beam:'
printf,1,beam
printf,1,''
printf,1,';Shot number'
printf,1,'shot:'
printf,1,shot
printf,1,''
printf,1,';Time interval t1, t2'
printf,1,'time_interv:'
printf,1,string([t1,t2],format='(F5.3,", ",F5.3)')
printf,1,''
form='('+strtrim(string(n_elements(x_bml)),2)+'(F10.6,", "))'
x_bml_str=string(x_bml,format=form)
x_bml_str=strmid(x_bml_str,0,strlen(x_bml_str)-2)
printf,1,''
printf,1,'----------------------------------'
printf,1,''
printf,1,';X positions of the apertures in the accelerating grid, m'
printf,1,'x_bml:'
printf,1,x_bml_str
printf,1,''
printf,1,';y positions of the apertures in the accelerating grid, m'
printf,1,'y_bml:'
form='('+strtrim(string(n_elements(y_bml)),2)+'(F10.6,", "))'
y_bml_str=string(y_bml,format=form)
y_bml_str=strmid(y_bml_str,0,strlen(y_bml_str)-2)
printf,1,y_bml_str
printf,1,''
printf,1,';Diameter of elemental aperture in extraction grid, mm'
printf,1,'grid_ap_diam:'
printf,1,strtrim(string(grid_ap_diam,format='(F10.3)'),1)
printf,1,''
printf,1,';Toroidal angles are relative to the phi0, rad'
printf,1,'beam_port_phi:'
printf,1,strtrim(string(beam_port_phi,format='(F10.3)'),1)
printf,1,''
printf,1,';Beam injector is attached to the port'
printf,1,'beam_port:'
printf,1,beam_port
printf,1,''
printf,1,';Radius of curvature of the grids (X:horizontal), m'
printf,1,'x_grid_focus:'
printf,1,strtrim(string(x_grid_focus,format='(F10.3)'),1)
printf,1,''
printf,1,';Radius of curvature of the grids (Y:vertical), m'
printf,1,'y_grid_focus:'
printf,1,strtrim(string(y_grid_focus,format='(F10.3)'),1)
printf,1,''
printf,1,';Distance from grids to the tank front wall, m'
printf,1,'tank_front_dist:'
printf,1,strtrim(string(tank_front_dist,format='(F10.3)'),1)
printf,1,''
printf,1,';The size of the beam vacuum tank, m'
printf,1,'tank_size:'
printf,1,strtrim(string(tank_size,format='(F10.3)'),1)
printf,1,''
printf,1,';Inner diameter of the beam vacuum tank, m'
printf,1,'tank_diam:'
printf,1,strtrim(string(tank_diam,format='(F10.3)'),1)
printf,1,''
printf,1,';Distance from grids to the neutralizer front surface, m'
printf,1,'neutr_front_dist:'
printf,1,strtrim(string(neutr_front_dist,format='(F10.3)'),1)
printf,1,''
printf,1,';The size of the beam neutralizer tube, m'
printf,1,'neutr_size:'
printf,1,strtrim(string(neutr_size,format='(F10.3)'),1)
printf,1,''
printf,1,';Inner diameter of the beam neutralizer tube, m'
printf,1,'neutr_diam:'
printf,1,strtrim(string(neutr_diam,format='(F10.3)'),1)
printf,1,''
printf,1,';Distance from tank end wall to the front of magnet, m'
printf,1,'tank_magnet_dist:'
printf,1,strtrim(string(tank_magnet_dist,format='(F10.3)'),1)
printf,1,''
printf,1,';The size of the beam deflection magnet, m'
printf,1,'magnet_size:'
printf,1,strtrim(string(magnet_size,format='(F10.3)'),1)
printf,1,''
printf,1,';Inner diameter of the beam deflection magnet, m'
printf,1,'magnet_diam:'
printf,1,strtrim(string(magnet_diam,format='(F10.3)'),1)
printf,1,''
printf,1,';Distance from tank end wall to front of calorimeter, m'
printf,1,'tank_cal_dist:'
printf,1,strtrim(string(tank_cal_dist,format='(F10.3)'),1)
printf,1,''
printf,1,';Major radius of center of beam accelerating grid, m'
printf,1,'r_grid:'
printf,1,strtrim(string(R_grid,format='(F10.3)'),1)
printf,1,''
printf,1,';Z coordinate of center of beam accelerating grid, m'
printf,1,'z_grid:'
printf,1,strtrim(string(Z_grid,format='(F10.3)'),1)
printf,1,''
printf,1,';Toroidal angle of center of beam accelerating grid, m'
printf,1,'phi_grid:'
printf,1,strtrim(string(phi_grid,format='(F10.3)'),1)
printf,1,''
printf,1,';Major radius of second point defining the beam, m'
printf,1,'r_wall:'
printf,1,strtrim(string(R_wall,format='(F10.3)'),1)
printf,1,''
printf,1,';Z coordinate of second point defining the beam, m'
printf,1,'z_wall:'
printf,1,strtrim(string(Z_wall,format='(F10.3)'),1)
printf,1,''
printf,1,';Toroidal angle of second point defining the beam, m'
printf,1,'phi_wall:'
printf,1,strtrim(string(phi_wall,format='(F10.3)'),1)
printf,1,''

;Saving beam parameters to file
;e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, x_div_bml_opt, y_div_bml_opt,div_dist_par
printf,1,''
printf,1,';Beam atom:'
printf,1,'beam_atom:'
printf,1,beam_atom
printf,1,''
printf,1,';Energy of the main component, keV'
printf,1,'e_full:'
printf,1,strtrim(string(e_full,format='(F10.3)'),1)
printf,1,''
printf,1,';Beam energy components (fractions)'
form='('+strtrim(string(n_elements(e_frac)),2)+'(F5.3,", "))'
e_frac_str=string(e_frac,format=form)
e_frac_str=strmid(e_frac_str,0,strlen(e_frac_str)-2)
printf,1,'e_frac:'
printf,1,e_frac_str
printf,1,''
printf,1,';Total current of the beam, A'
printf,1,'i_beam:'
printf,1,strtrim(string(I_beam,format='(F10.3)'),1)
printf,1,''
printf,1,';Current fraction of each component'
form='('+strtrim(string(n_elements(I_frac)),2)+'(F5.3,", "))'
I_frac_str=string(I_frac,format=form)
I_frac_str=strmid(I_frac_str,0,strlen(I_frac_str)-2)
printf,1,'i_frac:'
printf,1,I_frac_str
printf,1,''
printf,1,';Optimal extraction current, I_opt, A'
printf,1,'i_opt:'
printf,1,strtrim(string(I_opt,format='(F10.3)'),1)
printf,1,''
printf,1,';Parabolic source density parameter'
printf,1,'i_dens_par:'
printf,1,strtrim(string(I_dens_par,format='(F10.3)'),1)
printf,1,''
printf,1,';beamlet divergence half-angle (X:horizontal), deg'
printf,1,'x_div_bml_opt:'
printf,1,strtrim(string(x_div_bml_opt,format='(F10.3)'),1)
printf,1,''
printf,1,';beamlet divergence half-angle (Y:vertical), deg'
printf,1,'y_div_bml_opt:'
printf,1,strtrim(string(y_div_bml_opt,format='(F10.3)'),1)
printf,1,''
printf,1,';Beamlet divergence variation parameter'
printf,1,'div_dist_par:'
printf,1,strtrim(string(div_dist_par,format='(F10.3)'),1)

;Saving beam limiters info
;limiters table
printf,1,''
printf,1,';Number of beam limiters to set up'
printf,1,'n_limiters:'
printf,1,strtrim(string(n_limiters,format='(I2)'),1)
printf,1,''
printf,1,';Table of limiters positions and sizes'
printf,1,';If limiter is circular X size and Y size should be blank or 0.000, Diameter should be non zero'
printf,1,';If limiter is rectangular Diameter should be blank or 0.000, X size and Y size should be non zero'
printf,1,'limiters_table:'
printf,1,'--------------------------------------------------------------'
printf,1,'name          :  Z pos : Z size :Diameter:  X size:Y size: R major'
printf,1,'--------------------------------------------------------------'
if n_limiters eq 0 then printf,1,''
for i=0, n_limiters-1 do begin
  printf,1,strtrim(string(limiters_table(*,i),format='(A,T15,":",A8,":",A8,":",A8,":",A8,":",A8,":",A8)'),1)
endfor
printf,1,'--------------------------------------------------------------'
printf,1,''

;Saving neutral gas parameters to file
;tank_pressure,torus_pressure,n0_arr,n0_stop_cross_section
printf,1,''
printf,1,';Pressure in the beam tank, mtorr'
printf,1,'tank_pressure:'
printf,1,strtrim(string(tank_pressure,format='(F10.3)'),1)
printf,1,''
printf,1,';Pressure in the residual gas in the torus, mtorr'
printf,1,'torus_pressure:'
printf,1,strtrim(string(torus_pressure,format='(F10.3)'),1)
printf,1,';Distance from the tank wall to the duct pressure gauge, m'
printf,1,'duct_pressure_loc:'
printf,1,strtrim(string(duct_pressure_loc,format='(F10.3)'),1)
printf,1,';Pressure in the duct, mtorr'
printf,1,'duct_pressure:'
printf,1,strtrim(string(duct_pressure,format='(F10.3)'),1)

;Saving plasma geometry parameters to file
;r_major,z_major,r_minor,elong,triang_upper,triang_lower
printf,1,''
printf,1,';Major radius of the plasma (radius of plasma center), m'
printf,1,'r_major:'
printf,1,strtrim(string(R_major,format='(F10.3)'),1)
printf,1,''
printf,1,';Vertical position of the plasma center, m'
printf,1,'z_major:'
printf,1,strtrim(string(Z_major,format='(F10.3)'),1)
printf,1,''
printf,1,';Minor radius of the plasma, m'
printf,1,'r_minor:'
printf,1,strtrim(string(R_minor,format='(F10.3)'),1)
printf,1,''
printf,1,';Elongation of the plasma'
printf,1,'elong:'
printf,1,strtrim(string(elong,format='(F10.3)'),1)
printf,1,''
printf,1,';Upper triangularity of the plasma'
printf,1,'triang_upper:'
printf,1,strtrim(string(triang_upper,format='(F10.3)'),1)
printf,1,''
printf,1,';Lower triangularity of the plasma'
printf,1,'triang_lower:'
printf,1,strtrim(string(triang_lower,format='(F10.3)'),1)

;Saving plasma parameters info
;plasma parameters
printf,1,''
printf,1,';Main Plasma Ion'
printf,1,'main_ion:'
printf,1,strtrim(main_ion,1)
printf,1,''
printf,1,';Number of plasma impurities to set up'
printf,1,'n_impur:'
printf,1,strtrim(string(n_impur,format='(I2)'),1)
printf,1,''
printf,1,';Table of impurities (symbol, ion charge, and density fractions relative to total density of all impurities)'
printf,1,';At least one impurity column should be selected'
printf,1,'impur_table:'
printf,1,'--------------------------------------------------------------'
format_impur='(A,T15'
for i=0,n_impur-1 do format_impur=format_impur+',":",A8'
format_impur=format_impur+')'
printf,1,strtrim(string(['Label',impur_table(*,0)],format=format_impur),1)
printf,1,strtrim(string(['Ion charge',impur_table(*,1)],format=format_impur),1)
printf,1,strtrim(string(['Fraction',impur_table(*,2)],format=format_impur),1)
printf,1,'--------------------------------------------------------------'
printf,1,''

;save code_grid_arr
printf,1,''
printf,1,';Irregular grid for code calculation (Z_min:Z_step1:Z_mid:Z_step2:Z_max), (X_min:X_step:X_max),(Y_min:Y_step:Y_max)'
printf,1,'code_grid_arr.Z:'
form='('+strtrim(string(n_elements(code_grid_arr.z)),2)+'(F6.3,", "))'
code_grid_z_str=string(code_grid_arr.z,format=form)
code_grid_z_str=strmid(code_grid_z_str,0,strlen(code_grid_z_str)-2)
printf,1,code_grid_z_str
printf,1,'code_grid_arr.X:'
form='('+strtrim(string(n_elements(code_grid_arr.x)),2)+'(F6.3,", "))'
code_grid_x_str=string(code_grid_arr.x,format=form)
code_grid_x_str=strmid(code_grid_x_str,0,strlen(code_grid_x_str)-2)
printf,1,code_grid_x_str
printf,1,'code_grid_arr.Y:'
form='('+strtrim(string(n_elements(code_grid_arr.y)),2)+'(F6.3,", "))'
code_grid_y_str=string(code_grid_arr.y,format=form)
code_grid_y_str=strmid(code_grid_y_str,0,strlen(code_grid_y_str)-2)
printf,1,code_grid_y_str


;Save 1D electron density profile
;n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr
printf,1,''
printf,1,';Radial coordinate for electron densities, 0 - r_major (m), 1 - rho=sqrt(psi), 2 - rho=sqrt(phi)'
printf,1,'n_e_coord:'
printf,1, strtrim(string(n_e_coord,format='(I10)'),2)
printf,1,''
printf,1,';Density of electrons, radial position for raw data'
printf,1,'n_e_raw_r:'
form='('+strtrim(string(n_elements(n_e_raw_r)),2)+'(F6.4,", "))'
n_e_raw_r_str=string(n_e_raw_r,format=form)
n_e_raw_r_str=strmid(n_e_raw_r_str,0,strlen(n_e_raw_r_str)-2)
printf,1,n_e_raw_r_str
printf,1,''
printf,1,';Density of electrons, raw data, cm-3'
printf,1,'n_e_raw:'
form='('+strtrim(string(n_elements(n_e_raw)),2)+'(G10.4,", "))'
n_e_raw_str=string(n_e_raw,format=form)
n_e_raw_str=strmid(n_e_raw_str,0,strlen(n_e_raw_str)-2)
printf,1,n_e_raw_str
printf,1,''
printf,1,';Density of electrons, errors of the raw data, cm-3'
printf,1,'n_e_raw_err:'
form='('+strtrim(string(n_elements(n_e_raw_err)),2)+'(G10.4,", "))'
n_e_raw_err_str=string(n_e_raw_err,format=form)
n_e_raw_err_str=strmid(n_e_raw_err_str,0,strlen(n_e_raw_err_str)-2)
printf,1,n_e_raw_err_str
printf,1,''
printf,1,';Density of electrons, radial position for smoothed data'
printf,1,'n_e_r:'
form='('+strtrim(string(n_elements(n_e_r)),2)+'(F6.4,", "))'
n_e_r_str=string(n_e_r,format=form)
n_e_r_str=strmid(n_e_r_str,0,strlen(n_e_r_str)-2)
printf,1,n_e_r_str
printf,1,''
printf,1,';Density of electrons, smoothed data, cm-3'
printf,1,'n_e:'
form='('+strtrim(string(n_elements(n_e)),2)+'(G10.4,", "))'
n_e_str=string(n_e,format=form)
n_e_str=strmid(n_e_str,0,strlen(n_e_str)-2)
printf,1,n_e_str
printf,1,''
printf,1,';Density of electrons, errors of the smoothed data, cm-3'
printf,1,'n_e_err:'
form='('+strtrim(string(n_elements(n_e_err)),2)+'(G10.4,", "))'
n_e_err_str=string(n_e_err,format=form)
n_e_err_str=strmid(n_e_err_str,0,strlen(n_e_err_str)-2)
printf,1,n_e_err_str

;Save 1D electron temperature profile
;t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
printf,1,''
printf,1,';Radial coordinate for electron temperatures, 0 - r_major (m), 1 - rho=sqrt(psi), 2 - rho=sqrt(phi)'
printf,1,'t_e_coord:'
printf,1, strtrim(string(t_e_coord,format='(I10)'),2)
printf,1,''
printf,1,';Temperature of electrons, radial position for raw data'
printf,1,'t_e_raw_r:'
form='('+strtrim(string(n_elements(t_e_raw_r)),2)+'(F6.4,", "))'
t_e_raw_r_str=string(t_e_raw_r,format=form)
t_e_raw_r_str=strmid(t_e_raw_r_str,0,strlen(t_e_raw_r_str)-2)
printf,1,t_e_raw_r_str
printf,1,''
printf,1,';Temperature of electrons, raw data, keV'
printf,1,'t_e_raw:'
form='('+strtrim(string(n_elements(t_e_raw)),2)+'(F6.4,", "))'
t_e_raw_str=string(t_e_raw,format=form)
t_e_raw_str=strmid(t_e_raw_str,0,strlen(t_e_raw_str)-2)
printf,1,t_e_raw_str
printf,1,''
printf,1,';Temperature of electrons, errors of the raw data, keV'
printf,1,'t_e_raw_err:'
form='('+strtrim(string(n_elements(t_e_raw_err)),2)+'(F6.4,", "))'
t_e_raw_err_str=string(t_e_raw_err,format=form)
t_e_raw_err_str=strmid(t_e_raw_err_str,0,strlen(t_e_raw_err_str)-2)
printf,1,t_e_raw_err_str
printf,1,''
printf,1,';Temperature of electrons, radial position for smoothed data'
printf,1,'t_e_r:'
form='('+strtrim(string(n_elements(t_e_r)),2)+'(F6.4,", "))'
t_e_r_str=string(t_e_r,format=form)
t_e_r_str=strmid(t_e_r_str,0,strlen(t_e_r_str)-2)
printf,1,t_e_r_str
printf,1,''
printf,1,';Temperature of electrons, smoothed data, keV'
printf,1,'t_e:'
form='('+strtrim(string(n_elements(t_e)),2)+'(F6.4,", "))'
t_e_str=string(t_e,format=form)
t_e_str=strmid(t_e_str,0,strlen(t_e_str)-2)
printf,1,t_e_str
printf,1,''
printf,1,';Temperature of electrons, errors of the smoothed data, keV'
printf,1,'t_e_err:'
form='('+strtrim(string(n_elements(t_e_err)),2)+'(F6.4,", "))'
t_e_err_str=string(t_e_err,format=form)
t_e_err_str=strmid(t_e_err_str,0,strlen(t_e_err_str)-2)
printf,1,t_e_err_str



;Save 1D z_eff  profiles
;z_eff_raw,z_eff_raw_err,z_eff_raw_r,z_eff,z_eff_err,z_eff_r,z_eff_arr,z_eff_err_arr
printf,1,''
printf,1,';Radial coordinate for effective charge, 0 - r_major (m), 1 - rho=sqrt(psi), 2 - rho=sqrt(phi)'
printf,1,'z_ef_coord:'
printf,1, strtrim(string(z_eff_coord,format='(I10)'),2)
printf,1,''
printf,1,';Effective Charge Z_Eff, radial position for raw data'
printf,1,'z_eff_raw_r:'
form='('+strtrim(string(n_elements(z_eff_raw_r)),2)+'(F6.4,", "))'
z_eff_raw_r_str=string(z_eff_raw_r,format=form)
z_eff_raw_r_str=strmid(z_eff_raw_r_str,0,strlen(z_eff_raw_r_str)-2)
printf,1,z_eff_raw_r_str
printf,1,''
printf,1,';Effective Charge. Z_eff, raw data'
printf,1,'z_eff_raw:'
form='('+strtrim(string(n_elements(z_eff_raw)),2)+'(F6.4,", "))'
z_eff_raw_str=string(z_eff_raw,format=form)
z_eff_raw_str=strmid(z_eff_raw_str,0,strlen(z_eff_raw_str)-2)
printf,1,z_eff_raw_str
printf,1,''
printf,1,';Effective Charge Z_Eff, errors of the raw data'
printf,1,'z_eff_raw_err:'
form='('+strtrim(string(n_elements(z_eff_raw_err)),2)+'(F6.4,", "))'
z_eff_raw_err_str=string(z_eff_raw_err,format=form)
z_eff_raw_err_str=strmid(z_eff_raw_err_str,0,strlen(z_eff_raw_err_str)-2)
printf,1,z_eff_raw_err_str
printf,1,''
printf,1,';Effective Charge Z_Eff, radial position for smoothed data'
printf,1,'z_eff_r:'
form='('+strtrim(string(n_elements(z_eff_r)),2)+'(F6.4,", "))'
z_eff_r_str=string(z_eff_r,format=form)
z_eff_r_str=strmid(z_eff_r_str,0,strlen(z_eff_r_str)-2)
printf,1,z_eff_r_str
printf,1,''
printf,1,';Effective Charge Z_Eff, smoothed data'
printf,1,'z_eff:'
form='('+strtrim(string(n_elements(z_eff)),2)+'(F6.4,", "))'
z_eff_str=string(z_eff,format=form)
z_eff_str=strmid(z_eff_str,0,strlen(z_eff_str)-2)
printf,1,z_eff_str
printf,1,''
printf,1,';Effective Charge Z_Eff, errors of the smoothed data'
printf,1,'z_eff_err:'
form='('+strtrim(string(n_elements(z_eff_err)),2)+'(F6.4,", "))'
z_eff_err_str=string(z_eff_err,format=form)
z_eff_err_str=strmid(z_eff_err_str,0,strlen(z_eff_err_str)-2)
printf,1,z_eff_err_str


printf,1,''
printf,1,'End of file:'
close,1

end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which saves the run settings to the
;*.aset file.
;-------------------------------------------------------------------------------------------------------------------------
pro save_set_to_file
;The following common block contains some of the settings of "saving
;parameters to the file"
common settings_file, save_set_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration
;calculation 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,$
ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
;The following common block contains some of the settings of how to
;run the beam attenuation and penetration calculation.
common run_settings, div_type,div_type_names,atten_type, atten_type_names, vel_dis_type,vel_dis_names,save_output_type,save_output_file
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation. flux_surf_arr_type parameter defines which way to
;construct 3D rho array.
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type

;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err 

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------


close,1
openw,1,save_set_file

printf,1,';Run Settings for ALCBEAM code'
printf,1,'----------------------------------'
printf,1,''
printf,1,';File is created on:'
printf,1, systime()
printf,1,';File is created by:'
printf,1, 'ALCBEAM (ver. '+alcbeam_ver+')'

;Saving load_settings
;load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,ne_type,$
;ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
printf,1,''
printf,1,';Load choice'
printf,1,'load_choice:'
printf,1,strtrim(string(load_choice,format='(I10)'),1)
printf,1,''
printf,1,';General type'
printf,1,'general_type:'
printf,1,strtrim(string(general_type,format='(I10)'),1)
printf,1,''
printf,1,';General file'
printf,1,'general_file:'
printf,1,general_file
printf,1,''
printf,1,';Beam geometry type'
printf,1,'beam_geom_type:'
printf,1,strtrim(string(beam_geom_type,format='(I10)'),1)
printf,1,''
printf,1,';Beam geometry file'
printf,1,'beam_geom_file:'
printf,1,beam_geom_file
printf,1,''
printf,1,';Beam limiters type'
printf,1,'beam_lim_type:'
printf,1,strtrim(string(beam_lim_type,format='(I10)'),1)
printf,1,''
printf,1,';Beam limiters file'
printf,1,'beam_lim_file:'
printf,1,beam_lim_file
printf,1,''
printf,1,';Beam parameters type'
printf,1,'beam_param_type:'
printf,1,strtrim(string(beam_param_type,format='(I10)'),1)
printf,1,''
printf,1,';Beam parameters file'
printf,1,'beam_param_file:'
printf,1,beam_param_file
printf,1,''
printf,1,';Electron density type'
printf,1,'ne_type:'
printf,1,strtrim(string(ne_type,format='(I10)'),1)
printf,1,''
printf,1,';Electron density file'
printf,1,'ne_file:'
printf,1,ne_file
printf,1,''
printf,1,';Electron temperature type'
printf,1,'te_type:'
printf,1,strtrim(string(te_type,format='(I10)'),1)
printf,1,''
printf,1,';Electron temperature file'
printf,1,'te_file:'
printf,1,te_file
printf,1,''
printf,1,';Effective charge type'
printf,1,'z_eff_type:'
printf,1,strtrim(string(z_eff_type,format='(I10)'),1)
printf,1,''
printf,1,';Effective charge file'
printf,1,'z_eff_file:'
printf,1,z_eff_file
printf,1,''
printf,1,';Plasma geometry type'
printf,1,'plasma_geom_type:'
printf,1,strtrim(string(plasma_geom_type,format='(I10)'),1)
printf,1,''
printf,1,';Plasma geometry file'
printf,1,'plasma_geom_file:'
printf,1,plasma_geom_file
printf,1,''
printf,1,';Gas parameters type'
printf,1,'gas_type:'
printf,1,strtrim(string(gas_type,format='(I10)'),1)
printf,1,''
printf,1,';Gas parameters file'
printf,1,'gas_file:'
printf,1,gas_file
printf,1,''
printf,1,';Calculation drig type'
printf,1,'grid_type:'
printf,1,strtrim(string(grid_type,format='(I10)'),1)
printf,1,''
printf,1,';Calculation grid  file'
printf,1,'grid_file:'
printf,1,grid_file
printf,1,''
printf,1,';Plasma parameters type'
printf,1,'plasma_param_type:'
printf,1,strtrim(string(plasma_param_type,format='(I10)'),1)
printf,1,''
printf,1,';Plasma parameters file'
printf,1,'plasma_param_file:'
printf,1,plasma_param_file
printf,1,''

;Saving construct settings
;flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
;exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type

printf,1,''
printf,1,';Flux surface names'
printf,1,'flux_surf_names:'
form='('+strtrim(string(n_elements(flux_surf_names)),2)+'(A-,", "))'
str=string(transpose(flux_surf_names),format=form)
str=strmid(str,0,strlen(str)-2)
printf,1,str
printf,1,''
printf,1,';Flux surface array type'
printf,1,'flux_surf_arr_type:'
printf,1,strtrim(string(flux_surf_arr_type,format='(I10)'),1)
printf,1,''
printf,1,';Electron density array type'
printf,1,'ne_arr_type:'
printf,1,strtrim(string(ne_arr_type,format='(I10)'),1)
printf,1,''
printf,1,';Electron temperature array type'
printf,1,'te_arr_type:'
printf,1,strtrim(string(te_arr_type,format='(I10)'),1)
printf,1,''
printf,1,';Effective charge array type'
printf,1,'z_eff_arr_type:'
printf,1,strtrim(string(z_eff_arr_type,format='(I10)'),1)
printf,1,''
printf,1,';Plasma beam stoping cross section type'
printf,1,'stop_plasma_type:'
printf,1,strtrim(string(stop_plasma_type,format='(I10)'),1)
printf,1,''
printf,1,';Plasma beam stoppting cross section names'
printf,1,'stop_plasma_type_names:'
form='('+strtrim(string(n_elements(stop_plasma_type_names)),2)+'(A-,", "))'
str=string(transpose(stop_plasma_type_names),format=form)
str=strmid(str,0,strlen(str)-2)
printf,1,str
printf,1,''
printf,1,';Plasma beam excitation cross section type'
printf,1,'exc_plasma_type:'
printf,1,strtrim(string(exc_plasma_type,format='(I10)'),1)
printf,1,''
printf,1,';Plasma beam excitation cross section names'
printf,1,'exc_plasma_type_names:'
form='('+strtrim(string(n_elements(exc_plasma_type_names)),2)+'(A-,", "))'
str=string(transpose(exc_plasma_type_names),format=form)
str=strmid(str,0,strlen(str)-2)
printf,1,str
printf,1,''
printf,1,';Gas density arr type'
printf,1,'gas_arr_type:'
printf,1,strtrim(string(gas_arr_type,format='(I10)'),1)
printf,1,''
printf,1,';Beam gas stopping cross section type'
printf,1,'stop_gas_type:'
printf,1,strtrim(string(stop_gas_type,format='(I10)'),1)
printf,1,''
printf,1,';Limiters arr type'
printf,1,'lim_arr_type:'
printf,1,strtrim(string(lim_arr_type,format='(I10)'),1)
printf,1,''
printf,1,';Used grid aperture names'
printf,1,'grid_aper_names:'
form='('+strtrim(string(n_elements(grid_aper_names)),2)+'(A-,", "))'
str=string(transpose(grid_aper_names),format=form)
str=strmid(str,0,strlen(str)-2)
printf,1,str
printf,1,''
printf,1,';Used grid aperture type'
printf,1,'grid_aper_type:'
printf,1,strtrim(string(grid_aper_type,format='(I10)'),1)
printf,1,''

;Save run settings
;div_type,div_type_names,atten_type, atten_type_names, vel_dis_type,vel_dis_names,save_output_type,save_output_file
printf,1,''
printf,1,';Divergence model type'
printf,1,'div_type:'
printf,1,strtrim(string(div_type,format='(I10)'),1)
printf,1,''
printf,1,';Divergence model names'
printf,1,'div_type_names:'
form='('+strtrim(string(n_elements(div_type_names)),2)+'(A-,", "))'
str=string(transpose(div_type_names),format=form)
str=strmid(str,0,strlen(str)-2)
printf,1,str
printf,1,''
printf,1,';Attenuation model type'
printf,1,'atten_type:'
printf,1,strtrim(string(atten_type,format='(I10)'),1)
printf,1,''
printf,1,';Attenuation model names'
printf,1,'atten_type_names:'
form='('+strtrim(string(n_elements(atten_type_names)),2)+'(A-,", "))'
str=string(transpose(atten_type_names),format=form)
str=strmid(str,0,strlen(str)-2)
printf,1,str
printf,1,''
printf,1,';Calculate velocity distribution'
printf,1,'vel_dis_type:'
printf,1,strtrim(string(vel_dis_type,format='(I10)'),1)
printf,1,''
printf,1,';Calculate velocity distribution names'
printf,1,'vel_dis_names:'
form='('+strtrim(string(n_elements(vel_dis_names)),2)+'(A-,", "))'
str=string(transpose(vel_dis_names),format=form)
str=strmid(str,0,strlen(str)-2)
printf,1,str
printf,1,''
printf,1,';Save output type'
printf,1,'save_output_type:'
printf,1,strtrim(string(save_output_type,format='(I10)'),1)
printf,1,''
printf,1,';Save output filename'
printf,1,'save_output_file:'
printf,1,save_output_file
printf,1,''

printf,1,''
printf,1,'End of file:'
close,1

end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which load the settings from *.aset file.
;-------------------------------------------------------------------------------------------------------------------------
Pro load_set_from_file
;The following common block contains some of the settings of "saving
;parameters to the file"
common settings_file, save_set_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration
;calculation. ;The following common block contains the name of the input file from which the input
;data is extracted 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,$
ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
;The following common block contains some of the settings of how to
;run the beam attenuation and penetration calculation.
common run_settings, div_type,div_type_names,atten_type, atten_type_names, vel_dis_type,vel_dis_names,save_output_type,save_output_file
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation. flux_surf_arr_type parameter defines which way to
;construct 3D rho array.
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_typ
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err 

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------

val='template'
close,1
st=0

file=file_search(save_set_file)
if file(0) eq "" then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The '+save_set_file+' does not exist']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
  return
endif
openr,1,save_set_file
vel_dis_type=1
while ~EOF(1) do begin

readf,1,val

;Load load_settings
;load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,ne_type,ne_file,te_type,$
;te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file

if val eq 'load_choice:' then begin 
  readf,1,val
  load_choice=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'general_type:' then begin 
  readf,1,val
  general_type=strtrim(val,2)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'general_file:' then begin 
  readf,1,val
  general_file=strtrim(val,2)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'beam_geom_type:' then begin 
  readf,1,val
  beam_geom_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'beam_geom_file:' then begin 
  readf,1,val
  beam_geom_file=strtrim(val,2)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'beam_lim_type:' then begin 
  readf,1,val
  beam_lim_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'beam_lim_file:' then begin 
  readf,1,val
  beam_lim_file=strtrim(val,2)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'beam_param_type:' then begin 
  readf,1,val
  beam_param_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'beam_param_file:' then begin 
  readf,1,val
  beam_param_file=strtrim(val,2)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'ne_type:' then begin 
  readf,1,val
  ne_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'ne_file:' then begin 
  readf,1,val
  ne_file=strtrim(val,2)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'te_type:' then begin 
  readf,1,val
  te_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'te_file:' then begin 
  readf,1,val
  te_file=strtrim(val,2)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_eff_type:' then begin 
  readf,1,val
  z_eff_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_eff_file:' then begin 
  readf,1,val
  z_eff_file=strtrim(val,2)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'plasma_geom_type:' then begin 
  readf,1,val
  plasma_geom_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'plasma_geom_file:' then begin 
  readf,1,val
  plsama_geom_file=strtrim(val,2)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'gas_type:' then begin 
  readf,1,val
  gas_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'gas_file:' then begin 
  readf,1,val
  gas_file=strtrim(val,2)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'grid_type:' then begin 
  readf,1,val
  grid_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'grid_file:' then begin 
  readf,1,val
  grid_file=strtrim(val,2)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'plasma_param_type:' then begin 
  readf,1,val
  plasma_param_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'plasma_param_file:' then begin 
  readf,1,val
  plsama_param_file=strtrim(val,2)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif


;load construct_settings 
;flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, exc_plasma_type_names,$
;gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_typ

if val eq 'flux_surf_names:' then begin 
  readf,1,val
  flux_surf_names=transpose(strsplit(val,', ',/extract,/regex))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'flux_surf_arr_type:' then begin 
  readf,1,val
  flux_surf_arr_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'ne_arr_type:' then begin 
  readf,1,val
  ne_arr_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'te_arr_type:' then begin 
  readf,1,val
  te_arr_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_eff_arr_type:' then begin 
  readf,1,val
  z_eff_arr_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'stop_plasma_type:' then begin 
  readf,1,val
  stop_plasma_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'stop_plasma_type_names:' then begin 
  readf,1,val
  stop_plasma_type_names=transpose(strsplit(val,', ',/extract,/regex))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'exc_plasma_type:' then begin 
  readf,1,val
  exc_plasma_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'exc_plasma_type_names:' then begin 
  readf,1,val
  exc_plasma_type_names=transpose(strsplit(val,', ',/extract,/regex))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'gas_arr_type:' then begin 
  readf,1,val
  gas_arr_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'stop_gas_type:' then begin 
  readf,1,val
  stop_gas_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'lim_arr_type:' then begin 
  readf,1,val
  lim_arr_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'grid_aper_names:' then begin 
  readf,1,val
  grid_aper_names=transpose(strsplit(val,', ',/extract,/regex))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'grid_aper_type:' then begin 
  readf,1,val
  grid_aper_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif


;load run_settings
;div_type,div_type_names,atten_type, atten_type_names, vel_dis_type,vel_dis_names,save_output_type,save_output_file
if val eq 'div_type:' then begin 
  readf,1,val
  div_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'div_type_names:' then begin 
  readf,1,val
  div_type_names=transpose(strsplit(val,', ',/extract,/regex))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'atten_type:' then begin 
  readf,1,val
  atten_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'atten_type_names:' then begin 
  readf,1,val
  atten_type_names=transpose(strsplit(val,', ',/extract,/regex))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'vel_dis_type:' then begin 
  readf,1,val
  vel_dis_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'vel_dis_names:' then begin 
  readf,1,val
  vel_dis_names=transpose(strsplit(val,', ',/extract,/regex))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'save_output_type:' then begin 
  readf,1,val
  save_output_type=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'save_output_file:' then begin 
  readf,1,val
  save_output_file=strtrim(val,2)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif

endwhile
if st lt 43 then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Full set of run settings is missing in the file']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
endif

close,1

end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which load the general parameters from *.abi input file.
;-------------------------------------------------------------------------------------------------------------------------
Pro load_general_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration
;calculation. ;The following common block contains the name of the input file from which the input
;data is extracted 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,$
ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err 

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------

val='template'
close,1
st=0

file=file_search(general_file)
if file(0) eq "" then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The '+general_file+' does not exist']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
  return
endif
openr,1,general_file

while ~EOF(1) do begin

readf,1,val

;load general info

if val eq 'beam:' then begin 
  readf,1,val
  beam=strtrim(val,2)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'shot:' then begin 
  readf,1,val
  shot=strtrim(val,2)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'time_interv:' then begin 
  readf,1,val
  time_interv=float(strsplit(val,', ',/extract))
  t1=time_interv(0)
  t2=time_interv(1)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
endwhile
if st ne 3 then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Full set of general input parameters is missing in the file']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
endif

close,1

end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which load the plasma parameters from *.abi input file.
;-------------------------------------------------------------------------------------------------------------------------
Pro load_plasma_param_file
;The following common block contains the parameters which describe
;some relative  global parameters of the plasma 
common plasma_param, main_ion,n_impur,impur_table
;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration
;calculation. ;The following common block contains the name of the input file from which the input
;data is extracted 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,$
ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err 
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------

val='template'
close,1
st=0

file=file_search(plasma_param_file)
if file(0) eq "" then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The '+plasma_param_file+' does not exist']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
  return
endif
openr,1,plasma_param_file

while ~EOF(1) do begin

readf,1,val

;Load plasma parameters
if val eq 'main_ion:' then begin 
  readf,1,val
  main_ion=strtrim(val,1)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'n_impur:'then begin 
  readf,1,val
  n_impur=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'impur_table:'then begin 
  readf,1,val
  if n_impur gt 0 or n_impur le 7 then begin
    impur_table=strarr(n_impur,3)
    for i=0, 2 do begin
      readf,1,val
      impur_table(*,i)=strtrim(((strsplit(val,':',/extract,/regex)))(1:*),2)
    endfor
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
  endif
endif
endwhile
if st ne 3 then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Full set of plasma parameters is missing in the file']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
endif

close,1

end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which load the beam limiter parameters from *.abi input file.
;-------------------------------------------------------------------------------------------------------------------------
Pro load_beam_lim_file
;The following common block contains the parameters which describe the
;positions and sizes of the beam limiters.
common beam_limiters, n_limiters, limiters_table,limiters_arr
;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration
;calculation. ;The following common block contains the name of the input file from which the input
;data is extracted 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,$
ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err 
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------

val='template'
close,1
st=0

file=file_search(beam_lim_file)
if file(0) eq "" then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The '+beam_lim_file+' does not exist']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
  return
endif
openr,1,beam_lim_file

while ~EOF(1) do begin

readf,1,val

;Load beam limiters
if val eq 'n_limiters:'then begin 
  readf,1,val
  n_limiters=fix(val)
 if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif

if val eq 'limiters_table:'then begin 
  readf,1,val
  readf,1,val
  lim_l=n_elements(strsplit(val,':',/extract))
  readf,1,val
  if n_limiters eq 0 then limiters_table='' else begin
    limiters_table=strarr(7,n_limiters)
    limiters_table(*,*)='NAN'
    for i=0, n_limiters-1 do begin
      readf,1,val
      limiters_table(0:lim_l-1,i)=(strsplit(val,':   ',/extract,/regex))
    endfor
  endelse
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
endwhile
if st ne 2 then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Full set of beam limiters parameters is missing in the file']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
endif

close,1

end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which load copy of the general parameters from *.abo output
;file to preview them
;-------------------------------------------------------------------------------------------------------------------------
Pro load_general_temp,file_name,beam_val,shot_val,run_time_ver,t1_val,t2_val,div_type_val,atten_type_val,vel_dis_type_val,stop_plsm_cs,exc_plsm_cs
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------

val='template'
close,1
openr,1,file_name
vel_dis_type_val='NO'

while ~EOF(1) do begin

readf,1,val

;load general info

if val eq ';File is created on:' then begin 
  readf,1,val
  run_time=strtrim(val,2)
endif
if val eq ';File is created by:' then begin 
  readf,1,val
  run_ver=strtrim(val,2)
endif
if val eq 'beam:' then begin 
  readf,1,val
  beam_val=strtrim(val,2)
endif
if val eq 'shot:' then begin 
  readf,1,val
  shot_val=strtrim(val,2)
endif
if val eq 'time_interv:' then begin 
  readf,1,val
  time_interv=strsplit(val,', ',/extract)
  t1_val=time_interv(0)
  t2_val=time_interv(1)
endif
if val eq 'div_type:' then begin 
  readf,1,val
  div_type_val=strtrim(val,2)
endif
if val eq 'atten_type:' then begin 
  readf,1,val
  atten_type_val=strtrim(val,2)
endif
if val eq 'vel_dis_type:' then begin 
  readf,1,val
  vel_dis_type_val=strtrim(val,2)
endif
if val eq 'stop_plsm_cs:' then begin 
  readf,1,val
  stop_plsm_cs=strtrim(val,2)
endif
if val eq 'exc_plsm_cs:' then begin 
  readf,1,val
  exc_plsm_cs=strtrim(val,2)
endif

endwhile
if n_elements(run_ver) eq 0 then run_time_ver=[run_time,'(ver. ???)'] else run_time_ver=[run_time,run_ver]
close,1

end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which load the parameters and output data arrays from *.abo output file.
;-------------------------------------------------------------------------------------------------------------------------
Pro load_output_data_file,file_name
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for calculation.
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution)
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
;The following common block contains neutral gas parameters used in
;calculation of the beam attenuation in the gas.
common neutral_gas,tank_pressure,torus_pressure,duct_pressure,duct_pressure_loc,n0_arr,n0_stop_cross_section
;The following common block contains X,Y,Z coordinate arrays used for the beam
;calculation grid and output 3D arrays of the beam density and excitation fracitons
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following common block contains the parameters which describe the geometry
;and position of the machine plasma
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower
;The following common block contains the parameters which describe
;some relative  global parameters of the plasma 
common plasma_param, main_ion,n_impur,impur_table
;The following common block contains the table of the parameters which
;defile the 3D spatial grid which used for calculation
common grid_arr, code_grid_arr
;The following common block contains the parameters which describe the
;positions and sizes of the beam limiters.
common beam_limiters, n_limiters, limiters_table,limiters_arr
;The following common block contains 1D n_e profiles of raw and smoothed data, and 3D
;n_e array after it constructed.
common dens_electrons,n_e_coord,n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr,ne_stop_cross_section
;The following common block contains 1D t_e profiles of raw and smoothed data, and 3D
;t_e array after it constructed.
common temp_electrons,t_e_coord,t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
;The following common block contains 1D z_eff profiles of raw and smoothed data, and 3D
;z_eff array after it constructed.
common effective_charge, z_eff_coord, z_eff_raw,z_eff_raw_err,z_eff_raw_r,z_eff,z_eff_err,z_eff_r,z_eff_arr,z_eff_err_arr
;The following common block contains some of the settings of how to
;run the beam attenuation and penetration calculation. ;The following
;common block contains the name of the output save file
common run_settings, div_type,div_type_names,atten_type, atten_type_names, vel_dis_type,vel_dis_names,save_output_type,save_output_file
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation.
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------

beam_atom='H';default
val='template'
close,1
openr,1,file_name
st=0
;put 0 for duct pressure
duct_pressure=0.0
duct_pressure_loc=0.0
;put default for tank_diam,neutr_diam and magnet_diam for older files
tank_diam=1.0
magnet_diam=0.2
neutr_diam=0.2
neutr_front_dist=0.0

vel_dis_type=1 ;default
vel_vec_coef=0
vel_vec_x=0
vel_vec_y=0
n_e_coord = 0
t_e_coord = 0
z_eff_coord = 0
beam_port_phi = 0.0

while ~EOF(1) do begin

readf,1,val

;load general info

if val eq 'beam:' then begin 
  readf,1,val
  beam=strtrim(val,2)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'shot:' then begin 
  readf,1,val
  shot=strtrim(val,2)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'time_interv:' then begin 
  readf,1,val
  time_interv=float(strsplit(val,', ',/extract))
  t1=time_interv(0)
  t2=time_interv(1)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'div_type:' then begin 
  readf,1,val
  div_type_val=strtrim(val,2)
  div_type=where(strtrim(div_type_names,2) eq div_type_val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'atten_type:' then begin 
  readf,1,val
  atten_type_val=strtrim(val,2)
  atten_type=where(strtrim(atten_type_names,2) eq atten_type_val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'vel_dis_type:' then begin 
  readf,1,val
  vel_dis_type_val=strtrim(val,2)
  vel_dis_type=where(strtrim(vel_dis_names,2) eq vel_dis_type_val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'stop_plsm_cs:' then begin 
  readf,1,val
  stop_plasma_type_val=strtrim(val,2)
  stop_plasma_type=where(strtrim(stop_plasma_type_names,2) eq stop_plasma_type_val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'exc_plsm_cs:' then begin 
  readf,1,val
  exc_plasma_type_val=strtrim(val,2)
  exc_plasma_type=where(strtrim(exc_plasma_type_names,2) eq exc_plasma_type_val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif

;load beam geometry
if val eq 'x_bml:' then begin 
  readf,1,val
  x_bml=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'y_bml:' then begin 
  readf,1,val
  y_bml=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'grid_ap_diam:' then begin 
  readf,1,val
  grid_ap_diam=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'beam_port_phi:' then begin 
  readf,1,val
  beam_port_phi=float(val)
endif
if val eq 'beam_port:' then begin 
  readf,1,val
  beam_port=val
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'grid_focus:' then begin 
  readf,1,val
  x_grid_focus=float(val)
  y_grid_focus=x_grid_focus
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'x_grid_focus:' then begin 
  readf,1,val
  x_grid_focus=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'y_grid_focus:' then begin 
  readf,1,val
  y_grid_focus=float(val)
endif
if val eq 'tank_front_dist:' then begin 
  readf,1,val
  tank_front_dist=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'tank_size:' then begin 
  readf,1,val
  tank_size=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'tank_diam:' then begin 
  readf,1,val
  tank_diam=float(val)
endif
if val eq 'neutr_front_dist:' then begin 
  readf,1,val
  neutr_front_dist=float(val)
endif
if val eq 'neutr_size:' then begin 
  readf,1,val
  neutr_size=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'neutr_diam:' then begin 
  readf,1,val
  neutr_diam=float(val)
endif
if val eq 'tank_magnet_dist:' then begin 
  readf,1,val
  tank_magnet_dist=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'magnet_size:' then begin 
  readf,1,val
  magnet_size=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'magnet_diam:' then begin 
  readf,1,val
  magnet_diam=float(val)
endif
if val eq 'tank_cal_dist:' then begin 
  readf,1,val
  tank_cal_dist=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'r_grid:' then begin 
  readf,1,val
  R_grid=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_grid:' then begin 
  readf,1,val
  z_grid=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'phi_grid:' then begin 
  readf,1,val
  phi_grid=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'r_wall:' then begin 
  readf,1,val
  R_wall=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_wall:' then begin 
  readf,1,val
  z_wall=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'phi_wall:' then begin 
  readf,1,val
  phi_wall=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif

;load beam parameters
if val eq 'beam_atom:' then begin 
  readf,1,val
  beam_atom=strtrim(val,2)
endif
if val eq 'e_full:' then begin 
  readf,1,val
  e_full=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'e_frac:' then begin 
  readf,1,val
  e_frac=float(strsplit(val,', ',/extract))
  e_beam=e_full*e_frac
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'i_beam:' then begin 
  readf,1,val
  i_beam=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'i_frac:' then begin 
  readf,1,val
  I_frac=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'i_dens_par:' then begin 
  readf,1,val
  i_dens_par=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'i_opt:' then begin 
  readf,1,val
  i_opt=float(val)
endif
if val eq 'div_bml_opt:' then begin 
  readf,1,val
  x_div_bml_opt=float(val)
  y_div_bml_opt=x_div_bml_opt
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'x_div_bml_opt:' then begin 
  readf,1,val
  x_div_bml_opt=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'y_div_bml_opt:' then begin 
  readf,1,val
  y_div_bml_opt=float(val)
endif
if val eq 'div_dist_par:' then begin 
  readf,1,val
  div_dist_par=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif

;Load beam limiters
if val eq 'n_limiters:'then begin 
  readf,1,val
  n_limiters=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'limiters_table:'then begin 
  readf,1,val
  readf,1,val
  lim_l=n_elements(strsplit(val,':',/extract))
  readf,1,val
  if n_limiters eq 0 then limiters_table='' else begin
    limiters_table=strarr(7,n_limiters)
    limiters_table(*,*)='NAN'
    for i=0, n_limiters-1 do begin
      readf,1,val
      limiters_table(0:lim_l-1,i)=(strsplit(val,':   ',/extract,/regex))
    endfor
  endelse
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif

;Load neutral gas
if val eq 'tank_pressure:' then begin 
  readf,1,val
  tank_pressure=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'torus_pressure:' then begin 
  readf,1,val
  torus_pressure=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'duct_pressure:' then begin 
  readf,1,val
  duct_pressure=float(val)
endif
if val eq 'duct_pressure_loc:' then begin 
  readf,1,val
  duct_pressure_loc=float(val)
endif

;Load plasma geometry
if val eq 'r_major:' then begin 
  readf,1,val
  r_major=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_major:' then begin 
  readf,1,val
  z_major=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'r_minor:' then begin 
  readf,1,val
  r_minor=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'elong:' then begin 
  readf,1,val
  elong=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'triang_upper:' then begin 
  readf,1,val
  triang_upper=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'triang_lower:' then begin 
  readf,1,val
  triang_lower=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif

;Load plasma parameters
if val eq 'main_ion:' then begin 
  readf,1,val
  main_ion=strtrim(val,1)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'n_impur:'then begin 
  readf,1,val
  n_impur=fix(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'impur_table:'then begin 
  readf,1,val
  if n_impur gt 0 or n_impur le 7 then begin
    impur_table=strarr(n_impur,3)
    for i=0, 2 do begin
      readf,1,val
      impur_table(*,i)=strtrim(((strsplit(val,':',/extract,/regex)))(1:*),2)
    endfor
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
  endif
endif

; load calculation grid info
if val eq 'code_grid_arr.Z:' then begin 
  readf,1,val
  code_grid_arr.z=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'code_grid_arr.X:' then begin 
  readf,1,val
  code_grid_arr.x=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'code_grid_arr.Y:' then begin 
  readf,1,val
  code_grid_arr.y=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif

;load used input profiles electron density
if val eq 'n_e_coord:' then begin 
  readf,1,val
  n_e_coord=int(val)
endif
if val eq 'n_e_raw_r:' then begin 
  readf,1,val
  n_e_raw_r=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'n_e_raw:' then begin 
  readf,1,val
  n_e_raw=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'n_e_raw_err:' then begin 
  readf,1,val
  n_e_raw_err=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'n_e_r:' then begin 
  readf,1,val
  n_e_r=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'n_e:' then begin 
  readf,1,val
  n_e=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'n_e_err:' then begin 
  readf,1,val
  n_e_err=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif


;load used input profiles electron temperature
if val eq 't_e_coord:' then begin 
  readf,1,val
  t_e_coord=int(val)
endif
if val eq 't_e_raw_r:' then begin 
  readf,1,val
  t_e_raw_r=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 't_e_raw:' then begin 
  readf,1,val
  t_e_raw=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 't_e_raw_err:' then begin 
  readf,1,val
  t_e_raw_err=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 't_e_r:' then begin 
  readf,1,val
  t_e_r=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 't_e:' then begin 
  readf,1,val
  t_e=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 't_e_err:' then begin 
  readf,1,val
  t_e_err=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif

;load input profiles of Z_eff
if val eq 'z_eff_coord:' then begin 
  readf,1,val
  z_eff_coord=int(val)
endif
if val eq 'z_eff_raw_r:' then begin 
  readf,1,val
  z_eff_raw_r=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_eff_raw:' then begin 
  readf,1,val
  z_eff_raw=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_eff_raw_err:' then begin 
  readf,1,val
  z_eff_raw_err=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_eff_r:' then begin 
  readf,1,val
  z_eff_r=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_eff:' then begin 
  readf,1,val
  z_eff=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_eff_err:' then begin 
  readf,1,val
  z_eff_err=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif


;Load output data 
if val eq 'e_beam:' then begin
  readf,1,val
  e_beam=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_beam:' then begin 
  readf,1,val
  z_beam=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'x_beam:' then begin 
  readf,1,val
  x_beam=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'y_beam:' then begin 
  readf,1,val
  y_beam=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'n_beam:' then begin 
  n_ebeam=n_elements(e_beam) 
  n_z=n_elements(z_beam)
  n_x=n_elements(x_beam)
  n_y=n_elements(y_beam) 
  n_beam=fltarr(n_ebeam,n_z,n_x,n_y)
  readu,1,n_beam
  if n_elements(n_beam) gt 100 then st=st+1
endif
if val eq 'exc_n2_frac:' then begin  
  n_z=n_elements(z_beam)
  n_x=n_elements(x_beam)
  n_y=n_elements(y_beam) 
  exc_n2_frac=fltarr(n_ebeam,n_z,n_x,n_y)
  readu,1,exc_n2_frac
  if n_elements(exc_n2_frac) gt 100 then st=st+1
endif
if val eq 'exc_n3_frac:' then begin  
  n_z=n_elements(z_beam)
  n_x=n_elements(x_beam)
  n_y=n_elements(y_beam) 
  exc_n3_frac=fltarr(n_ebeam,n_z,n_x,n_y)
  readu,1,exc_n3_frac
  if n_elements(exc_n2_frac) gt 100 then st=st+1
endif
if val eq 'vel_vec_x:' then begin
  n_bml=n_elements(x_bml)  
  n_x=n_elements(x_beam)
  n_y=n_elements(y_beam) 
  vel_vec_x=fltarr(n_x,n_y,n_bml)
  readu,1,vel_vec_x
  if n_elements(vel_vec_x) gt 100 then st=st+1
endif
if val eq 'vel_vec_y:' then begin
  n_bml=n_elements(x_bml)  
  n_x=n_elements(x_beam)
  n_y=n_elements(y_beam) 
  vel_vec_y=fltarr(n_x,n_y,n_bml)
  readu,1,vel_vec_y
  if n_elements(vel_vec_y) gt 100 then st=st+1
endif
if val eq 'vel_vec_coef:' then begin
  n_ebeam=n_elements(e_beam)  
  n_z=n_elements(z_beam)
  n_x=n_elements(x_beam)
  n_y=n_elements(y_beam) 
  vel_vec_coef=fltarr(n_ebeam,n_z,n_x,n_y,9)
  readu,1,vel_vec_coef
  if n_elements(vel_vec_coef) gt 100 then st=st+1
endif

endwhile
if vel_dis_type eq 1 and st lt 72 then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Full set of output data is missing in the file']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
endif
if vel_dis_type eq 0 and st lt 76 then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Full set of output data is missing in the file']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
endif

close,1
neutralization ;procedure which is needed for beam parameters
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which load the beam geometry parameters from *.abi input file.
;-------------------------------------------------------------------------------------------------------------------------
Pro load_beam_geometry_file
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for calculation.
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration
;calculation. ;The following common block contains the name of the input file from which the input
;data is extracted 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,$
ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err 
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------

val='template'
close,1
st=0

file=file_search(beam_geom_file)
if file(0) eq "" then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The '+beam_geom_file+' does not exist']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
  return
endif
openr,1,beam_geom_file
;put default for tank_diam,neutr_diam and magnet_diam for older files
tank_diam=1.0
magnet_diam=0.2
neutr_diam=0.2
beam_port_phi = 0.0 ;default

while ~EOF(1) do begin

readf,1,val

if val eq 'x_bml:' then begin 
  readf,1,val
  x_bml=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'y_bml:' then begin 
  readf,1,val
  y_bml=float(strsplit(val,', ',/extract))
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'grid_ap_diam:' then begin 
  readf,1,val
  grid_ap_diam=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'beam_port_phi:' then begin 
  readf,1,val
  beam_port_phi=float(val)
endif
if val eq 'beam_port:' then begin 
  readf,1,val
  beam_port=val
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'grid_focus:' then begin 
  readf,1,val
  x_grid_focus=float(val)
  x_grid_focus=y_grid_focus
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'x_grid_focus:' then begin 
  readf,1,val
  x_grid_focus=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'y_grid_focus:' then begin 
  readf,1,val
  y_grid_focus=float(val)
endif
if val eq 'tank_front_dist:' then begin 
  readf,1,val
  tank_front_dist=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'tank_size:' then begin 
  readf,1,val
  tank_size=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'tank_diam:' then begin 
  readf,1,val
  tank_diam=float(val)
endif
if val eq 'neutr_front_dist:' then begin 
  readf,1,val
  neutr_front_dist=float(val)
endif
if val eq 'neutr_size:' then begin 
  readf,1,val
  neutr_size=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'neutr_diam:' then begin 
  readf,1,val
  neutr_diam=float(val)
endif
if val eq 'tank_magnet_dist:' then begin 
  readf,1,val
  tank_magnet_dist=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'magnet_size:' then begin 
  readf,1,val
  magnet_size=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'magnet_diam:' then begin 
  readf,1,val
  magnet_diam=float(val)
endif
if val eq 'tank_cal_dist:' then begin 
  readf,1,val
  tank_cal_dist=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'r_grid:' then begin 
  readf,1,val
  R_grid=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_grid:' then begin 
  readf,1,val
  z_grid=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'phi_grid:' then begin 
  readf,1,val
  phi_grid=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'r_wall:' then begin 
  readf,1,val
  R_wall=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'z_wall:' then begin 
  readf,1,val
  z_wall=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif
if val eq 'phi_wall:' then begin 
  readf,1,val
  phi_wall=float(val)
  if strlen(val) gt 0 and strmid(val,1,1) ne ';' then st=st+1
endif


endwhile
if st ne 17 then begin
  Widget_control, status_wid, Get_Value=status_tx
  Widget_Control, status_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Full set of beam geometry parameters is missing in the file']], Set_text_top_line=n_elements(status_tx)-4
  st_err=1
endif

close,1

end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which load the default values of plasma limiters
;-------------------------------------------------------------------------------------------------------------------------
Pro load_plasma_param
;The following common block contains the parameters which describe
;some relative  global parameters of the plasma 
common plasma_param, main_ion,n_impur,impur_table
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------
 main_ion='D' & n_impur=1 & impur_table=[['B'],['5'],['1.000']]
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which load the default values of beam limiters (one
;limieter: beam duct)
;-------------------------------------------------------------------------------------------------------------------------
Pro load_beam_lim
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for calculation.
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block contains the parameters which describe the
;positions and sizes of the beam limiters.
common beam_limiters, n_limiters, limiters_table,limiters_arr
;The following common block contains the parameters which describe the geometry
;and position of the machine plasma
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------
  F_port_flange=1.26;m
  grid_outer_wall_dist=fix(sqrt(r_grid^2.0+f_port_flange^2.0-2.0*r_grid*f_port_flange*cos(phi_grid))*10.0)/10.0
  tank_flange_dist=grid_outer_wall_dist-tank_front_dist-tank_size
  n_limiters=4
  limiters_table=strarr(7,n_limiters)
  limiters_table(*,0)=['beam_duct',strtrim(string(tank_front_dist+tank_size,format='(F5.3)'),2),strtrim(string(tank_flange_dist,format='(F5.3)'),2),'0.200','NAN','NAN','NAN']
  
  r_inner_wall=0.44
  l_aperture=0.020
  d_aperture=0.16
  limiters_table(*,1)=['duct_aperture',strtrim(string(tank_front_dist+tank_size-l_aperture,format='(F5.3)'),2),strtrim(string(l_aperture,format='(F5.3)'),2),strtrim(string(d_aperture,format='(F5.3)'),2),'NAN','NAN','NAN']
  l_offset=1.31
  thick_offset=0.05
  d_offset=0.146
  limiters_table(*,2)=['duct_offset',strtrim(string(tank_front_dist+tank_size+l_offset,format='(F5.3)'),2),strtrim(string(thick_offset,format='(F5.3)'),2),strtrim(string(d_offset,format='(F5.3)'),2),'NAN','NAN','NAN']
  limiters_table(*,3)=['inner wall','NAN','NAN','NAN','NAN','NAN',strtrim(string(r_inner_wall,format='(F5.3)'),2)]
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which load the default values of beam geometry (C-mod DNBI)
;-------------------------------------------------------------------------------------------------------------------------
Pro load_beam_geometry
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for calculation.
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err  

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------
 MDSOPEN,'CMOD',SHOT,/QUIET,STATUS=ST0
 if st0 then begin
   r_wall=mdsvalue('\DNB::TOP.DNB_GEOM.R_wall',status=st1,/quiet);center of the second point defining the beam
   z_wall=mdsvalue('\DNB::TOP.DNB_GEOM.z_wall',status=st2,/quiet);center of the second point defining the beam
   phi_wall=mdsvalue('\DNB::TOP.DNB_GEOM.phi_wall',status=st3,/quiet);center of of the second point defining the beam
   r_grid=mdsvalue('\DNB::TOP.DNB_GEOM.R_grid',status=st4,/quiet);center of the grid
   z_grid=mdsvalue('\DNB::TOP.DNB_GEOM.z_grid',status=st5,/quiet);center of the grid
   phi_grid=mdsvalue('\DNB::TOP.DNB_GEOM.phi_grid',status=st6,/quiet) ;center of the grid
   beam_port=MDSVALUE('\DNB::TOP.DNB_GEOM.beam_port', status=st7,/quiet); machine port to which beam is attached
   x_grid_focus=MDSVALUE('\DNB::TOP.DNB_GEOM.grid_focus', status=st8,/quiet);x focal distance of the beam
   y_grid_focus=x_grid_focus;y focal distance of the beam    
   tank_front_dist=MDSVALUE('\DNB::TOP.DNB_GEOM.tank_front', status=st9,/quiet);distance from grids to the front of the beam tank
   tank_size=MDSVALUE('\DNB::TOP.DNB_GEOM.tank_size', status=st10,/quiet);length of the beam tank
   neutr_size=MDSVALUE('\DNB::TOP.DNB_GEOM.neutr_size', status=st11,/quiet) ; size of the neutralizer tube
   tank_magnet_dist=MDSVALUE('\DNB::TOP.DNB_GEOM.tank_magnet', status=st12,/quiet) ; distance from from wall fo the tank to front side of the deflection magnet
   magnet_size=MDSVALUE('\DNB::TOP.DNB_GEOM.magnet_size', status=st13,/quiet); size of the magnet
   tank_cal_dist=MDSVALUE('\DNB::TOP.DNB_GEOM.tank_cal', status=st14,/quiet);distance from tank end to calorimeter
   beam_apertur=MDSVALUE('\DNB::TOP.DNB_GEOM.beam_apertur', status=st15,/quiet) ;positions of the elemental apertures in the extraction grid
   grid_ap_diam=MDSVALUE('\DNB::TOP.DNB_GEOM.grid_ap_diam', status=st16,/quiet);diameter of the elemental apertures in the extraction grid
   ;put default C-Mod for tank_diam,neutr_diam and magnet_diam for older files
   tank_diam=1.0
   magnet_diam=0.2
   neutr_diam=0.2
   neutr_front_dist=0.0
   beam_port_phi = 0.0

   if st1 and st2 and st3 and st4 and st5 and st6 and st7 and st8 and st9 and st10 and st11 and st12 and st13 and st14 and st15 and st16 then begin
     x_bml=beam_apertur(*,0)
     y_bml=beam_apertur(*,1) 
     n_apertures=n_elements(x_bml)
     r_wall=round(r_wall*1000.0)/1000.0
     z_wall=round(z_wall*1000.0)/1000.0
     phi_wall=round(phi_wall*1000.0)/1000.0
     r_grid=round(r_grid*1000.0)/1000.0
     z_grid=round(z_grid*1000.0)/1000.0
     phi_grid=round(phi_grid*1000.0)/1000.0
     x_grid_focus=round(x_grid_focus*1000.0)/1000.0
     y_grid_focus=round(y_grid_focus*1000.0)/1000.0
     tank_front_dist=round(tank_front_dist*1000.0)/1000.0
     tank_size=round(tank_size*1000.0)/1000.0
     neutr_size=round(neutr_size*1000.0)/1000.0
     neutr_front_dist=round(neutr_front_dist*1000.0)/1000.0
     tank_magnet_dist=round(tank_magnet_dist*1000.0)/1000.0
     magnet_size=round(magnet_size*1000.0)/1000.0
     tank_cal_dist=round(tank_cal_dist*1000.0)/1000.0
   endif else begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The Beam Geometry data set is not available in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
     st_err=1
     return
   endelse
 endif else begin
   Widget_control, status_wid, Get_Value=status_tx
   Widget_Control, status_wid,$
   Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : This shot is not existed in MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4
   st_err=1
   return
 endelse
end

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which calculate beam density based on the semi-analytical solution
;-------------------------------------------------------------------------------------------------------------------------

;-----------these functions are used by beam_code_analytic
function integr,a,theta,z,z_star,r
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return,0
   endif
 endif
;-----------------------------------------------------
  integr=0.0
  n_steps=100
  for i=0,n_steps-1 do begin
   v=a*float(i)/float(n_steps-1)
   besel_arg=2.0*v*r/(z*z_star*theta^2)
   if besel_arg lt 700 then integr = integr + exp(-v^2/(theta*z_star)^2)*beseli(besel_arg,0,/double)*v*a/float(n_steps-1)
  
  endfor
return, integr
end

function beam_cur_den,r,z,J,theta,a,r_foc
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return,0
   endif
 endif
;-----------------------------------------------------
 z_star=1.0/(1.0/z-1.0/r_foc)
 beam_cur_den=2.0*J/(!Pi*a^2*z^2*theta^2)*exp(-r^2/(theta*z)^2)*integr(a,theta,z,z_star,r)
 return,beam_cur_den
end
;-------------------------------------------------------

Pro beam_code_analytic, Main_Base
;the following commonblock contains the id of the main widget
common main_widget,widget_id, driver_id
;The following common block contains X,Y,Z coordinate arrays used for the beam
;calculation grid and output 3D arrays of the beam density and excitation fracitons
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution)
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for calculation.
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist 
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif

;check if ALCBEAM driver is on
driver_on=0
Widget_Control,Widget_Info(widget_id, FIND_BY_UNAME='Show_Driver_Button'),get_value=driver_val
if driver_val eq 'Back to NORMAL mode' then driver_on=1
;-----------------------------------------------------
n_z=n_elements(z_beam)
n_x=n_elements(x_beam)
n_y=n_elements(y_beam)
;regular grid
x_step=abs(max(x_beam)-min(x_beam))/(n_x-1)
y_step=abs(max(y_beam)-min(y_beam))/(n_y-1)
n_ebeam=n_elements(e_beam)
n_r=(n_x-1)/2*10

r_beam=interpol([x_beam((n_x-1)/2),x_beam(n_x-1)],n_r)
n_beam=fltarr(n_ebeam,n_z,n_x,n_y)
beam_cur_r=fltarr(n_r)
Widget_control, status_wid, Get_Value=status_tx
Widget_Control, status_wid, Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : The calculation was started ']], Set_text_top_line=n_elements(status_tx)-4 

J_tot=1.0 ;total current from each beamlet
div_bml_opt_rad=x_div_bml_opt*!Pi/180.0

a=max([x_bml,y_bml]);grid radius
systime_0=systime(/seconds)
for j=0, n_z-1 do begin
  systime_1=systime(/seconds)
  if j gt 0 then begin
    all_sec=(systime_1-systime_0)*((n_z+1.0)/(j+1.0)-1.0)
    rem_hours=fix(all_sec/3600.0)
    rem_min=fix((all_sec-3600*rem_hours)/60.0)
    rem_sec=fix((all_sec-3600*rem_hours-60*rem_min))
    Widget_Control, status_wid,Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
    ' : Loop #'+strtrim(string(j+1),1)+' out of '+strtrim(string(n_z),1)+' is processing. Finished: '+strtrim(string((j+1.0)*100.0/(n_z+1.0),format='(I3)'),2)+' % out of 100%, Estimated remaining time: '+$
strtrim(string(rem_hours,format='(I2)'),2)+' hours, '+strtrim(string(rem_min,format='(I2)'),2)+' min, '+strtrim(string(rem_sec,format='(I2)'),2)+' sec, (Press STOP CALC button to stop)']], Set_text_top_line=n_elements(status_tx)-4      
  endif

  for i=0, n_r-1 do begin
     beam_cur_r(i)=beam_cur_den(r_beam(i),z_beam(j),J_tot,div_bml_opt_rad,a,x_grid_focus)
     if st_err then return
  endfor
  for i=0, n_x-1 do begin
    for k=0, n_y-1 do begin
      n_beam(*,j,i,k)=beam_cur_r(locate(r_beam,sqrt(x_beam(i)^2.0+y_beam(k)^2.0)))/1e4 ;cm-2
    endfor
  endfor
   res=Widget_Event(Widget_Info(Main_Base, FIND_BY_UNAME='Ready_Button'),/nowait)
   if res.ID eq Widget_Info(Main_Base, FIND_BY_UNAME='Ready_Button') then begin
     st_err=2
     return
   endif
   if driver_on then begin
     res=Widget_Event(Widget_Info(driver_id, FIND_BY_UNAME='Run_Driver_Button'),/nowait)
     if res.ID eq Widget_Info(driver_id, FIND_BY_UNAME='Run_Driver_Button') then begin
        st_err=3
       return
     endif
   endif
 endfor
 for k=0, n_ebeam-1 do begin
   n_beam(k,*,*,*)=n_beam(k,*,*,*)*neutr_dens_ns_tot*neutr_dens_frac(k) ;cm-3
 endfor
 ;added on Jan 21, 2010 to account for neutralizer.
 for i_z=0,locate(z_beam,neutr_front_dist) do begin
   n_beam(*,i_z,*,*)=0.0
 endfor
 for i_z=locate(z_beam,neutr_front_dist),locate(z_beam,neutr_front_dist+neutr_size) do begin
   if i_z ne -1 then n_beam(*,i_z,*,*)=n_beam(*,i_z,*,*)*(z_beam(i_z)-neutr_front_dist)/neutr_size
 endfor
  vel_vec_x=0
  vel_vec_y=0
  vel_vec_coef=0 

  Widget_control, status_wid, Get_Value=status_tx
  status_tx=status_tx(0:n_elements(status_tx)-2)
  Widget_Control, status_wid,Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
  ' : The calculation was finished']], Set_text_top_line=n_elements(status_tx)-4

end

;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which calculate beam density based on the ray-tracing technique
;-------------------------------------------------------------------------------------------------------------------------
Pro beam_code_ray_tracing, Main_Base
;the following commonblock contains the id of the main widget
common main_widget,widget_id, driver_id
;The following common block contains some of the settings for beam attenuation and penetration calculation
common run_settings,div_type,div_type_names,atten_type, atten_type_names, vel_dis_type, vel_dis_names
;The following common block contains X,Y,Z coordinate arrays used for the beam
;calculation grid and output 3D arrays of the beam density and excitation fracitons
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for calculation.
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution) 
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
;The following common block contains 1D n_e profiles of raw and
;smoothed data, 3D n_e and ne_stop_cross_section arrays after they constructed
common dens_electrons,n_e_coord,n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr,ne_stop_cross_section
;The following common block contains 1D t_e profiles of raw and smoothed data, and 3D
;t_e array after it constructed
common temp_electrons,t_e_coord,t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
;The following common block contains neutral gas parameters used in
;calculation of the beam attenuation in the gas.
common neutral_gas,tank_pressure,torus_pressure,duct_pressure,duct_pressure_loc,n0_arr,n0_stop_cross_section
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation. 
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
;The following common block contains the parameters which describe the
;positions and sizes of the beam limiters.
common beam_limiters, n_limiters, limiters_table,limiters_arr
;The following commong block contains the rho arrays which used for
;mapping of 1D Ne,Te,Z_eff arrays to the machine 3D coordinated and
;eventually to the beam coordinates.
common flux_surfaces, rho_arr_beam_coord,rho_grid,rgrid_arr,zgrid_arr,rgrid_midplane,rho_grid_midplane
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
endif

;check if ALCBEAM driver is on
driver_on=0
Widget_Control,Widget_Info(widget_id, FIND_BY_UNAME='Show_Driver_Button'),get_value=driver_val
if driver_val eq 'Back to NORMAL mode' then driver_on=1
;-----------------------------------------------------
  ;cut number of beam apertures to speed up the code
   if grid_aper_type eq 0 then begin
      x_bml_used=x_bml
      y_bml_used=y_bml
   endif else begin
     fact=fix((strsplit(grid_aper_names(grid_aper_type),' ',/extract))(1))
     n_ap=(n_elements(x_bml)-1)/2 
     if n_elements(x_bml) MOD 2 eq 1 then begin
       x_bml_used=x_bml((n_ap mod fact):*:fact)
       y_bml_used=y_bml((n_ap mod fact):*:fact)
     endif else begin
       x_bml_used=[x_bml((n_ap mod fact):n_ap:fact),x_bml(n_ap+1:*:fact)]
       y_bml_used=[y_bml((n_ap mod fact):n_ap:fact),y_bml(n_ap+1:*:fact)]
     endelse
   endelse
  ;------------------------------------------------------------------------

    Widget_control, status_wid, Get_Value=status_tx
    Widget_Control, status_wid, Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
    ' : The calculation was started ']], Set_text_top_line=n_elements(status_tx)-4 
    
    x_grid_focus=x_grid_focus(0)
    y_grid_focus=y_grid_focus(0)
    n_bml=n_elements(x_bml_used)
    
   
    n_z=n_elements(z_beam)
    n_x=n_elements(x_beam)
    n_y=n_elements(y_beam)
    n_ebeam=n_elements(e_beam)

    x_step=abs(max(x_beam)-min(x_beam))/(n_x-1)
    y_step=abs(max(y_beam)-min(y_beam))/(n_y-1)

    ;parabolic source density distribution
    a=max([x_bml_used,y_bml_used])
    ; source density formula
    J_coef=I_beam*1e3/(!Pi*(grid_ap_diam/10.0/2.0)^2.0*total(1.0-I_dens_par*(x_bml^2+y_bml^2)/a^2))
    j_bml=J_coef*(1- I_dens_par*(x_bml_used^2+y_bml_used^2)/a^2)
    I_dens_opt=I_opt/n_bml/!PI/(grid_ap_diam/2.0)^2.0*1e6*1e-1 ;mA/cm^2 based on the uniform distribution over all apertures
    ;set the total line density from each beamlet
    if I_dens_par ne 0 then begin
     ;-----------------------
      aper_frac=j_bml/total(j_bml) ; normalization to unity
      dens_bml=fltarr(n_ebeam,n_x,n_y,n_bml)
      for i=0,n_x-1 do begin
        for j=0, n_y-1 do begin
          dens_bml(*,i,j,*) = neutr_dens_ns_tot*(aper_frac ## neutr_dens_frac);cm-1
        endfor
      endfor
    endif else begin
      dens_bml = neutr_dens_ns_tot*neutr_dens_frac/n_bml
    endelse 
    prfl_bm = make_array(n_ebeam,n_x,n_y)
   
    ;compute the beam width
    vecf_x = fltarr(n_x,n_y,n_bml) ; ; x coordinate of a vector from aperture to focal point (3D)
    vecf_y = fltarr(n_x,n_y,n_bml) ; ; y coordinate of a vector from aperture to focal point (3D)
    vecf_z = fltarr(n_x,n_y,n_bml) ; ; z coordinate of a vector from aperture to focal point (3D)
    vecp_x = fltarr(n_x,n_y,n_bml) ; ; x_coordinate of a vector from aperture to point of interest(3D)
    vecp_y = fltarr(n_x,n_y,n_bml) ; ; y_coordinate of a vector from aperture to point of interest(3D)
    if vel_dis_type eq 0 then begin
      vecp_arr = fltarr(n_x,n_y,3,n_bml) ;; vecp_x,vecp_y,ampl 
      vecp_coef=fltarr(n_ebeam,n_z,n_x,n_y,9); 9 points    
    endif 

   vecp_z = fltarr(n_x,n_y,n_bml) ; ; z_coordinate of a vector from aperture to point of interest(3D)

    bml_pos_x = fltarr(n_x,n_y,n_bml) ; ; x coordinate of a vector from aperture to point of interest(3D)
    bml_pos_y = fltarr(n_x,n_y,n_bml) ; ; y coordinate of a vector from aperture to point of interest(3D)
    bml_pos_z = fltarr(n_x,n_y,n_bml) ; ; z coordinate of a vector from aperture to point of interest(3D)

    x_div_bml = fltarr(n_x,n_y,n_bml) ; ; beamlet divergence of from a particular aperture for point of interest(3D) (X:horizontal)   
    y_div_bml = fltarr(n_x,n_y,n_bml) ; ; beamlet divergence of from a particular aperture for point of interest(3D) (Y:vertical)  

    ind_x = make_array(n_x,n_y,n_bml,/uint) ; ; x coordinate of a vector from aperture to point of interest(3D)
    ind_y = make_array(n_x,n_y,n_bml,/uint) ; ; y coordinate of a vector from aperture to point of interest(3D)  
    for j=0, n_bml-1 do begin
          vecf_x(*,*,j)=make_array(n_x,n_y,value=0)-x_bml_used(j)/x_grid_focus
          vecf_y(*,*,j)=make_array(n_x,n_y,value=0)-y_bml_used(j)/y_grid_focus
          vecf_z(*,*,j)=make_array(n_x,n_y,value=0)+1.0
          vecp_x(*,*,j)=make_array(n_y,value=1)## x_beam- x_bml_used(j); (without z component)
          vecp_y(*,*,j)=y_beam ## make_array(n_x,value=1) - y_bml_used(j); (without z component)
          vecp_z(*,*,j)=make_array(n_x,n_y,value=0); (without z component)
          
          x_div_bml(*,*,j)=make_array(n_x,n_y,value=0)+x_div_bml_opt*(1+div_dist_par*(1.0-J_bml(j)/I_dens_opt)^2.0); (without z component)
          y_div_bml(*,*,j)=make_array(n_x,n_y,value=0)+y_div_bml_opt*(1+div_dist_par*(1.0-J_bml(j)/I_dens_opt)^2.0); (without z component)

          ind_x(*,*,j)= make_array(n_y,value=1) ## make_array(n_x,/index)
          ind_y(*,*,j)= make_array(n_y,/index) ## make_array(n_x,value=1)
    endfor
    lvecf = sqrt(vecf_x^2.0+vecf_y^2.0+vecf_z^2.0) ; length of vecf
    if vel_dis_type eq 0 then begin 
      vecp_arr(*,*,0,*)=vecp_x
      vecp_arr(*,*,1,*)=vecp_y
    endif

    n_beam=fltarr(n_ebeam,n_z,n_x,n_y)
    ;n_dep=fltarr(n_ebeam,n_z,n_x,n_y)

    n0_sigma=fltarr(n_ebeam,n_z,n_x,n_y)
    ne_sigma=fltarr(n_ebeam,n_z,n_x,n_y)
    limiters_sigma=fltarr(n_ebeam,n_z,n_x,n_y)       
    ;z_length_arr=[z_beam(1:n_z-1)-z_beam(0:n_z-2),z_beam(n_z-1)-z_beam(n_z-2)]*100.0 ;length array for attenuation integral cm
    z_length_arr=[z_beam(1)-z_beam(0),z_beam(1:n_z-1)-z_beam(0:n_z-2)]*100.0 ;length array for attenuation integral cm
 
    for i=0, n_ebeam-1 do begin
      n0_sigma(i,*,*,*)=n0_arr*n0_stop_cross_section(i)
      if atten_type lt 1 then ne_sigma(i,*,*,*)=n_e_arr*ne_stop_cross_section(i,*,*,*)
      limiters_sigma(i,*,*,*)=limiters_arr
    endfor
    if atten_type eq 0 then n_tot_sigma=n0_sigma+ne_sigma+limiters_sigma
    if atten_type eq 1 then n_tot_sigma=ne_sigma
    if atten_type eq 2 then n_tot_sigma=n0_sigma
    if atten_type eq 3 then n_tot_sigma=limiters_sigma
    if atten_type eq 4 then n_tot_sigma=limiters_sigma+n0_sigma

    ind_magnet=locate(z_beam,tank_front_dist+tank_magnet_dist+magnet_size)

    e_inc=make_array(n_x,n_y,n_bml,value=0)
    z_inc=make_array(n_x,n_y,n_bml,value=ind_magnet)   
    att_fac=fltarr(n_ebeam,n_x,n_y,n_bml)    

    systime_0=systime(/seconds)
    for i=0,n_z-1 do begin
      systime_1=systime(/seconds)
      Widget_control, status_wid, Get_Value=status_tx
      status_tx=status_tx(0:n_elements(status_tx)-2)
      if i gt 0 then begin
        if atten_type ne 5 then begin
          all_sec=(systime_1-systime_0)*((((n_z+1-ind_magnet)^2.0)/2.0+ind_magnet)/((((i+1-ind_magnet)>0)^2.0)/2.0+((i+1)<ind_magnet))-1.0)
          rem_hours=fix(all_sec/3600.0)
          rem_min=fix((all_sec-3600*rem_hours)/60.0)
          rem_sec=fix((all_sec-3600*rem_hours-60*rem_min))
          Widget_Control, status_wid,Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
          ' : Loop #'+strtrim(string(i+1),1)+' out of '+strtrim(string(n_z),1)+' is processing. Finished: '+strtrim(string(((((i+1-ind_magnet)>0)^2.0)/2.0+((i+1)<ind_magnet))/(((n_z+1-ind_magnet)^2.0)/2.0+ $
          ind_magnet)*100.0,format='(I3)'),2)+'% out of 100%, Estimated remaining time: '+strtrim(string(rem_hours,format='(I2)'),2)+ $
          ' hours, '+strtrim(string(rem_min,format='(I2)'),2)+' min, '+strtrim(string(rem_sec,format='(I2)'),2)+' sec, (Press STOP CALC button to stop)']], Set_text_top_line=n_elements(status_tx)-4
        endif else begin
          all_sec=(systime_1-systime_0)*((n_z+1.0)/(i+1.0)-1.0)
          rem_hours=fix(all_sec/3600.0)
          rem_min=fix((all_sec-3600*rem_hours)/60.0)
          rem_sec=fix((all_sec-3600*rem_hours-60*rem_min))
          Widget_Control, status_wid,Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
          ' : Loop #'+strtrim(string(i+1),1)+' out of '+strtrim(string(n_z),1)+' is processing. Finished: '+strtrim(string((i+1.0)*100.0/(n_z+1.0),format='(I3)'),2)+ $
          ' % out of 100%, Estimated remaining time: '+strtrim(string(rem_hours,format='(I2)'),2)+' hours, '+strtrim(string(rem_min,format='(I2)'),2)+ $
          ' min, '+strtrim(string(rem_sec,format='(I2)'),2)+' sec, (Press STOP CALC button to stop)']], Set_text_top_line=n_elements(status_tx)-4  

        endelse  
      endif
      lvecp = sqrt(vecp_x^2.0+vecp_y^2.0+(vecp_z+z_beam(i))^2.0) ; length of vecp
      
      dot_prod = reform((vecf_x*vecp_x+vecf_y*vecp_y+vecf_z*(vecp_z+z_beam(i)))) ; dot prod of vecf and vecp

      cos_angle = dot_prod/(lvecf*lvecp)<1.0 ; cosine of the angle subtended by vecf and vecp
      ;r_traj = lvecp*sqrt(1.0-cos_angle*cos_angle) ;perp distance from the pt to the beamlet trajectory
      z_traj = lvecp*cos_angle ; distance along the beamlet trajectory
     
      x_traj=vecp_x-vecf_x*z_traj/lvecf
      y_traj=vecp_y-vecf_y*z_traj/lvecf
     
      r0x = z_traj*tan(x_div_bml*!pi/180.0) ;Gaussian width of beam at z_traj
      r0y = z_traj*tan(y_div_bml*!pi/180.0) ;Gaussian width of beam at z_traj
      ;added for attenuation
      J_tot=1.0
      ;gauss_int=J_tot/4.0*abs(erf((r_traj+x_step/2.0)/r0x)-erf((r_traj-x_step/2.0)/r0x))*(erf((y_step/2.0)/r0y)*2.0)
      gauss_int=J_tot/4.0*abs(erf((x_traj+x_step/2.0)/r0x)-erf((x_traj-x_step/2.0)/r0x))*abs(erf((y_traj+y_step/2.0)/r0y)-erf((y_traj-y_step/2.0)/r0y))
      
      gauss_int_iter=gauss_int
      geom_fact=lvecp/z_beam(i)
      att_fac(*,*,*,*)=0
      z_inc(*,*,*)=ind_magnet
      inc_coef_x=vecp_x/z_beam(i)/x_step
      inc_coef_y=vecp_y/z_beam(i)/y_step   
           
      if atten_type ne 5 then begin
      for j=ind_magnet,i do begin
          x_inc=ind_x-fix((z_beam(i)-z_beam(j))*inc_coef_x); may be put round instead of fix
          y_inc=ind_y-fix((z_beam(i)-z_beam(j))*inc_coef_y); may be put round instead of fix
          length_coef=z_length_arr(j)*geom_fact; changed from z-1 to z on 31 Aug 2012
          for k=0, n_ebeam-1 do begin
            att_fac(k,*,*,*)=att_fac(k,*,*,*)+n_tot_sigma(e_inc+k,z_inc,x_inc,y_inc)*length_coef
            ;calculate distribution of lost atoms from beam (postponed)
            ;if i eq n_z-1 then begin
            ;  for i1=0, n_x-1 do begin
            ;    for i2=0, n_y-1 do begin
            ;      for i3=0, n_bml-1 do begin
            ;        n_loss(e_inc(i1,i2,i3)+k,z_inc(i1,i2,i3),x_inc(i1,i2,i3),y_inc(i1,i2,i3))=n_loss(e_inc(i1,i2,i3)+k,z_inc(i1,i2,i3),x_inc(i1,i2,i3),y_inc(i1,i2,i3))+$
            ;        gauss_int_iter(i1,i2,i3)*(1.0-exp(-double(reform(n_tot_sigma(e_inc(i1,i2,i3)+k,z_inc(i1,i2,i3),x_inc(i1,i2,i3),y_inc(i1,i2,i3))*length_coef(i1,i2,i3)))))
            ;      endfor
            ;    endfor
            ;  endfor
            ;  gauss_int_iter=gauss_int_iter*(-exp(-double(reform(n_tot_sigma(e_inc+k,z_inc,x_inc,y_inc)*length_coef))))
            ;endif
          endfor
          z_inc=z_inc+1
      endfor
      endif
      for k=0, n_ebeam-1 do begin
        if I_dens_par eq 0 then begin  ; if uniform source dens distribution
          n_beam(k,i,*,*)=total(exp(-double(reform(att_fac(k,*,*,*))))*gauss_int,3)/(x_step*y_step*1e4) ;cm-2 ;removed n_beam(k,i,*,*)
          if vel_dis_type eq 0 then begin
            vecp_arr(*,*,2,*)=exp(-double(reform(att_fac(k,*,*,*))))*gauss_int
            for x_i=0,n_elements(x_beam)-1 do begin
              for y_i=0,n_elements(y_beam)-1 do begin
                res=sfit(reform(vecp_arr(x_i,y_i,*,*)),2,/irregular,kx=kx)
                vecp_coef(k,i,x_i,y_i,*)=kx
              endfor
            endfor
          endif
          ;if i ge ind_magnet then n_dep(k,i,*,*)=total(1.0-exp(-double(reform(n_tot_sigma(e_inc,z_inc-1,x_inc,y_inc)*length_coef)))*gauss_int,3)/(x_step*y_step*1e4) ;cm-2 ;removed n_beam(k,i,*,*)
        endif else begin
          n_beam(k,i,*,*)=total(exp(-double(reform(att_fac(k,*,*,*))))*dens_bml(k,*,*,*)*gauss_int,3)/(x_step*y_step*1e4) ;cm-2;removed n_beam(k,i,*,*)
          if vel_dis_type eq 0 then begin
            vecp_arr(*,*,2,*)=exp(-double(reform(att_fac(k,*,*,*))))*dens_bml(k,*,*,*)*gauss_int
            for x_i=0,n_elements(x_beam)-1 do begin
              for y_i=0,n_elements(y_beam)-1 do begin
                res=sfit(reform(vecp_arr(x_i,y_i,*,*)),2,/irregular,kx=kx)
                vecp_coef(k,i,x_i,y_i,*)=kx
              endfor
            endfor
          endif
          ;if i ge ind_magnet then n_dep(k,i,*,*)=total(1.0-exp(-double(reform(n_tot_sigma(e_inc,z_inc-1,x_inc,y_inc)*length_coef)))*dens_bml(k,*,*,*)*gauss_int,3)/(x_step*y_step*1e4) ;cm-2;removed n_beam(k,i,*,*)
        endelse
      endfor
      res=Widget_Event(Widget_Info(Main_Base, FIND_BY_UNAME='Ready_Button'),/nowait)
      if res.ID eq Widget_Info(Main_Base, FIND_BY_UNAME='Ready_Button') then begin
        st_err=2
        return
      endif
      if driver_on then begin
        res=Widget_Event(Widget_Info(driver_id, FIND_BY_UNAME='Run_Driver_Button'),/nowait)
        if res.ID eq Widget_Info(driver_id, FIND_BY_UNAME='Run_Driver_Button') then begin
          st_err=3
          return
        endif
      endif
    endfor
    if I_dens_par eq 0 then begin  ; if uniform source dens distribution
      for k=0, n_ebeam-1 do begin      
        n_beam(k,*,*,*)=n_beam(k,*,*,*)*dens_bml(k) ;cm-3
       ; n_dep(k,*,*,*)=n_dep(k,*,*,*)*dens_bml(k) ;cm-3
      endfor
    endif
    ;added on Jan 21, 2010 to account for neutralizer.
    for i_z=0,locate(z_beam,neutr_front_dist) do begin
      n_beam(*,i_z,*,*)=0.0
    endfor
    for i_z=locate(z_beam,neutr_front_dist),locate(z_beam,neutr_front_dist+neutr_size) do begin
      if i_z ne -1 then n_beam(*,i_z,*,*)=n_beam(*,i_z,*,*)*(z_beam(i_z)-neutr_front_dist)/neutr_size
     ; n_dep(*,i_z,*,*)=n_dep(*,i_z,*,*)*z_beam(i_z)/neutr_size
    endfor

    if vel_dis_type eq 0 then begin
      vel_vec_x=vecp_x
      vel_vec_y=vecp_y
      vel_vec_coef=vecp_coef 
     endif else begin
      vel_vec_x=0
      vel_vec_y=0
      vel_vec_coef=0 
     endelse

    Widget_control, status_wid, Get_Value=status_tx
    status_tx=status_tx(0:n_elements(status_tx)-2)
    Widget_Control, status_wid,Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
  ' : The calculation was finished']], Set_text_top_line=n_elements(status_tx)-4 

;stop
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which calculate beam density based on the interpolating technique
;-------------------------------------------------------------------------------------------------------------------------
Pro beam_code_interpolating, Main_Base
;the following commonblock contains the id of the main widget
common main_widget,widget_id, driver_id
;The following common block contains some of the settings for beam attenuation and penetration calculation
common run_settings,div_type,div_type_names,atten_type, atten_type_names, vel_dis_type, vel_dis_names
;The following common block contains X,Y,Z coordinate arrays used for the beam
;calculation grid and output 3D arrays of the beam density and excitation fracitons
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for calculation.
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution) 
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
;The following common block contains 1D n_e profiles of raw and
;smoothed data, 3D n_e and ne_stop_cross_section arrays after they constructed
common dens_electrons,n_e_coord,n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr,ne_stop_cross_section
;The following common block contains 1D t_e profiles of raw and smoothed data, and 3D
;t_e array after it constructed
common temp_electrons,t_e_coord,t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
;The following common block contains neutral gas parameters used in
;calculation of the beam attenuation in the gas.
common neutral_gas,tank_pressure,torus_pressure,duct_pressure,duct_pressure_loc,n0_arr,n0_stop_cross_section
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation. 
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
;The following common block contains the parameters which describe the
;positions and sizes of the beam limiters.
common beam_limiters, n_limiters, limiters_table,limiters_arr
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif

;check if ALCBEAM driver is on
driver_on=0
Widget_Control,Widget_Info(widget_id, FIND_BY_UNAME='Show_Driver_Button'),get_value=driver_val
if driver_val eq 'Back to NORMAL mode' then driver_on=1
;-----------------------------------------------------
  ;cut number of beam apertures to speed up the code
   if grid_aper_type eq 0 then begin
      x_bml_used=x_bml
      y_bml_used=y_bml
   endif else begin
     fact=fix((strsplit(grid_aper_names(grid_aper_type),' ',/extract))(1))
     n_ap=(n_elements(x_bml)-1)/2 
     if n_elements(x_bml) MOD 2 eq 1 then begin
       x_bml_used=x_bml((n_ap mod fact):*:fact)
       y_bml_used=y_bml((n_ap mod fact):*:fact)
     endif else begin
       x_bml_used=[x_bml((n_ap mod fact):n_ap:fact),x_bml(n_ap+1:*:fact)]
       y_bml_used=[y_bml((n_ap mod fact):n_ap:fact),y_bml(n_ap+1:*:fact)]
     endelse
   endelse
  ;------------------------------------------------------------------------

    Widget_control, status_wid, Get_Value=status_tx
    Widget_Control, status_wid, Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
    ' : The calculation was started ']], Set_text_top_line=n_elements(status_tx)-4 
    
    x_grid_focus=x_grid_focus(0)
    y_grid_focus=y_grid_focus(0)
    n_bml=n_elements(x_bml_used)
    
   
    n_z=n_elements(z_beam)
    n_x=n_elements(x_beam)
    n_y=n_elements(y_beam)
    n_ebeam=n_elements(e_beam)

    x_step=abs(max(x_beam)-min(x_beam))/(n_x-1)
    y_step=abs(max(y_beam)-min(y_beam))/(n_y-1)

    ;parabolic source density distribution
    a=max([x_bml_used,y_bml_used])
    ; source density formula
    J_coef=I_beam*1e3/(!Pi*(grid_ap_diam/10.0/2.0)^2.0*total(1.0-I_dens_par*(x_bml^2+y_bml^2)/a^2))
    j_bml=J_coef*(1- I_dens_par*(x_bml_used^2+y_bml_used^2)/a^2)
    I_dens_opt=I_opt/n_bml/!PI/(grid_ap_diam/2.0)^2.0*1e6*1e-1 ;mA/cm^2 based on the uniform distribution over all apertures
    ;set the total line density from each beamlet
    if I_dens_par ne 0 then begin
     ;-----------------------
     ; aper_frac=(1.0-I_dens_par*(x_bml_used^2+y_bml_used^2.0)/a^2.0)
      aper_frac=j_bml/total(j_bml) ; normalization to unity
      dens_bml=fltarr(n_ebeam,n_x,n_y,n_bml)
      for i=0,n_x-1 do begin
        for j=0, n_y-1 do begin
          dens_bml(*,i,j,*) = neutr_dens_ns_tot*(aper_frac ## neutr_dens_frac);cm-1
        endfor
      endfor
    endif else begin
      dens_bml = neutr_dens_ns_tot*neutr_dens_frac/n_bml
    endelse 
    prfl_bm = make_array(n_ebeam,n_x,n_y)

    ;compute the beam width

    ;velocity vector is defined for each beam energy
    ; for each 3d point on beam grid
    ; vector is defined as a 2D density function
    ; defined within a XY cell
 
    x_bml_srt=x_bml(sort(x_bml))
    y_bml_srt=y_bml(sort(y_bml))
    n_x_bml_uniq=n_elements(uniq(x_bml_srt))
    n_y_bml_uniq=n_elements(uniq(y_bml_srt))
   ; vel_vec_coef=fltarr(n_ebeam,n_x,n_y,9);

    vecf_x = fltarr(n_x,n_y,n_bml) ; ; x coordinate of a vector from aperture to focal point (3D)
    vecf_y = fltarr(n_x,n_y,n_bml) ; ; y coordinate of a vector from aperture to focal point (3D)
    vecf_z = fltarr(n_x,n_y,n_bml) ; ; z coordinate of a vector from aperture to focal point (3D)
    vecp_x = fltarr(n_x,n_y,n_bml) ; ; x_coordinate of a vector from aperture to point of interest(3D)
    vecp_y = fltarr(n_x,n_y,n_bml) ; ; y_coordinate of a vector from aperture to point of interest(3D)
    vecp_z = fltarr(n_x,n_y,n_bml) ; ; z_coordinate of a vector from aperture to point of interest(3D)
    if vel_dis_type eq 0 then begin
      vecp_arr = fltarr(n_x,n_y,3,n_bml) ;; vecp_x,vecp_y,ampl 
      vecp_coef=fltarr(n_ebeam,n_z,n_x,n_y,9); 9 points    
    endif
    coord_x = fltarr(n_x,n_y,n_bml) ; ; x_coordinate of a vector from aperture to point of interest(3D)
    coord_y = fltarr(n_x,n_y,n_bml) ; ; y_coordinate of a vector from aperture to point of interest(3D)



    bml_pos_x = fltarr(n_x,n_y,n_bml) ; ; x coordinate of aperture point
    bml_pos_y = fltarr(n_x,n_y,n_bml) ; ; y coordinate of aperture point
    bml_pos_ind = fltarr(n_x,n_y,n_bml) ; ; x coordinate of aperture point


    x_div_bml = fltarr(n_x,n_y,n_bml) ; ; beamlet divergence of from a particular aperture for point of interest(3D) (X:horzontal)
    y_div_bml = fltarr(n_x,n_y,n_bml) ; ; beamlet divergence of from a particular aperture for point of interest(3D) (Y:vertical)   
    ;ind_x = make_array(n_x,n_y,n_bml,/uint) ; ; x coordinate of a vector from aperture to point of interest(3D)
    ;ind_y = make_array(n_x,n_y,n_bml,/uint) ; ; y coordinate of a vector from aperture to point of interest(3D)

    geom_fac_cone = fltarr(n_x,n_y,n_bml);geometrical factor f for coneical grid   


    for j=0, n_bml-1 do begin
          vecf_x(*,*,j)=make_array(n_x,n_y,value=0)-x_bml_used(j)/x_grid_focus
          vecf_y(*,*,j)=make_array(n_x,n_y,value=0)-y_bml_used(j)/y_grid_focus
          vecf_z(*,*,j)=make_array(n_x,n_y,value=0)+1.0
          vecp_x(*,*,j)=make_array(n_y,value=1)## x_beam- x_bml_used(j); (without z component)
          vecp_y(*,*,j)=y_beam ## make_array(n_x,value=1) - y_bml_used(j); (without z component)
          coord_x(*,*,j)=(make_array(n_y,value=1)## x_beam)/x_step; (without z component)
          coord_y(*,*,j)=(y_beam ## make_array(n_x,value=1)/y_step); (without z component)

          vecp_z(*,*,j)=make_array(n_x,n_y,value=0); (without z component)

          
          x_div_bml(*,*,j)=make_array(n_x,n_y,value=0)+x_div_bml_opt*(1+div_dist_par*(1.0-J_bml(j)/I_dens_opt)^2.0); (without z component)
          y_div_bml(*,*,j)=make_array(n_x,n_y,value=0)+y_div_bml_opt*(1+div_dist_par*(1.0-J_bml(j)/I_dens_opt)^2.0); (without z component)
          ;ind_x(*,*,j)= make_array(n_y,value=1) ## make_array(n_x,/index)
          ;ind_y(*,*,j)= make_array(n_y,/index) ## make_array(n_x,value=1)

          bml_pos_x(*,*,j)=(make_array(n_y,value=0) ## make_array(n_x,value=0)+x_bml_used(j))
          bml_pos_y(*,*,j)=(make_array(n_y,value=0) ## make_array(n_x,value=0)+y_bml_used(j))
          bml_pos_ind(*,*,j)=(make_array(n_y,value=0) ## make_array(n_x,value=0)+j)


    endfor
    
    if vel_dis_type eq 0 then begin 
      vecp_arr(*,*,0,*)=vecp_x
      vecp_arr(*,*,1,*)=vecp_y
    endif
    lvecf = sqrt(vecf_x^2.0+vecf_y^2.0+vecf_z^2.0) ; length of vecf

    n_beam=fltarr(n_ebeam,n_z,n_x,n_y)
    ;new arrays for velocity

    n0_sigma=fltarr(n_ebeam,n_z,n_x,n_y)
    ne_sigma=fltarr(n_ebeam,n_z,n_x,n_y)
    limiters_sigma=fltarr(n_ebeam,n_z,n_x,n_y)
    z_length_arr=[z_beam(1)-z_beam(0),z_beam(1:n_z-1)-z_beam(0:n_z-2)]*100.0 ;length array for attenuation integral cm
    for i=0, n_ebeam-1 do begin
      n0_sigma(i,*,*,*)=n0_arr*n0_stop_cross_section(i)
      if atten_type le 1 then ne_sigma(i,*,*,*)=n_e_arr*ne_stop_cross_section(i,*,*,*)
      limiters_sigma(i,*,*,*)=limiters_arr
    endfor
    if atten_type eq 0 then n_tot_sigma=n0_sigma+ne_sigma+limiters_sigma
    if atten_type eq 1 then n_tot_sigma=ne_sigma
    if atten_type eq 2 then n_tot_sigma=n0_sigma
    if atten_type eq 3 then n_tot_sigma=limiters_sigma
    if atten_type eq 4 then n_tot_sigma=limiters_sigma+n0_sigma

    ;for i=0, n_z-1 do ind_lim(i)=max(n_tot_sigma(0,i,*,*)) gt 1e5
    ind_magnet=locate(z_beam,tank_front_dist+tank_magnet_dist+magnet_size)
    ;grid_flange_dist=tank_front_dist+tank_size+tank_flange_dist
    ;grid_pivot_dist=(R_flange-R_pivot)/cos(pivot_angle*!Pi/180.0)+grid_flange_dist
    ;R_plasma_edge=1.0
    ;grid_prev_plasma=grid_pivot_dist+(R_pivot-r_plasma_edge)*cos(pivot_angle*!Pi/180.0)

    ;ind_plasma=locate(z_beam,grid_prev_plasma)
    e_inc=make_array(n_x,n_y,n_bml,value=0)
    z_inc=make_array(n_x,n_y,n_bml)   
    att_fac=dblarr(n_ebeam,n_x,n_y,n_bml)+1.0
    att_fac1=fltarr(n_x,n_y,n_bml)   
    ;att_fac_cone= fltarr(n_cone_x,n_cone_y,n_bml) ; attenuation factor on the conical grid
 
    perf_fact=2.0*sqrt(n_x*n_y/17.0/17.0) ;performance factor for timer
  
    systime_0=systime(/seconds)
    for i=0,n_z-1 do begin
      systime_1=systime(/seconds)
      Widget_control, status_wid, Get_Value=status_tx
      status_tx=status_tx(0:n_elements(status_tx)-2)
      if i gt 0 then begin
        if atten_type ne 5 then begin
          if i le ind_magnet+1 then all_sec=(systime_1-systime_2)*(ind_magnet+1-i)+perf_fact*(n_z-1-ind_magnet) else all_sec=(systime_1-systime_2)*(n_z-i) 
          rem_hours=fix(all_sec/3600.0)
          rem_min=fix((all_sec-3600*rem_hours)/60.0)
          rem_sec=fix((all_sec-3600*rem_hours-60*rem_min))
          Widget_Control, status_wid,Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
          ' : Loop #'+strtrim(string(i+1),1)+' out of '+strtrim(string(n_z),1)+' is processing. Finished: '+strtrim(string((i+1.0)*100.0/(n_z+1.0),format='(I3)'),2)+ $
          ' % out of 100%, Estimated remaining time: '+strtrim(string(rem_hours,format='(I2)'),2)+' hours, '+strtrim(string(rem_min,format='(I2)'),2)+ $
          ' min, '+strtrim(string(rem_sec,format='(I2)'),2)+' sec, (Press STOP CALC button to stop)']], Set_text_top_line=n_elements(status_tx)-4  
        endif else begin
          all_sec=(systime_1-systime_0)*((n_z+1.0)/(i+1.0)-1.0)
          rem_hours=fix(all_sec/3600.0)
          rem_min=fix((all_sec-3600*rem_hours)/60.0)
          rem_sec=fix((all_sec-3600*rem_hours-60*rem_min))
          Widget_Control, status_wid,Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
          ' : Loop #'+strtrim(string(i+1),1)+' out of '+strtrim(string(n_z),1)+' is processing. Finished: '+strtrim(string((i+1.0)*100.0/(n_z+1.0),format='(I3)'),2)+ $
          ' % out of 100%, Estimated remaining time: '+strtrim(string(rem_hours,format='(I2)'),2)+' hours, '+strtrim(string(rem_min,format='(I2)'),2)+ $
          ' min, '+strtrim(string(rem_sec,format='(I2)'),2)+' sec, (Press STOP CALC button to stop)']], Set_text_top_line=n_elements(status_tx)-4  

        endelse  
      endif

      systime_2=systime(/seconds)
      lvecp = sqrt(vecp_x^2.0+vecp_y^2.0+(vecp_z+z_beam(i))^2.0) ; length of vecp

      dot_prod = reform((vecf_x*vecp_x+vecf_y*vecp_y+vecf_z*(vecp_z+z_beam(i)))) ; dot prod of vecf and vecp
      cos_angle = dot_prod/(lvecf*lvecp)<1.0 ; cosine of the angle subtended by vecf and vecp
      ;r_traj = lvecp*sqrt(1.0-cos_angle*cos_angle) ;perp distance from the pt to the beamlet trajectory
      z_traj = lvecp*cos_angle ; distance along the beamlet trajectory

      x_traj=vecp_x-vecf_x*z_traj/lvecf
      y_traj=vecp_y-vecf_y*z_traj/lvecf
     
      r0x = z_traj*tan(x_div_bml*!pi/180.0) ;Gaussian width of beam at z_traj
      r0y = z_traj*tan(y_div_bml*!pi/180.0) ;Gaussian width of beam at z_traj
      ;added for attenuation
      J_tot=1.0
      ;gauss_int=J_tot/4.0*abs(erf((r_traj+x_step/2.0)/r0x)-erf((r_traj-x_step/2.0)/r0x))*(erf((y_step/2.0)/r0y)*2.0)
      gauss_int=J_tot/4.0*abs(erf((x_traj+x_step/2.0)/r0x)-erf((x_traj-x_step/2.0)/r0x))*abs(erf((y_traj+y_step/2.0)/r0y)-erf((y_traj-y_step/2.0)/r0y))
      
      gauss_int_iter=gauss_int
     
      ;att_fac(*,*,*,*)=0
     ; z_inc_cone(*,*,*)=i
      z_inc(*,*,*)=i
      ;inc_coef_x=vecp_x/z_beam(i)/x_step
      ;inc_coef_y=vecp_y/z_beam(i)/y_step        
      if atten_type ne 5 and i gt ind_magnet then begin
      ;addition June 2010
        lvecp_prev = sqrt(vecp_x^2.0+vecp_y^2.0+(vecp_z+z_beam(i-1))^2.0) ; length of vecp (i-1) step
        geom_fact=lvecp_prev/z_beam(i-1)
        ;vecp_x1=vecp_x*z_beam(i)/z_beam(i-1)
        ;vecp_y1=vecp_y*z_beam(i)/z_beam(i-1)
        coord_x_n=(vecp_x*z_beam(i)/z_beam(i-1)+bml_pos_x)/x_step
        coord_y_n=(vecp_y*z_beam(i)/z_beam(i-1)+bml_pos_y)/y_step 
        ind_x1=floor(coord_x_n)
        ind_x2=ceil(coord_x_n)
        ind_y1=floor(coord_y_n)
        ind_y2=ceil(coord_y_n)
        div_x1=(coord_x_n-ind_x1)
        if min(div_x1) eq 0 then div_x1(where(div_x1 eq 0))=1.0
        div_x2=(ind_x2-coord_x_n)
        if min(div_x2) eq 0 then div_x2(where(div_x2 eq 0))=1.0
        div_y1=(coord_y_n-ind_y1)
        if min(div_y1) eq 0 then div_y1(where(div_y1 eq 0))=1.0
        div_y2=(ind_y2-coord_y_n)
        if min(div_y2) eq 0 then div_y2(where(div_y2 eq 0))=1.0
        div_x12=(ind_x2-ind_x1)
        if min(div_x12) eq 0 then div_x12(where(div_x12 eq 0))=2.0      
        div_y12=(ind_y2-ind_y1)
        if min(div_y12) eq 0 then div_y12(where(div_y12 eq 0))=2.0
        length_coef=z_length_arr(i)*geom_fact
 ;        
        x_step_new=coord_x_n(1,0,0)-coord_x_n(0,0,0)
        y_step_new=coord_y_n(0,1,0)-coord_y_n(0,0,0)
        coord_x_n_cent=bml_pos_x/z_beam(i-1)*(z_beam(i-1)-z_beam(i))/x_step
        coord_y_n_cent=bml_pos_y/z_beam(i-1)*(z_beam(i-1)-z_beam(i))/y_step

        coord_x_n1=(coord_x-coord_x_n_cent)/x_step_new+((n_x-1)/2.0)
        coord_y_n1=(coord_y-coord_y_n_cent)/y_step_new+((n_y-1)/2.0)
         
        ind_x1_new=floor(coord_x_n1)
        ind_x2_new=ceil(coord_x_n1)
        ind_y1_new=floor(coord_y_n1)
        ind_y2_new=ceil(coord_y_n1)
        div_x1_new=(coord_x_n1-ind_x1_new)
        if min(div_x1_new) eq 0 then div_x1_new(where(div_x1_new eq 0))=1.0
        div_x2_new=(ind_x2_new-coord_x_n1)
        if min(div_x2_new) eq 0 then div_x2_new(where(div_x2_new eq 0))=1.0
        div_y1_new=(coord_y_n1-ind_y1_new)
        if min(div_y1_new) eq 0 then div_y1_new(where(div_y1_new eq 0))=1.0
        div_y2_new=(ind_y2_new-coord_y_n1)
        if min(div_y2_new) eq 0 then div_y2_new(where(div_y2_new eq 0))=1.0
        div_x12_new=(ind_x2_new-ind_x1_new)
        if min(div_x12_new) eq 0 then div_x12_new(where(div_x12_new eq 0))=2.0      
        div_y12_new=(ind_y2_new-ind_y1_new)
        if min(div_y12_new) eq 0 then div_y12_new(where(div_y12_new eq 0))=2.0
        
      endif    
      for k=0, n_ebeam-1 do begin
        if i gt ind_magnet and atten_type ne 5 then begin      
          ;bilinear interpolation
          n_sig11=n_tot_sigma(e_inc+k,z_inc,(ind_x1+(n_x-1)/2.0)>0<(n_x-1),(ind_y1+(n_y-1)/2.0)>0<(n_y-1))
          n_sig12=n_tot_sigma(e_inc+k,z_inc,(ind_x1+(n_x-1)/2.0)>0<(n_x-1),(ind_y2+(n_y-1)/2.0)>0<(n_y-1))
          n_sig21=n_tot_sigma(e_inc+k,z_inc,(ind_x2+(n_x-1)/2.0)>0<(n_x-1),(ind_y1+(n_y-1)/2.0)>0<(n_y-1))
          n_sig22=n_tot_sigma(e_inc+k,z_inc,(ind_x2+(n_x-1)/2.0)>0<(n_x-1),(ind_y2+(n_y-1)/2.0)>0<(n_y-1))
         ; added to fix the limiters attenuation error
        
          ;--------------------------------------------
          att_fac1=reform(att_fac(k,*,*,*))*exp(-double(((n_sig11*div_x2+n_sig21*div_x1)/div_x12*div_y2+(n_sig12*div_x2+n_sig22*div_x1)/div_x12*div_y1)/div_y12*length_coef)) 
          ;bilinear interpolation
          att11=att_fac1((ind_x1_new)>0<(n_x-1),(ind_y1_new)>0<(n_y-1),bml_pos_ind)
          att12=att_fac1((ind_x1_new)>0<(n_x-1),(ind_y2_new)>0<(n_y-1),bml_pos_ind)
          att21=att_fac1((ind_x2_new)>0<(n_x-1),(ind_y1_new)>0<(n_y-1),bml_pos_ind)
          att22=att_fac1((ind_x2_new)>0<(n_x-1),(ind_y2_new)>0<(n_y-1),bml_pos_ind)
          ; added to fix the limiters attenuation error
          ceil=1e3*z_length_arr(i)        
        
          ;--------------------------------------------
          att_fac(k,*,*,*)=((att11*div_x2_new+att21*div_x1_new)/div_x12_new*div_y2_new+(att12*div_x2_new+att22*div_x1_new)/div_x12_new*div_y1_new)/div_y12_new         
       ; if k eq 0 then print,total(att_fac(0,*,*,*))
       ; if i eq 41 then stop
        endif 
        if I_dens_par eq 0 then begin  ; if uniform source dens distribution
          n_beam(k,i,*,*)=total(reform(att_fac(k,*,*,*))*gauss_int,3)/(x_step*y_step*1e4) ;cm-2 ;removed n_beam(k,i,*,*)
          if vel_dis_type eq 0 then begin
            vecp_arr(*,*,2,*)=att_fac(k,*,*,*)*gauss_int
            for x_i=0,n_elements(x_beam)-1 do begin
              for y_i=0,n_elements(y_beam)-1 do begin
                res=sfit(reform(vecp_arr(x_i,y_i,*,*)),2,/irregular,kx=kx)
                vecp_coef(k,i,x_i,y_i,*)=kx
              endfor
            endfor
          endif
        endif else begin
          n_beam(k,i,*,*)=total(reform(att_fac(k,*,*,*))*dens_bml(k,*,*,*)*gauss_int,3)/(x_step*y_step*1e4) ;cm-2;removed n_beam(k,i,*,*)
          if vel_dis_type eq 0 then begin
            vecp_arr(*,*,2,*)=att_fac(k,*,*,*)*dens_bml(k,*,*,*)*gauss_int
            for x_i=0,n_elements(x_beam)-1 do begin
              for y_i=0,n_elements(y_beam)-1 do begin
                res=sfit(reform(vecp_arr(x_i,y_i,*,*)),2,/irregular,kx=kx)
                vecp_coef(k,i,x_i,y_i,*)=kx
              endfor
             endfor
          endif
        endelse
      endfor
        
      ;------------------------

      res=Widget_Event(Widget_Info(Main_Base, FIND_BY_UNAME='Ready_Button'),/nowait)
      if res.ID eq Widget_Info(Main_Base, FIND_BY_UNAME='Ready_Button') then begin
        st_err=2
        return
      endif
      if driver_on then begin
        res=Widget_Event(Widget_Info(driver_id, FIND_BY_UNAME='Run_Driver_Button'),/nowait)
        if res.ID eq Widget_Info(driver_id, FIND_BY_UNAME='Run_Driver_Button') then begin
            st_err=3
          return
        endif
      endif
    ;if i gt ind_magnet then stop,systime(/seconds)-systime_1
    endfor
    if I_dens_par eq 0 then begin  ; if uniform source dens distribution
      for k=0, n_ebeam-1 do begin      
        n_beam(k,*,*,*)=n_beam(k,*,*,*)*dens_bml(k) ;cm-3
      endfor
    endif
    ;added on Jan 21, 2010 to account for neutralizer.
    for i_z=0,locate(z_beam,neutr_front_dist) do begin
      n_beam(*,i_z,*,*)=0.0
    endfor
    for i_z=locate(z_beam,neutr_front_dist),locate(z_beam,neutr_front_dist+neutr_size) do begin
      if i_z ne -1 then n_beam(*,i_z,*,*)=n_beam(*,i_z,*,*)*(z_beam(i_z)-neutr_front_dist)/neutr_size
    endfor
   
    if vel_dis_type eq 0 then begin
      vel_vec_x=vecp_x
      vel_vec_y=vecp_y
      vel_vec_coef=vecp_coef 
    endif else begin
      vel_vec_x=0
      vel_vec_y=0
      vel_vec_coef=0 
    endelse

    Widget_control, status_wid, Get_Value=status_tx
    status_tx=status_tx(0:n_elements(status_tx)-2)
    Widget_Control, status_wid,Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
  ' : The calculation was finished']], Set_text_top_line=n_elements(status_tx)-4 



end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure changes the slider values based on the data dimensions
;-------------------------------------------------------------------------------------------------------------------------
Pro prepare_sliders,Main_base
;The following common block contains X,Y,Z coordinate arrays used for the beam
;calculation grid and output 3D arrays of the beam density and excitation fracitons
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------
  dum=Widget_Info(Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),/slider_min_max)
  cur_sl_z_max=dum(1) 
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=cur_sl_z_val

  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Start'),Set_Value=' '+strtrim(string(z_beam(0),format='(F10.2)'),1)+' m'
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_End'),Set_Value=strtrim(string(z_beam(n_elements(z_beam)-1),format='(F10.2)'),1)+' m'
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Set_Slider_Max=n_elements(z_beam)-1
 
  Z_B_Slider_val=round((n_elements(z_beam)-1)/float(cur_sl_z_max)*cur_sl_z_val)

  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Set_Value=Z_B_Slider_val
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Label'),Set_Value='Distance from Accelerating Grids z_beam: '$
  +strtrim(string(Z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'

  dum=Widget_Info(Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),/slider_min_max)
  cur_sl_x_max=dum(1) 
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Get_Value=cur_sl_x_val

  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Start'),Set_Value=strtrim(string(x_beam(0),format='(F10.2)'),1)+' m'
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_End'),Set_Value=strtrim(string(x_beam(n_elements(x_beam)-1),format='(F10.2)'),1)+' m'
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Set_Slider_Max=n_elements(x_beam)-1
  
  X_B_Slider_val=round((n_elements(x_beam)-1)/float(cur_sl_x_max)*cur_sl_x_val)
  
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Set_Value=X_B_Slider_val
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Label'),Set_Value='Beam X coordinate: '$
  +strtrim(string(X_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'

  dum=Widget_Info(Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),/slider_min_max)
  cur_sl_y_max=dum(1)
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=cur_sl_y_val
 
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Start'),Set_Value=strtrim(string(y_beam(0),format='(F10.2)'),1)+' m'
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_End'),Set_Value=strtrim(string(y_beam(n_elements(y_beam)-1),format='(F10.2)'),1)+' m'
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Set_Slider_Max=n_elements(y_beam)-1
  
  Y_B_Slider_val=round((n_elements(y_beam)-1)/float(cur_sl_y_max)*cur_sl_y_val)

  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Set_Value=Y_B_Slider_val
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Label'),Set_Value='Beam Y coordinate: '$
  +strtrim(string(Y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
  
 
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_1'),Sensitive=1  
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_1') ,Sensitive=1

  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_2') ,Sensitive=0
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_2'),Sensitive=0 
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_3') ,Sensitive=0
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_3'),Sensitive=0 
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_4') ,Sensitive=0
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_4'),Sensitive=0 
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_5') ,Sensitive=0
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_5'),Sensitive=0 
 
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_1') ,Set_Value='E_full : '+strtrim(string(e_beam(0),format='(F5.1)'),2)
  Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_1'),Set_Value=1
  for i=1, n_elements(e_beam)-1 do begin
    Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
    Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
    Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,$
    set_value='E/'+strtrim(string(round(e_beam(0)/e_beam(i)),format='(I2)'),2)+': '+strtrim(string(e_beam(i),format='(F5.1)'),2)
    Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Set_Value=0
  endfor
 
  
 ; Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Start'),Set_Value=strtrim(string(e_beam(0),format='(F10.1)'),1)+' keV'
 ; Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_End'),Set_Value=strtrim(string(e_beam(n_elements(e_beam)-1),format='(F10.1)'),1)+' keV'
 ; Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Slider'),Set_Slider_Max=n_elements(e_beam)-1
 ; e_b_val = 0 
 ; Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Slider'),Get_Value=e_b_val
 ; Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label'),Set_Value='Beam Energy component: '$
 ; +strtrim(string(E_beam(e_b_val),format='(F10.1)'),1)+' keV'
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure changes the sensitivity of the slides in accordance to the plot routine
;-------------------------------------------------------------------------------------------------------------------------
Pro sens_control,Main_base
;The following common block contains X,Y,Z coordinate arrays used for the beam
;calculation grid and output 3D arrays of the beam density and excitation fracitons
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------
 plot_val=Widget_Info(Widget_Info(Main_base, FIND_BY_UNAME='Plot_Choice_Droplist'), /Droplist_Select)
 case plot_val of
 0: begin
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=1   
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=1
      for i=0, n_elements(e_beam)-1 do begin
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
      endfor 
    end 
 1: begin
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=1   
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=1
      for i=0, n_elements(e_beam)-1 do begin
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
      endfor 
    end  
 2: begin
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=1   
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=1
       for i=0, n_elements(e_beam)-1 do begin
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
      endfor 
    end
 3: begin
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=1   
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=1
       for i=0, n_elements(e_beam)-1 do begin
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
      endfor 
   end
 4: begin
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=1   
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=1
       for i=0, n_elements(e_beam)-1 do begin
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
      endfor 
   end
 5: begin
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Set_value=0
      for i=0, n_elements(e_beam)-1 do begin
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
      endfor 
   end 
 6: begin
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=1   
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=1
      for i=0, n_elements(e_beam)-1 do begin
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
      endfor 
    end  
 7: begin
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=1   
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=1
      for i=0, n_elements(e_beam)-1 do begin
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
      endfor 
    end  
 8: begin
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=1   
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=1
      for i=0, n_elements(e_beam)-1 do begin
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
      endfor 
    end  
 9: begin
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=1   
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=1
      for i=0, n_elements(e_beam)-1 do begin
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
      endfor 
    end 
 10: begin
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=1   
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=1
      for i=0, n_elements(e_beam)-1 do begin
         Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
      endfor 
    end 
 11: begin
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=1   
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=1
      for i=0, n_elements(e_beam)-1 do begin
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
      endfor 
    end
 12: begin
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Set_value=0
      for i=0, n_elements(e_beam)-1 do begin
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
      endfor 
    end
 13: begin
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Set_value=0
      for i=0, n_elements(e_beam)-1 do begin
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
      endfor 
   end
   14: begin
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
      Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Set_value=0
      for i=0, n_elements(e_beam)-1 do begin
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
        Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
      endfor 
    end
endcase
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which plots output results. Plot button under the graph window
;-------------------------------------------------------------------------------------------------------------------------
Pro plot_output, Main_base
;The following common block contains some of the settings of "export
;graph to the file"
common export_file, export_file,export_sel,export_flag
;The following common block contains the parameter which data is
;curently plotted
common draw_request,draw_req
;The following common block contains the parameters which describe the geometry
;and position of the machine plasma
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower
;The following commong block contains the rho arrays which used for
;mapping of 1D Ne,Te,Z_eff arrays to the machine 3D coordinated and
;eventually to the beam coordinates.
common flux_surfaces, rho_arr_beam_coord,rho_grid,rgrid_arr,zgrid_arr,rgrid_midplane,rho_grid_midplane
;The following common block contains 1D n_e profiles of raw and
;smoothed data, 3D n_e and ne_stop_cross_section arrays after they constructed
common dens_electrons,n_e_coord,n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr,ne_stop_cross_section
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block contains X,Y,Z coordinate arrays used for the beam
;calculation grid and output 3D arrays of the beam density and excitation fraciton
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution) 
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for calculation
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err 

 ;-----------------------------------------------------
 if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
 ;-----------------------------------------------------
    ;beam atom
    beam_atom_table=['H','D','T']
    beam_atom_mass=[1.0,2.0,3.0]
    m_atom=(beam_atom_mass(where(beam_atom_table eq beam_atom)))(0)
 
 if export_flag and export_sel eq 1 then begin
   close,3
   openw,3,export_file
   printf,3,';Exported Data from ALCBEAM plot'
   printf,3,'----------------------------------' 
   printf,3,''
   printf,3,';File is created on:'
   printf,3, systime()
   printf,3,';File is created by:'
   printf,3, 'ALCBEAM (ver. '+alcbeam_ver+')'
 endif 
 draw_req=2
 sens_control,Main_Base
 plot_val=Widget_Info(Widget_Info(Main_base, FIND_BY_UNAME='Plot_Choice_Droplist'), /Droplist_Select)
 Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Plot_Choice_Droplist'),get_value=plot_table
 plot_text=plot_table(plot_val)
 Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Scale_Check'),get_value=scale_check
 WIDGET_CONTROL,Widget_Info(Main_base, FIND_BY_UNAME='Result_Plot') , GET_VALUE=drawID
 wset, drawID

 Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),get_value=exc_B_check
 case exc_B_check of
   0: begin 
        n_beam_val=n_beam 
        exc_titl=' (n=1,2,3: total)'
      end
   1: begin 
        n_beam_val=n_beam*(1.0-exc_n2_frac-exc_n3_frac) 
        exc_titl=' (n=1: ground)'
      end
   2: begin
        n_beam_val=n_beam*exc_n2_frac 
        exc_titl=' (n=2: 1st excited)'
      end
   3: begin
        n_beam_val=n_beam*exc_n3_frac 
        exc_titl=' (n=3: 2nd excited)'
      end
 endcase
if plot_val eq 0 then begin
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
   endfor
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   if total(e_check) gt 1 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Several beam energy components are selected. Volume of the component with maximal energy is plotted.']], Set_text_top_line=n_elements(status_tx)-4
   endif
   E_B_Val=(where(e_check gt 0))(0)
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   !X.Margin=[9,9]
   !Y.Margin=[3,2]
   n_beam_linear=fltarr(n_elements(z_beam));1/cm
   for j=0,n_elements(z_beam)-1 do n_beam_linear(j)=total(n_beam_val(e_b_val,j,*,*))*(x_beam(1)-x_beam(0))*(y_beam(1)-y_beam(0))*1e4 ;1/cm
   max_val=max(n_beam_linear)
   min_val=min(n_beam_linear)
   cont_val=max(n_beam_val(e_b_val,*,*,*))/30.0
   scale_coef=fix(alog10(max_val))
   if e_b_val eq 0 then e_str='(E!Dfull!N energy)' else e_str='(E/'+strtrim(string(round(1.0/e_frac(e_b_val)),format='(I2)'),2)+' energy)'
   titl='Line density and shape of '+e_str+exc_titl
   xtitl='Z beam, m'
   ytitl='X beam, m'
   ztitl='Y beam, m'
 
   n_beam1=reform(n_beam_val(e_b_val,*,*,*))*10.0^(-scale_coef)
   z_beam1=reverse(z_beam)
   n_beam1=reverse(n_beam1,1)
   n_beam_linear=reverse(n_beam_linear)
   xrange=[max(z_beam1),min(z_beam1)]
   yrange=[min(x_beam),max(x_beam)]
   zrange=[min(y_beam),max(y_beam)]
   Set_Plot, 'Z'
   erase
   geom=Widget_Info(Widget_Info(Main_base, FIND_BY_UNAME='Result_Plot'),/Geometry)
   xsize=geom.xsize
   ysize=geom.ysize
   Device,Set_resolution=[xsize,ysize]
   SCALE3, XRANGE=xrange, YRANGE=yrange, ZRANGE=zrange,az=35,ax=35
   shad=n_beam1
   for i=0,n_elements(z_beam1)-1 do shad(i,*,*)=n_beam_linear(i)
   shad1=bytscl(exp(shad/max(shad)),top=208-16)+16
   set_shading,reject=0
   shade_volume,n_beam1,cont_val*10.0^(-scale_coef),v,p,shades=shad1,/low
   x_vert=interpol(z_beam1,make_array(n_elements(z_beam1),/index),reform(v(0,*)),/spline)
   y_vert=interpol(x_beam,make_array(n_elements(x_beam),/index),reform(v(1,*)),/spline)
   z_vert=interpol(y_beam,make_array(n_elements(y_beam),/index),reform(v(2,*)),/spline)
   tv,make_array(xsize,ysize,value=255)
   !x.margin=[0,1]
   !z.margin=[3,1]
   !y.margin=[1,1]
   surface,dist(30),/nodata,XRANGE=xrange, YRANGE=yrange, ZRANGE=zrange,/noerase,xstyle=1,ystyle=1,zstyle=1,/t3d,color=-1,$
   charsize=3,/save
   axis,min(z_beam1),min(x_beam),min(y_beam),/t3d,xaxis=0,charsize=2.5,xstyle=1,color=0,xtitle=xtitl
   axis,min(z_beam1),max(x_beam),min(y_beam),/t3d,xaxis=1,charsize=2,xstyle=1,color=0,xtickname=replicate(' ',30)
   axis,min(z_beam1),max(x_beam),max(y_beam),/t3d,xaxis=1,charsize=2,xstyle=1,color=0,xtickname=replicate(' ',30)
   axis,min(z_beam1),min(x_beam),max(y_beam),/t3d,xaxis=1,charsize=2,xstyle=1,color=0,xtickname=replicate(' ',30)
   axis,max(z_beam1),min(x_beam),min(y_beam),/t3d,yaxis=0,charsize=2.5,ystyle=1,color=0,ytitle=ytitl
   axis,min(z_beam1),min(x_beam),min(y_beam),/t3d,yaxis=0,charsize=2,ystyle=1,color=0,ytickname=replicate(' ',30)
   axis,max(z_beam1),min(x_beam),max(y_beam),/t3d,yaxis=0,charsize=2,ystyle=1,color=0,ytickname=replicate(' ',30)
   axis,min(z_beam1),min(x_beam),max(y_beam),/t3d,yaxis=0,charsize=2,ystyle=1,color=0,ytickname=replicate(' ',30)
   axis,max(z_beam1),max(x_beam),min(y_beam),/t3d,zaxis=0,charsize=2,zstyle=1,color=0,ztickname=replicate(' ',30)
   axis,max(z_beam1),min(x_beam),min(y_beam),/t3d,zaxis=0,charsize=2,zstyle=1,color=0,ztickname=replicate(' ',30)
   axis,min(z_beam1),max(x_beam),max(y_beam),/t3d,zaxis=0,charsize=2,zstyle=1,color=0,ztickname=replicate(' ',30)
   axis,min(z_beam1),min(x_beam),min(y_beam),/t3d,zaxis=0,charsize=2.5,zstyle=1,color=0,ztitle=ztitl

   a=polyshade(x_vert,y_vert,z_vert,p,/t3d,shades=shad1)
   snap=tvrd()
   set_plot,'X'
   TV,snap
   xyouts,20,300,'Beam: '+beam,/device,color=-1,charsize=1.3,charthick=6 
   xyouts,20,300,'Beam: '+beam,/device,color=0,charsize=1.3,charthick=1
   xyouts,20,280,'Shot: '+strtrim(string(shot),2),/device,color=-1,charsize=1.3,charthick=6
   xyouts,20,280,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3,charthick=1
   xyouts,20,260,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=-1,charsize=1.3,charthick=6
   xyouts,20,260,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3,charthick=1
   xyouts,20,240,'Beam atom: '+strtrim(beam_atom),/device,color=-1,charsize=1.3,charthick=6
   xyouts,20,240,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3,charthick=1
   xyouts,20,220,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=-1,charsize=1.3,charthick=6
   xyouts,20,220,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=0,charsize=1.3,charthick=1  
   xyouts,xsize/2.0,395,titl,alignment=0.5,color=0,charsize=1.6,/device
   ;horizontal colorbar--------------------------------------------------------------------------------------------------------------------------
   w_x_size=!D.X_Vsize & w_y_size=!D.Y_Vsize
   pos=[0.08,0.85,0.83,0.92] & n_ticks=7 & col_min=16 & col_max=208 & n_colors=255
   bar_pos_x=pos(0)*w_x_size & bar_pos_y=pos(1)*w_y_size & bar_size_x= (pos(2)-pos(0))*w_x_size & bar_size_y=(pos(3)-pos(1))*w_y_size
   bar = transpose(interpol([col_min,col_max],n_colors) ## replicate(1,10))
   TV, CONGRID(bar, bar_size_x, bar_size_y), bar_pos_x+1, bar_pos_y+1
   plot,[0,bar_size_x],[0,bar_size_y],/nodata,yticks=1,xticks=n_ticks-1,xstyle=1,ystyle=1,position=pos,color=0,charsize=1.4,/noerase,ytickformat='(A1)',$
   xminor=2,xtickname=string(interpol([min_val,max_val]*10.0^(-scale_coef),n_ticks),format='(F4.2)'),xticklen=0.2
   xyouts,436,360,'x10!U '+strtrim(string(scale_coef,format='(I2)'),2)+'!Ncm!U-1!N',color=0,charsize=1.4,/device
   ;----------------------------------------------------------------------------------------------------------------------------------
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
      ' : No file export is supported for this type of graph.']], Set_text_top_line=n_elements(status_tx)-4
     st_err=1      
     endelse
   endif    
 endif 
if plot_val eq 1 then begin
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
   endfor
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   if total(e_check) gt 1 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Several beam energy components are selected. Contour of the component with maximal energy is plotted.']], Set_text_top_line=n_elements(status_tx)-4
   endif
   E_B_Val=(where(e_check gt 0))(0)
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   !X.Margin=[9,9]
   !Y.Margin=[3,2]
   if scale_check eq 1 then begin
      max_val=max(n_beam_val(e_b_val,*,*,*))
      min_val=min(n_beam_val(e_b_val,*,*,*))
   endif else begin
      max_val=max(n_beam_val(e_b_val,Z_B_Slider_val,*,*))
      min_val=min(n_beam_val(e_b_val,Z_B_Slider_val,*,*))
   endelse
   if min_val eq max_val then max_val=min_val+1
   scale_coef=fix(alog10(max_val))
   if e_b_val eq 0 then e_str='(E!Dfull!N energy)' else e_str='(E/'+strtrim(string(round(1.0/e_frac(e_b_val)),format='(I2)'),2)+' energy)'
   titl='Beam density of '+e_str+exc_titl
   xtitl='Beam X coordinate, m'
   ytitl='Beam Y coordinate, m'
   contour, n_beam_val(e_b_val,Z_B_Slider_val,*,*)*10.0^(-scale_coef),x_beam,y_beam,color=0,background=-1,ystyle=1,xstyle=1,xtitle=xtitl,ytitle=ytitl,$
   levels=interpol([min_val,max_val]*10.0^(-scale_coef),255),C_COLORS = interpol([16,208],255), /FILL,title=titl,Charsize=1.5
   oplot,[0,0],[-max(y_beam),max(y_beam)],color=-1,linestyle=2
   oplot,[-max(x_beam),max(x_beam)],[0,0],color=-1,linestyle=2
   xyouts,280,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3,charthick=3
   xyouts,280,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=-1,charsize=1.3,charthick=1  
   xyouts,90,360,'Beam: '+beam,/device,color=0,charsize=1.3,charthick=3
   xyouts,90,360,'Beam: '+beam,/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3,charthick=3
   xyouts,90,340,'Shot: '+strtrim(string(shot),2),/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3,charthick=3
   xyouts,90,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3,charthick=3
   xyouts,90,300,'Beam atom: '+strtrim(beam_atom),/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=0,charsize=1.3,charthick=3
   xyouts,90,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=-1,charsize=1.3,charthick=1
   ;colorbar--------------------------------------------------------------------------------------------------------------------------
   w_x_size=!D.X_Vsize & w_y_size=!D.Y_Vsize
   pos=[0.95,0.11,0.99,0.85] & n_ticks=7 & col_min=16 & col_max=208 & n_colors=255
   bar_pos_x=pos(0)*w_x_size & bar_pos_y=pos(1)*w_y_size & bar_size_x= (pos(2)-pos(0))*w_x_size & bar_size_y=(pos(3)-pos(1))*w_y_size
   bar = interpol([col_min,col_max],n_colors) ## replicate(1,10)
   TV, CONGRID(bar, bar_size_x, bar_size_y), bar_pos_x+1, bar_pos_y+1
   plot,[0,bar_size_x],[0,bar_size_y],/nodata,xticks=1,yticks=n_ticks-1,xstyle=1,ystyle=1,position=pos,color=0,charsize=1.4,/noerase,xtickformat='(A1)',$
   yminor=2,ytickname=string(interpol([min_val,max_val]*10.0^(-scale_coef),n_ticks),format='(F4.2)'),yticklen=0.2
   xyouts,438,370,'x10!U '+strtrim(string(scale_coef,format='(I2)'),2)+'!Ncm!U-3!N',color=0,charsize=1.4,/device
   ;----------------------------------------------------------------------------------------------------------------------------------
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,plot_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl+' x10!U '+strtrim(string(scale_coef,format='(I2)'),2)+'!Ncm!U-3!N'
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Contourz'
       printf,3,reform(n_beam_val(e_b_val,Z_B_Slider_val,*,*))*10.0^(-scale_coef)
       printf,3,''
       printf,3,';Contourx'
       printf,3,x_beam
       printf,3,''
       printf,3,';Contoury'
       printf,3,y_beam
       printf,3,''
       close,3      
     endelse
   endif    
 endif
if plot_val eq 2 then begin
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
   endfor
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   E_B_Val=where(e_check gt 0)
   n_z=n_elements(z_beam)
   n_x=n_elements(x_beam)
   n_y=n_elements(y_beam)
   n_energy_sel=n_elements(E_B_Val)
   n_beam_linear=fltarr(n_energy_sel,n_z);1/cm
   for i=0,n_energy_sel-1 do begin
    for j=0,n_z-1 do begin
      n_beam_linear(i,j)=total(n_beam_val(e_b_val(i),j,*,*))*(x_beam(1)-x_beam(0))*(y_beam(1)-y_beam(0))*1e4 ;1/cm
    endfor
   endfor
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   max_val=max(n_beam_linear)
   scale_coef=fix(alog10(max_val))
   color_ind=[0,48,64,112,160]
   titl='Beam Line Density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !Ncm!U-1!N'+exc_titl
   xtitl='Distance from accelerating grids, m'
   ytitl='Beam line density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !Ncm!U-1!N'
   plot, z_beam, z_beam,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   for i=0, n_energy_sel-1 do begin
     if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
     e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
     oplot, z_beam, n_beam_linear(i,*)*10.0^(-scale_coef),color=color_ind(e_b_val(i))
     xyouts,70,130-i*20,e_str,/device,color=color_ind(e_b_val(i)),charsize=1.3
   endfor 
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3
   xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,plot_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       for i=0, n_energy_sel-1 do begin
         if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
         e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
         printf,3,';Text'
         printf,3,e_str
         printf,3,''
         printf,3,';Plotx'
         printf,3,z_beam
         printf,3,''
         printf,3,';Ploty'
         printf,3,reform(n_beam_linear(i,*))*10.0^(-scale_coef)
         printf,3,''
       endfor      
       close,3      
     endelse
   endif 
 endif 
 if plot_val eq 3 then begin
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
   endfor
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   E_B_Val=where(e_check gt 0)
   n_z=n_elements(z_beam)
   n_x=n_elements(x_beam)
   n_y=n_elements(y_beam)
   n_energy_sel=n_elements(E_B_Val)
   
  ;calulation r_major along the beam centerline x_beam=0, y_beam=0
   grid_cent_x=r_grid*cos(phi_grid)
   grid_cent_y=-r_grid*sin(phi_grid)
   wall_cent_x=r_wall*cos(phi_wall)
   wall_cent_y=-r_wall*sin(phi_wall)
   dist_all_XY=sqrt((wall_cent_x-grid_cent_x)^2.0+(wall_cent_y-grid_cent_y)^2.0)
   sin_pivot=-(wall_cent_y-grid_cent_y)/dist_all_XY;angle in machine XY plane (horizontal)
   cos_pivot=-(wall_cent_x-grid_cent_x)/dist_all_XY
  
   dist_all_XYZ=sqrt((wall_cent_x-grid_cent_x)^2.0+(wall_cent_y-grid_cent_y)^2.0+(z_wall-z_grid)^2.0)
   sin_alpha=(z_wall-z_grid)/dist_all_XYZ ; angle in machine XZ plane (vertical)
   cos_alpha=sqrt(1.0-sin_alpha^2.0)
   ;rotating beam coordinate to machine midplane projection 
   ix=(n_x-1)/2
   iy=(n_y-1)/2
   z_beam1=z_beam*cos_alpha-y_beam(iy)*sin_alpha
   y_beam1=z_beam*sin_alpha+y_beam(iy)*cos_alpha+z_grid
   x_beam1=x_beam(ix)                    
   ;moving beam to machine center and rotating
   x_tor2=-z_beam1*cos_pivot+x_beam1*sin_pivot+r_grid*cos(phi_grid)
   y_tor2=-z_beam1*sin_pivot-x_beam1*cos_pivot-r_grid*sin(phi_grid)
   r_tor2=sqrt(x_tor2^2.0+y_tor2^2.0)
   min_r_tor2 = min(r_tor2,min_ind)
   r_tor3 = r_tor2(0:min_ind)
   ind_all = where(r_tor3 gt r_major-r_minor*1.2 and r_tor3 lt r_major+r_minor*1.2)
   
   ind1 = max(ind_all)
   ind2 = min(ind_all)
   r_output=reverse(r_tor3(ind_all))
   ;---------------------------------------------------------------
   n_beam_linear=fltarr(n_energy_sel,n_z);1/cm
   for i=0,n_energy_sel-1 do begin
    for j=ind2,ind1 do begin
      n_beam_linear(i,j)=total(n_beam_val(e_b_val(i),j,*,*))*(x_beam(1)-x_beam(0))*(y_beam(1)-y_beam(0))*1e4 ;1/cm
    endfor
   endfor
  !X.Margin=[7,3]
   !Y.Margin=[3,2]
   max_val=max(n_beam_linear)
   scale_coef=fix(alog10(max_val))
   color_ind=[0,48,64,112,160]
   titl='Beam Line Density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !Ncm!U-1!N'+exc_titl
   xtitl='Major radius, m'
   ytitl='Beam line density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !Ncm!U-1!N'
   plot, r_output, r_output,color=0,/nodata,background=-1,ystyle=0,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl,xrange=[r_major-1.2*r_minor,r_major+1.2*r_minor]
   for i=0, n_energy_sel-1 do begin
     if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
     e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
     oplot, r_output, reverse(n_beam_linear(i,ind2:ind1),2)*10.0^(-scale_coef),color=color_ind(e_b_val(i))
     xyouts,70,230-i*20,e_str,/device,color=color_ind(e_b_val(i)),charsize=1.3
   endfor 
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3
   xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,plot_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       for i=0, n_energy_sel-1 do begin
         if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
         e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
         printf,3,';Text'
         printf,3,e_str
         printf,3,''
         printf,3,';Plotx'
         printf,3,r_output
         printf,3,''
         printf,3,';Ploty'
         printf,3,reform(reverse(n_beam_linear(i,ind2:ind1),2))*10.0^(-scale_coef)
         printf,3,''
       endfor      
       close,3      
     endelse
   endif 
 endif 
  if plot_val eq 4 then begin
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
   endfor
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   E_B_Val=where(e_check gt 0)
   n_ebeam=n_elements(e_beam)
   n_z=n_elements(z_beam)
   n_x=n_elements(x_beam)
   n_y=n_elements(y_beam)
   n_energy_sel=n_elements(E_B_Val)
  
   ; check if construct arrays are existed
   if n_elements(rho_arr_beam_coord) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : This plot is only available just after recent ALCBEAM run.']], Set_text_top_line=n_elements(status_tx)-4    
     return
   endif
   
   ne_sigma=fltarr(n_ebeam,n_z,n_x,n_y)
   for i=0, n_ebeam-1 do begin
      ne_sigma(i,*,*,*)=n_e_arr*ne_stop_cross_section(i,*,*,*)
   endfor
   r_sort_ind=sort(rho_arr_beam_coord)
   ;z_length_arr=[z_beam(1:n_z-1)-z_beam(0:n_z-2),z_beam(n_z-1)-z_beam(n_z-2)]*100.0 ;length array; cm
   z_length_arr=[z_beam(1)-z_beam(0),z_beam(1:n_z-1)-z_beam(0:n_z-2)]*100.0 ;length array for attenuation integral cm

   
   n_dep_5=n_beam
   for p=0, n_elements(z_length_arr)-1 do begin
     ;n_dep_5(*,p,*,*)=n_beam(*,p,*,*)*(1.0-exp(-double(ne_sigma(*,p,*,*)*z_length_arr(p))));same step
     ;n_dep_5(*,p,*,*)=n_beam(*,p,*,*)*(exp(double(ne_sigma(*,p,*,*)*z_length_arr(p)))-1);previous step
     n_dep_5(*,p,*,*)=n_beam(*,p,*,*)*((1.0-exp(-double(ne_sigma(*,p,*,*)*z_length_arr(p))))+(exp(double(ne_sigma(*,p,*,*)*z_length_arr(p)))-1))/2.0 ; mean
   endfor
  ; save,n_dep_5,e_beam,z_beam,y_beam,x_beam,filename='/home/bespam/transp/n_dep_5.dat'
  ; stop
   n_dep_sort=fltarr(n_elements(e_beam),n_elements(z_beam)*n_elements(x_beam)*n_elements(y_beam))
   for p=0, n_elements(e_beam)-1 do n_dep_sort(p,*)=(n_dep_5(p,*,*,*))(r_sort_ind)

    ;z_step=round((z_beam(n_elements(z_beam)-1)-z_beam(n_elements(z_beam)-2))*100000.0)/100000.0
    x_step=round((x_beam(n_elements(x_beam)-1)-x_beam(n_elements(x_beam)-2))*100000.0)/100000.0
    y_step=round((y_beam(n_elements(y_beam)-1)-y_beam(n_elements(y_beam)-2))*100000.0)/100000.0
    ;bin size eq 0.05 of rho
    n_bin=20.0
    rho_sort_round=(round(rho_arr_beam_coord(r_sort_ind)*n_bin+0.5)-0.5)/n_bin
    rho_sort_uniq=rho_sort_round(uniq(rho_sort_round))
   
    rho=rho_sort_uniq(where(rho_sort_uniq lt 1.0)); ceters of the flux zones

    n_dep=fltarr(n_elements(e_beam),n_elements(rho))
    n_dep_rate=fltarr(n_elements(e_beam),n_elements(rho))
    p_dep=fltarr(n_elements(e_beam))
    p_inj=fltarr(n_elements(e_beam))
 

    vel=SQRT(2.0*1.602E-19*E_beam*1000.0/1.673E-27/m_atom) ; m/sec
    for p=0, n_elements(e_beam)-1 do begin
    for i=0, n_elements(rho)-1 do begin
         n_dep(p,i)=total(n_dep_sort(p,where(rho_sort_round eq rho(i))))
    endfor
    endfor
    
     
   for p=0, n_elements(e_beam)-1 do  n_dep_rate(p,*)=n_dep(p,*)*x_step*y_step*vel(p)*1e6;/flux_vol/1e6

    wset, drawID
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   max_val=max(n_dep_rate(e_b_val,*))
   scale_coef=fix(alog10(max_val))
   color_ind=[0,48,64,112,160]
   titl='Beam Neutral Deposition, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !Nptcl/sec'
   xtitl='sqrt(normalized tor flux), rho'
   ytitl='Beam Neutral Deposition, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !Nptcl/sec'
   plot, rho, rho,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   for i=0, n_energy_sel-1 do begin
     if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
     e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
     oplot, rho, n_dep_rate(e_b_val(i),*)*10.0^(-scale_coef),color=color_ind(e_b_val(i))
     xyouts,70,230-i*20,e_str,/device,color=color_ind(e_b_val(i)),charsize=1.3
   endfor 
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3
   xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,plot_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       for i=0, n_energy_sel-1 do begin
         if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
         e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
         printf,3,';Text'
         printf,3,e_str
         printf,3,''
         printf,3,';Plotx'
         printf,3,rho
         printf,3,''
         printf,3,';Ploty'
         printf,3,reform(n_dep_rate(e_b_val(i),*))*10.0^(-scale_coef)
         printf,3,''
       endfor      
       close,3      
     endelse
   endif 
 endif 
 if plot_val eq 5 then begin
   n_z=n_elements(z_beam)
   n_x=n_elements(x_beam)
   n_y=n_elements(y_beam)
   n_ebeam=n_elements(e_beam)
   n_beam_linear=fltarr(n_ebeam,n_z);1/cm
   vel=SQRT(2.0*1.602E-19*E_beam*1000.0/1.673E-27/m_atom)*100.0 ; cm/sec
   beam_power=fltarr(n_z);1/cm
   for i=0,n_ebeam-1 do begin
    for j=0,n_z-1 do begin
      n_beam_linear(i,j)=total(n_beam_val(i,j,*,*))*(x_beam(1)-x_beam(0))*(y_beam(1)-y_beam(0))*1e4 ;1/cm
    endfor
   endfor
   for i=0, n_ebeam-1 do begin
     beam_power=beam_power+n_beam_linear(i,*)*e_beam(i)*vel(i)*1e3*1.602e-19
   endfor
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   max_val=max(beam_power)
   scale_coef=fix(alog10(max_val))
   color_ind=[0,48,64,112,160]
   titl='Total beam power (in atoms), x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !NW'
   xtitl='Distance from accelerating grids, m'
   ytitl='Total beam power (in atoms), x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !NW'
   plot, z_beam, z_beam,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   oplot, z_beam, beam_power*10.0^(-scale_coef),color=0 
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3
   xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,plot_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Plotx'
       printf,3, z_beam
       printf,3,''
       printf,3,';Ploty'
       printf,3,beam_power*10.0^(-scale_coef)
       printf,3,''
       close,3      
     endelse
   endif  
 endif 
 if plot_val eq 6 then begin
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
   endfor
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   E_B_Val=where(e_check gt 0)
   n_z=n_elements(z_beam)
   n_x=n_elements(x_beam)
   n_y=n_elements(y_beam)
   n_energy_sel=n_elements(E_B_Val)
   x_fwhm=fltarr(n_energy_sel,n_z);full width half maximum
   x_fwhm1=fltarr(n_z);full width half maximum (in case of single beamlet, no focus)
   x_fwhm2=fltarr(n_z);full width half maximum (in case of no beamlet divergence)  
   for i=0,n_energy_sel-1 do begin
    for j=0,n_z-1 do begin
      prof=n_beam_val(e_b_val(i),j,*,n_y/2)
      if mean(prof) ne 0.0 then begin
        n_int=2000
        x_beam_int=interpol([x_beam(0),x_beam(n_x-1)],n_int)
        prof_int=interpol(prof,x_beam,x_beam_int,/spline)
        prof_int_max=max(prof_int)
        ind=where(prof_int-prof_int_max/2.0 gt 0)
        ind1=ind(0)
        ind2=ind(n_elements(ind)-1)
        x_fwhm(i,j)=(x_beam_int(ind2)-x_beam_int(ind1))*100.0 ;cm
     endif else begin
        x_fwhm(i,j)=!Values.F_NAN
     endelse
    endfor
   endfor
   x_fwhm1=z_beam*2.0*sqrt(alog(2.0))*x_div_bml_opt*!PI/180.0*100.0 ;cm
   grid_size=max(x_bml)*100.0*2.0; cm
   x_fwhm2=-z_beam*grid_size/x_grid_focus+grid_size;)*100.0 ;cm
   ;stop,grid_size, grid_focus
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   max_val=max(x_fwhm,/NAN)
   color_ind=[0,48,64,112,160]
   titl='Beam X_FWHM, cm'+exc_titl
   xtitl='Distance from accelerating grids, m'
   ytitl='Beam Full Width at Half Maximum, cm'
   plot, z_beam, z_beam,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   z_cal=tank_front_dist+tank_size+tank_cal_dist
   xyouts,300,160,'Z cal = '+strtrim(string(z_cal,format='(F10.3)'),2)+' m',/device,color=0,charsize=1.3
   for i=0, n_energy_sel-1 do begin
     if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
     e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
     oplot, z_beam, x_fwhm(i,*),color=color_ind(e_b_val(i))
     oplot, z_beam, x_fwhm1,color=color_ind(e_b_val(i)),linestyle=2
     oplot, z_beam, x_fwhm2,color=color_ind(e_b_val(i)),linestyle=2   
     oplot,[z_cal,z_cal],[interpol(x_fwhm(i,*),z_beam,z_cal),interpol(x_fwhm(i,*),z_beam,z_cal)],psym=4,symsize=1.4,color=color_ind(e_b_val(i))
     xyouts,70,130-i*20,e_str,/device,color=color_ind(e_b_val(i)),charsize=1.3
     xyouts,300,130-i*20,'X_FWHM @ cal = '+strtrim(string(interpol(x_fwhm(i,*),z_beam,z_cal),format='(F10.2)'),2)+' cm',/device,color=color_ind(e_b_val(i)),charsize=1.3
   endfor 
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3
   xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,plot_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z cal = '+strtrim(string(z_cal,format='(F10.3)'),2)+' m'
       printf,3,''
       for i=0, n_energy_sel-1 do begin
         if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
         e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
         printf,3,';Text'
         printf,3,e_str
         printf,3,''
         printf,3,';Plotx'
         printf,3,z_beam
         printf,3,''
         printf,3,';Ploty'
         printf,3,reform(x_fwhm(i,*))
         printf,3,''
       endfor      
       close,3      
     endelse
   endif
 endif
 if plot_val eq 7 then begin
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
   endfor
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   E_B_Val=where(e_check gt 0)
   n_z=n_elements(z_beam)
   n_x=n_elements(x_beam)
   n_y=n_elements(y_beam)
   n_energy_sel=n_elements(E_B_Val)
   y_fwhm=fltarr(n_energy_sel,n_z);full width half maximum
   y_fwhm1=fltarr(n_z);full width half maximum (in case of single beamlet, no focus)
   y_fwhm2=fltarr(n_z);full width half maximum (in case of no beamlet divergence) 
   for i=0,n_energy_sel-1 do begin
    for j=0,n_z-1 do begin
      prof=n_beam_val(e_b_val(i),j,n_x/2,*)
      if mean(prof) ne 0 then begin 
        n_int=2000
        y_beam_int=interpol([y_beam(0),y_beam(n_y-1)],n_int)
        prof_int=interpol(prof,y_beam,y_beam_int,/spline)
        prof_int_max=max(prof_int)
        ind=where(prof_int-prof_int_max/2.0 gt 0)
        ind1=ind(0)
        ind2=ind(n_elements(ind)-1)
        y_fwhm(i,j)=(y_beam_int(ind2)-y_beam_int(ind1))*100.0 ;cm
      endif else begin
        y_fwhm(i,j)=!Values.F_NAN
      endelse
    endfor
   endfor
   y_fwhm1=z_beam*2.0*sqrt(alog(2.0))*y_div_bml_opt*!PI/180.0*100.0 ;cm
   grid_size=max(y_bml)*100.0*2.0; cm
   y_fwhm2=-z_beam*grid_size/y_grid_focus+grid_size;)*100.0 ;cm
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   max_val=max(y_fwhm,/NAN)
   color_ind=[0,48,64,112,160]
   titl='Beam Y_FWHM, cm'+exc_titl
   xtitl='Distance from accelerating grids, m'
   ytitl='Beam Full Width at Half Maximum, cm'
   plot, z_beam, z_beam,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   z_cal=tank_front_dist+tank_size+tank_cal_dist
   xyouts,300,160,'Z cal = '+strtrim(string(z_cal,format='(F10.3)'),2)+' m',/device,color=0,charsize=1.3
   for i=0, n_energy_sel-1 do begin
     if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
     e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
     oplot, z_beam, y_fwhm(i,*),color=color_ind(e_b_val(i))
     oplot, z_beam, y_fwhm1,color=color_ind(e_b_val(i)),linestyle=2
     oplot, z_beam, y_fwhm2,color=color_ind(e_b_val(i)),linestyle=2
     oplot,[z_cal,z_cal],[interpol(y_fwhm(i,*),z_beam,z_cal),interpol(y_fwhm(i,*),z_beam,z_cal)],psym=4,symsize=1.4,color=color_ind(e_b_val(i))
     xyouts,70,130-i*20,e_str,/device,color=color_ind(e_b_val(i)),charsize=1.3
     xyouts,300,130-i*20,'Y_FWHM @ cal = '+strtrim(string(interpol(y_fwhm(i,*),z_beam,z_cal),format='(F10.2)'),2)+' cm',/device,color=color_ind(e_b_val(i)),charsize=1.3
   endfor 
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3
   xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,plot_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z cal = '+strtrim(string(z_cal,format='(F10.3)'),2)+' m'
       printf,3,''
       for i=0, n_energy_sel-1 do begin
         if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
         e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
         printf,3,';Text'
         printf,3,e_str
         printf,3,''
         printf,3,';Plotx'
         printf,3,z_beam
         printf,3,''
         printf,3,';Ploty'
         printf,3,reform(y_fwhm(i,*))
         printf,3,''
       endfor      
       close,3      
     endelse
   endif
 endif
 if plot_val eq 8 then begin
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
   endfor
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   E_B_Val=where(e_check gt 0)
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(n_beam_val(e_b_val,*,*,*)) else max_val=max(n_beam_val(e_b_val,*,X_B_Slider_val,Y_B_Slider_val))
   scale_coef=fix(alog10(max_val))
   n_energy_sel=n_elements(E_B_Val)
   color_ind=[0,48,64,112,160]
   titl='Beam density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !N cm!U-3!N'+exc_titl
   xtitl='Distance from accelerating grids, m'
   ytitl='Beam density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !Ncm!U-3!N'
   plot, z_beam, z_beam,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   for i=0, n_energy_sel-1 do begin
     if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
     e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
     oplot, z_beam, n_beam_val(e_b_val(i),*,X_B_Slider_val,Y_B_Slider_val)*10.0^(-scale_coef),color=color_ind(e_b_val(i))
     xyouts,70,130-i*20,e_str,/device,color=color_ind(e_b_val(i)),charsize=1.3
   endfor 
   xyouts,330,360,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3
   xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,plot_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       for i=0, n_energy_sel-1 do begin
         if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
         e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
         printf,3,';Text'
         printf,3,e_str
         printf,3,''
         printf,3,';Plotx'
         printf,3,z_beam
         printf,3,''
         printf,3,';Ploty'
         printf,3,reform(n_beam_val(e_b_val(i),*,X_B_Slider_val,Y_B_Slider_val))*10.0^(-scale_coef)
         printf,3,''
       endfor      
       close,3      
     endelse
   endif
 endif
if plot_val eq 9 then begin
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
   endfor
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   E_B_Val=where(e_check gt 0)
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   n_z=n_elements(z_beam)   

   ;calulation r_major along the beam centerline x_beam=0, y_beam=0
   grid_cent_x=r_grid*cos(phi_grid)
   grid_cent_y=-r_grid*sin(phi_grid)
   wall_cent_x=r_wall*cos(phi_wall)
   wall_cent_y=-r_wall*sin(phi_wall)
   dist_all_XY=sqrt((wall_cent_x-grid_cent_x)^2.0+(wall_cent_y-grid_cent_y)^2.0)
   sin_pivot=-(wall_cent_y-grid_cent_y)/dist_all_XY;angle in machine XY plane (horizontal)
   cos_pivot=-(wall_cent_x-grid_cent_x)/dist_all_XY
  
   dist_all_XYZ=sqrt((wall_cent_x-grid_cent_x)^2.0+(wall_cent_y-grid_cent_y)^2.0+(z_wall-z_grid)^2.0)
   sin_alpha=(z_wall-z_grid)/dist_all_XYZ ; angle in machine XZ plane (vertical)
   cos_alpha=sqrt(1.0-sin_alpha^2.0)
   ;rotating beam coordinate to machine midplane projection 
   ix=x_b_slider_val
   iy=y_b_slider_val
   z_beam1=z_beam*cos_alpha-y_beam(iy)*sin_alpha
   y_beam1=z_beam*sin_alpha+y_beam(iy)*cos_alpha+z_grid
   x_beam1=x_beam(ix)                    
   ;moving beam to machine center and rotating
   x_tor2=-z_beam1*cos_pivot+x_beam1*sin_pivot+r_grid*cos(phi_grid)
   y_tor2=-z_beam1*sin_pivot-x_beam1*cos_pivot-r_grid*sin(phi_grid)
   r_tor2=sqrt(x_tor2^2.0+y_tor2^2.0)
   min_r_tor2 = min(r_tor2,min_ind)
   r_tor3 = r_tor2(0:min_ind)
   ind_all = where(r_tor3 gt r_major-r_minor*1.2 and r_tor3 lt r_major+r_minor*1.2)
   
   ind1 = max(ind_all)
   ind2 = min(ind_all)
   r_output=reverse(r_tor3(ind_all))   
   ;---------------------------------------------------------------

   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(n_beam_val(e_b_val,ind2:ind1,*,*)) else max_val=max(n_beam_val(e_b_val,ind2:ind1,X_B_Slider_val,Y_B_Slider_val))
   scale_coef=fix(alog10(max_val))
   n_energy_sel=n_elements(E_B_Val)
   color_ind=[0,48,64,112,160]
   titl='Beam density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !N cm!U-3!N'+exc_titl
   xtitl='Major radius, m'
   ytitl='Beam density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !Ncm!U-3!N'
   plot, r_output, r_output,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl,xrange=[r_major-1.2*r_minor,r_major+1.2*r_minor]
   for i=0, n_energy_sel-1 do begin
     if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
     e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
     oplot, r_output, reverse(n_beam_val(e_b_val(i),ind2:ind1,X_B_Slider_val,Y_B_Slider_val),2)*10.0^(-scale_coef),color=color_ind(e_b_val(i))
     xyouts,70,230-i*20,e_str,/device,color=color_ind(e_b_val(i)),charsize=1.3
   endfor 
   xyouts,330,360,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3
   xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,plot_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       for i=0, n_energy_sel-1 do begin
         if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
         e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
         printf,3,';Text'
         printf,3,e_str
         printf,3,''
         printf,3,';Plotx'
         printf,3,r_output
         printf,3,''
         printf,3,';Ploty'
         printf,3,reform(reverse(n_beam_val(e_b_val(i),ind2:ind1,X_B_Slider_val,Y_B_Slider_val),2))*10.0^(-scale_coef)
         printf,3,''
       endfor      
       close,3      
     endelse
   endif
 endif 
 if plot_val eq 10 then begin
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
   endfor
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   E_B_Val=where(e_check gt 0)
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(n_beam_val(e_b_val,*,*,*)) else max_val=max(n_beam_val(e_b_val,Z_B_Slider_val,*,Y_B_Slider_val))
   scale_coef=fix(alog10(max_val))
   n_energy_sel=n_elements(E_B_Val)
   color_ind=[0,48,64,112,160]
   titl='Beam density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !N cm!U-3!N'+exc_titl
   xtitl='Beam X coordinate, m'
   ytitl='Beam density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !Ncm!U-3!N'
   plot, x_beam, z_beam,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   for i=0, n_energy_sel-1 do begin
     if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
     e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
     oplot, x_beam, n_beam_val(e_b_val(i),Z_B_Slider_Val,*,Y_B_Slider_val)*10.0^(-scale_coef),color=color_ind(e_b_val(i))
     xyouts,70,130-i*20,e_str,/device,color=color_ind(e_b_val(i)),charsize=1.3
     ind_1=(n_elements(x_beam)-1)/3
     ind_2=n_elements(x_beam)-1-(n_elements(x_beam)-1)/3
     val_1=n_beam_val(e_b_val(i),Z_B_Slider_val,ind_1,Y_B_Slider_val)
     val_2=n_beam_val(e_b_val(i),Z_B_Slider_val,ind_2,Y_B_Slider_val)
     oplot,[x_beam(ind_1),x_beam(ind_2)],[val_1,val_2]*10.0^(-scale_coef), psym=4,symsize=2,color=color_ind(e_b_val(i))
     oplot,[x_beam(ind_1),x_beam(ind_1),x_beam(ind_1),x_beam(ind_2),x_beam(ind_2)],[val_1,0,!Values.F_NAN,0,val_2]*10.0^(-scale_coef),color=color_ind(e_b_val(i)),linestyle=2
     xyouts,330,310-i*20,'Asymmetry  : '+strtrim(string(((val_2-val_1)/(val_1+val_2)*200.0),format='(F10.2)'),1)+' %',/device,color=color_ind(e_b_val(i)),charsize=1.3
   endfor 
   oplot,[0,0],[0,2.0*max_val*10.0^(-scale_coef)],color=0,linestyle=2
   xyouts,330,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3 
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3
   xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,plot_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       for i=0, n_energy_sel-1 do begin
         if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
         e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
         printf,3,';Text'
         printf,3,e_str
         printf,3,''
         printf,3,';Plotx'
         printf,3,x_beam
         printf,3,''
         printf,3,';Ploty'
         printf,3,reform(n_beam_val(e_b_val(i),Z_B_Slider_Val,*,Y_B_Slider_val))*10.0^(-scale_coef)
         printf,3,''
       endfor      
       close,3      
     endelse
   endif
 endif
 if plot_val eq 11 then begin
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
   endfor
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   E_B_Val=where(e_check gt 0)
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(n_beam_val(e_b_val,*,*,*)) else max_val=max(n_beam_val(e_b_val,Z_B_Slider_val,X_B_Slider_val,*))
   scale_coef=fix(alog10(max_val))
   n_energy_sel=n_elements(E_B_Val)
   color_ind=[0,48,64,112,160]
   titl='Beam density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !N cm!U-3!N'+exc_titl
   xtitl='Beam Y coordinate, m'
   ytitl='Beam density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !Ncm!U-3!N'
   plot, y_beam, z_beam,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   for i=0, n_energy_sel-1 do begin
     if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
     e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
     oplot, y_beam, n_beam_val(e_b_val(i),Z_B_Slider_Val,X_B_Slider_val,*)*10.0^(-scale_coef),color=color_ind(e_b_val(i))
     xyouts,70,130-i*20,e_str,/device,color=color_ind(e_b_val(i)),charsize=1.3
     ind_1=(n_elements(y_beam)-1)/3
     ind_2=n_elements(y_beam)-1-(n_elements(y_beam)-1)/3
     val_1=n_beam_val(e_b_val(i),Z_B_Slider_val,X_B_Slider_val,ind_1)
     val_2=n_beam_val(e_b_val(i),Z_B_Slider_val,X_B_Slider_val,ind_2)
     oplot,[y_beam(ind_1),y_beam(ind_2)],[val_1,val_2]*10.0^(-scale_coef), psym=4,symsize=2,color=color_ind(e_b_val(i))
     oplot,[y_beam(ind_1),y_beam(ind_1),y_beam(ind_1),y_beam(ind_2),y_beam(ind_2)],[val_1,0,!Values.F_NAN,0,val_2]*10.0^(-scale_coef),color=color_ind(e_b_val(i)),linestyle=2
     xyouts,330,310-i*20,'Asymmetry  : '+strtrim(string(((val_2-val_1)/(val_1+val_2)*200.0),format='(F10.2)'),1)+' %',/device,color=color_ind(e_b_val(i)),charsize=1.3
   endfor 
   oplot,[0,0],[0,2.0*max_val*10.0^(-scale_coef)],color=0,linestyle=2
   xyouts,330,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'X coordinate: '+strtrim(string(x_beam(x_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
  
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3
   xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,plot_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       for i=0, n_energy_sel-1 do begin
         if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
         e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
         printf,3,';Text'
         printf,3,e_str
         printf,3,''
         printf,3,';Plotx'
         printf,3,y_beam
         printf,3,''
         printf,3,';Ploty'
         printf,3,reform(n_beam_val(e_b_val(i),Z_B_Slider_Val,X_B_Slider_val,*))*10.0^(-scale_coef)
         printf,3,''
       endfor      
       close,3      
     endelse
   endif
 endif
 if plot_val eq 12 then begin
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
   endfor
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   E_B_Val=where(e_check gt 0)
   n_z=n_elements(z_beam)
   n_x=n_elements(x_beam)
   n_y=n_elements(y_beam)
   n_energy_sel=n_elements(E_B_Val)
   n_beam_linear=fltarr(n_energy_sel,n_z);1/cm
   n_beam_lost=fltarr(n_energy_sel,n_z);1/cm
   for i=0,n_energy_sel-1 do begin
    for j=0,n_z-1 do begin
      n_beam_linear(i,j)=total(n_beam_val(e_b_val(i),j,*,*))*(x_beam(1)-x_beam(0))*(y_beam(1)-y_beam(0))*1e4 ;1/cm
    endfor
   endfor
   for i=0, n_energy_sel-1 do begin
     n_beam_lost(i,0:n_z-2)=((n_beam_linear(i,0:n_z-2)-n_beam_linear(i,1:n_z-1))/(z_beam(1:n_z-1)-z_beam(0:n_z-2))/1e4)>0
   endfor
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   max_val=max(n_beam_lost)
   scale_coef=fix(alog10(max_val))
   color_ind=[0,48,64,112,160]
   titl='Loss of beam line density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !Ncm!U-2!N'
   xtitl='Distance from accelerating grids, m'
   ytitl='Loss of beam line density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !Ncm!U-2!N'
   plot, z_beam, z_beam,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   for i=0, n_energy_sel-1 do begin
     if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
     e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
     oplot, z_beam, n_beam_lost(i,*)*10.0^(-scale_coef),color=color_ind(e_b_val(i)),psym=10
     xyouts,70,130-i*20,e_str,/device,color=color_ind(e_b_val(i)),charsize=1.3
   endfor 
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3
   xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,plot_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       for i=0, n_energy_sel-1 do begin
         if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
         e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
         printf,3,';Text'
         printf,3,e_str
         printf,3,''
         printf,3,';Plotx'
         printf,3,z_beam
         printf,3,''
         printf,3,';Ploty'
         printf,3,reform(n_beam_lost(i,*))*10.0^(-scale_coef)
         printf,3,''
       endfor      
       close,3      
     endelse
   endif
 endif 
 if plot_val eq 13 then begin
   n_z=n_elements(z_beam)
   n_x=n_elements(x_beam)
   n_y=n_elements(y_beam)
   n_ebeam=n_elements(e_beam)
   n_beam_linear=fltarr(n_ebeam,n_z);1/cm
   vel=SQRT(2.0*1.602E-19*E_beam*1000.0/1.673E-27/m_atom)*100.0 ; cm/sec
   beam_power_lost=fltarr(n_z);1/cm
   for i=0,n_ebeam-1 do begin
    for j=0,n_z-1 do begin
      n_beam_linear(i,j)=total(n_beam_val(i,j,*,*))*(x_beam(1)-x_beam(0))*(y_beam(1)-y_beam(0))*1e4 ;1/cm
    endfor
   endfor
   for i=0, n_ebeam-1 do begin
     beam_power_lost(0:n_z-2)=beam_power_lost(0:n_z-2)+reform((((n_beam_linear(i,0:n_z-2)-n_beam_linear(i,1:n_z-1))/(z_beam(1:n_z-1)-z_beam(0:n_z-2))/1e2)>0)*e_beam(i)*vel(i)*1e3*1.602e-19)
   endfor
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   max_val=max(beam_power_lost)
   scale_coef=fix(alog10(max_val))
   color_ind=[0,48,64,112,160]
   titl='Beam power loss, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !NW/cm'
   xtitl='Distance from accelerating grids, m'
   ytitl='Beam power loss, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !NW/cm'
   plot, z_beam, z_beam,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   oplot, z_beam, beam_power_lost*10.0^(-scale_coef),color=0,psym=10
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3
   xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,plot_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Plotx'
       printf,3, z_beam
       printf,3,''
       printf,3,';Ploty'
       printf,3, beam_power_lost*10.0^(-scale_coef)
       printf,3,''
       close,3      
     endelse
   endif  
 endif
 if plot_val eq 14 then begin
   e_check=make_array(n_elements(e_beam))
   if n_elements(vel_vec_x) lt  3 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : There are no velocity distribution data available']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
   endfor
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   if total(e_check) gt 1 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Several beam energy components are selected. Contour of the component with maximal energy is plotted.']], Set_text_top_line=n_elements(status_tx)-4
   endif
   E_B_Val=(where(e_check gt 0))(0)
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[9,9]
   !Y.Margin=[3,2]
   coef_arr=fltarr(n_elements(x_beam),n_elements(y_beam),9,n_elements(x_bml));define a coef array
   for j=0,n_elements(x_bml)-1 do coef_arr(*,*,*,j)=reform(vel_vec_coef(e_b_val,z_b_Slider_val,*,*,*))
   x_coord=reform(vel_vec_x(x_b_slider_val,y_b_slider_val,*))
   y_coord=reform(vel_vec_y(x_b_slider_val,y_b_slider_val,*))
   z_val_arr=reform(coef_arr(*,*,0,*))+reform(coef_arr(*,*,1,*))*vel_vec_y+reform(coef_arr(*,*,2,*))*vel_vec_y^2+reform(coef_arr(*,*,3,*))*vel_vec_x+reform(coef_arr(*,*,4,*))*vel_vec_x*vel_vec_y+$
   reform(coef_arr(*,*,5,*))*vel_vec_x*vel_vec_y^2.0+reform(coef_arr(*,*,6,*))*vel_vec_x^2.0+reform(coef_arr(*,*,7,*))*vel_vec_x^2*vel_vec_y+reform(coef_arr(*,*,8,*))*vel_vec_x^2*vel_vec_y^2
   coef=reform(coef_arr(x_b_slider_val,y_b_slider_val,*,0))
   z_val=coef(0)+coef(1)*y_coord+coef(2)*y_coord^2+coef(3)*x_coord+coef(4)*x_coord*y_coord+coef(5)*x_coord*y_coord^2.0+coef(6)*x_coord^2.0+coef(7)*x_coord^2*y_coord+coef(8)*x_coord^2*y_coord^2
   ;correct distribution, since it can't be negative
   z_val=z_val>0
   z_val_arr=z_val_arr>0
   if scale_check eq 1 then begin
      max_val=max(z_val_arr)
      min_val=min(z_val_arr)
   endif else begin
      max_val=max(z_val)
      min_val=min(z_val)
   endelse
   if max_val ne 0 then scale_coef=round(alog10(max_val)) else scale_coef=0
   if min_val eq max_val then max_val=min_val+1
   if e_b_val eq 0 then e_str='(E!Dfull!N energy)' else e_str='(E/'+strtrim(string(round(1.0/e_frac(e_b_val)),format='(I2)'),2)+' energy)'
   titl='Beam velocity distribution of '+e_str
   xtitl='Velocity X coordinate, m'
   ytitl='Velocity Y coordinate, m'
   
   contour, [[0,0],[0,0]],[min(x_coord),max(x_coord)],[min(y_coord),max(y_coord)],color=0,background=-1,ystyle=1,xstyle=1,xtitle=xtitl,ytitle=ytitl,$
   levels=[0,1],C_COLORS = [0,-1], /FILL,title=titl,Charsize=1.5
   contour, z_val*10.0^(-scale_coef),x_coord,y_coord,/irregular,/overplot,$
   levels=interpol([min_val*10.0^(-scale_coef),max_val*10.0^(-scale_coef)],255),C_COLORS = interpol([16,208],255), /FILL
   oplot,[0,0],[-max(y_beam),max(y_beam)],color=-1,linestyle=2
   oplot,[-max(x_beam),max(x_beam)],[0,0],color=-1,linestyle=2
   xyouts,280,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3,charthick=3
   xyouts,280,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=-1,charsize=1.3,charthick=1
   xyouts,280,340,'X distance  : '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3,charthick=3
   xyouts,280,340,'X distance  : '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=-1,charsize=1.3,charthick=1
   xyouts,280,320,'Y distance  : '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3,charthick=3
   xyouts,280,320,'Y distance  : '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,360,'Beam: '+beam,/device,color=0,charsize=1.3,charthick=3
   xyouts,90,360,'Beam: '+beam,/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3,charthick=3
   xyouts,90,340,'Shot: '+strtrim(string(shot),2),/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3,charthick=3
   xyouts,90,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3,charthick=3
   xyouts,90,300,'Beam atom: '+strtrim(beam_atom),/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=0,charsize=1.3,charthick=3
   xyouts,90,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=-1,charsize=1.3,charthick=1
   ;colorbar--------------------------------------------------------------------------------------------------------------------------
   w_x_size=!D.X_Vsize & w_y_size=!D.Y_Vsize
   pos=[0.95,0.11,0.99,0.85] & n_ticks=7 & col_min=16 & col_max=208 & n_colors=255
   bar_pos_x=pos(0)*w_x_size & bar_pos_y=pos(1)*w_y_size & bar_size_x= (pos(2)-pos(0))*w_x_size & bar_size_y=(pos(3)-pos(1))*w_y_size
   bar = interpol([col_min,col_max],n_colors) ## replicate(1,10)
   TV, CONGRID(bar, bar_size_x, bar_size_y), bar_pos_x+1, bar_pos_y+1
   plot,[0,bar_size_x],[0,bar_size_y],/nodata,xticks=1,yticks=n_ticks-1,xstyle=1,ystyle=1,position=pos,color=0,charsize=1.4,/noerase,xtickformat='(A1)',$
   yminor=2,ytickname=string(interpol([min_val*10.0^(-scale_coef),max_val*10.0^(-scale_coef)],n_ticks),format='(F4.2)'),yticklen=0.2
   xyouts,458,370,'x10!U '+strtrim(string(scale_coef,format='(I2)'),2),color=0,charsize=1.4,/device
   ;----------------------------------------------------------------------------------------------------------------------------------
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,plot_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl+' x10!U '+strtrim(string(scale_coef,format='(I2)'),2)
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'X distance  : '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y distance  : '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Contourz'
       printf,3,z_val
       printf,3,''
       printf,3,';Contourx'
       printf,3,x_coord
       printf,3,''
       printf,3,';Contoury'
       printf,3,y_coord
       printf,3,''
       close,3      
     endelse
   endif    
 endif
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which plots input 1D ne,te,z_eff arrays and 2D grid
;structure. Plot button is located under the Load base.
;-------------------------------------------------------------------------------------------------------------------------
Pro plot_input, Main_base
;The following common block contains some of the settings of "export
;graph to the file"
common export_file, export_file,export_sel,export_flag
;The following common block contains 1D n_e profiles of raw and
;smoothed data, 3D n_e and ne_stop_cross_section arrays after they constructed
common dens_electrons,n_e_coord,n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr,ne_stop_cross_section
;The following common block contains 1D t_e profiles of raw and
;smoothed data and 3D t_e array after it constructed.
common temp_electrons,t_e_coord,t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
;The following common block contains 1D z_eff profiles of raw and
;smoothed data and 3D z_eff array after it constructed.
common effective_charge, z_eff_coord, z_eff_raw,z_eff_raw_err,z_eff_raw_r,z_eff,z_eff_err,z_eff_r,z_eff_arr,z_eff_err_arr
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for calculation.
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block contains the parameter which data is
;curently plotted
common draw_request,draw_req
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution) 
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err 

;-----------------------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
 ;-----------------------------------------------------

 if export_flag and export_sel eq 1 then begin
   close,3
   openw,3,export_file
   printf,3,';Exported Data from ALCBEAM plot'
   printf,3,'----------------------------------' 
   printf,3,''
   printf,3,';File is created on:'
   printf,3, systime()
   printf,3,';File is created by:'
   printf,3, 'ALCBEAM (ver. '+alcbeam_ver+')'
 endif

 preview_val=Widget_Info(Widget_Info(Main_base, FIND_BY_UNAME='Preview_Data_Droplist'), /Droplist_Select)
 Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Preview_Data_Droplist'),get_value=preview_table
 preview_text=preview_table(preview_val)
 Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Scale_Check'),get_value=scale_check
 WIDGET_CONTROL,Widget_Info(Main_base, FIND_BY_UNAME='Result_Plot') , GET_VALUE=drawID
 wset, drawID
 draw_req=0
 if preview_val eq 0 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   !X.Margin=[10,6]
   !Y.Margin=[3,2]
  
   titl='Apertures in the accelerating grid'
   xtitl='Beam X coordinate, cm'
   ytitl='Beam Y coordinate, cm'
   ;---------------------
   XY_scale=(max(y_bml)-min(y_bml))/(max(x_bml)-min(x_bml))
   x_scale=1.2>XY_scale
   y_scale=1.2>1.0/XY_scale
   ;plot circles----------
   ang=make_array(45,/index)*2.0*!Pi/45.0
   rad=grid_ap_diam/((max(y_bml)-min(y_bml))*1e2*y_scale)*5.65
   usersym,rad*sin(ang),rad*cos(ang)
   ;-------------------------------
   plot, x_bml*100.0, y_bml*100.0,color=0,background=-1,ystyle=1,xstyle=1,psym=8,yrange=[min(y_bml)*1e2*y_scale,max(y_bml)*1e2*y_scale],$
   xrange=[min(x_bml)*1e2*x_scale,max(x_bml)*1e2*x_scale],Thick=1, Charsize=1.5, ticklen=0,ytitle=ytitl,xtitle=xtitl, Title=titl
   xyouts,95,368,'Beam: '+beam,/device,color=0,charsize=1.3,charthick=1
   xyouts,95,348,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3,charthick=1
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Plotx'
       printf,3,x_bml*100.0
       printf,3,''
       printf,3,';Ploty'
       printf,3,y_bml*100.0
       printf,3,''
       close,3      
     endelse
   endif    
endif
if preview_val eq 1 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   !X.Margin=[10,9]
   !Y.Margin=[3,2]
   ;---------------------
   XY_scale=(max(y_bml)-min(y_bml))/(max(x_bml)-min(x_bml))
   x_scale=1.2>XY_scale
   y_scale=1.2>1.0/XY_scale
   ;plot circles----------
   ang=make_array(45,/index)*2.0*!Pi/45.0
   rad=grid_ap_diam/((max(y_bml)-min(y_bml))*1e2*y_scale)*5.65
   usersym,rad*sin(ang),rad*cos(ang)
   ;-------------------------------
   x_b=interpol([min(x_bml)*120,max(x_bml)*120],100) & y_b=interpol([min(y_bml)*120,max(y_bml)*120],100)
   a=max([x_bml,y_bml])*100.0
   n_bml=n_elements(x_bml)
   ; source density formula
   J_coef=I_beam*1e3/(!Pi*(grid_ap_diam/10.0/2.0)^2.0*total(1.0-I_dens_par*(x_bml^2+y_bml^2)/a^2))
   j_bml=J_coef*(1-I_dens_par*((y_b^2.0 ## make_array(n_elements(x_b),value=1))+(make_array(n_elements(x_b),value=1) ## y_b^2.0))/a^2.0)   
   j_bml=j_bml>0
   ;-----------------------
   min_val=min(j_bml*0.999) & max_val=max(j_bml*1.0)
   titl='Extraction current density, mA/cm!U2!N'
   xtitl='Beam X coordinate, cm'
   ytitl='Beam Y coordinate, cm'
   contour,j_bml ,x_b,y_b,color=0,background=-1,ystyle=1,xstyle=1,xtitle=xtitl,ytitle=ytitl,$
   levels=interpol([min_val,max_val],255),C_COLORS = interpol([16,208],255), /FILL,title=titl,Charsize=1.5,yrange=[min(y_bml)*1e2*y_scale,max(y_bml)*1e2*y_scale],$
   xrange=[min(x_bml)*1e2*x_scale,max(x_bml)*1e2*x_scale]
   oplot, x_bml*100.0, y_bml*100.0,color=0,psym=8
   oplot,[0,0],[-max(y_b),max(y_b)],color=0,linestyle=2
   oplot,[-max(x_b),max(x_b)],[0,0],color=0,linestyle=2
   xyouts,95,368,'Beam: '+beam,/device,color=0,charsize=1.3,charthick=3
   xyouts,95,368,'Beam: '+beam,/device,color=-1,charsize=1.3,charthick=1
   xyouts,95,348,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3,charthick=3
   xyouts,95,348,'Shot: '+strtrim(string(shot),2),/device,color=-1,charsize=1.3,charthick=1
   ;colorbar--------------------------------------------------------------------------------------------------------------------------
   w_x_size=!D.X_Vsize & w_y_size=!D.Y_Vsize
   pos=[0.95,0.11,0.99,0.92] & n_ticks=7 & col_min=16 & col_max=208 & n_colors=255
   bar_pos_x=pos(0)*w_x_size & bar_pos_y=pos(1)*w_y_size & bar_size_x= (pos(2)-pos(0))*w_x_size & bar_size_y=(pos(3)-pos(1))*w_y_size
   bar = interpol([col_min,col_max],n_colors) ## replicate(1,10)
   TV, CONGRID(bar, bar_size_x, bar_size_y), bar_pos_x+1, bar_pos_y+1
   plot,[0,bar_size_x],[0,bar_size_y],/nodata,xticks=1,yticks=n_ticks-1,xstyle=1,ystyle=1,position=pos,color=0,charsize=1.4,/noerase,xtickformat='(A1)',$
   yminor=2,ytickname=string(interpol([min_val,max_val],n_ticks),format='(F7.1)'),yticklen=0.2
   ;----------------------------------------------------------------------------------------------------------------------------------
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Plotx'
       printf,3,x_bml
       printf,3,''
       printf,3,';Ploty'
       printf,3,y_bml
       printf,3,''
       printf,3,';Contourz'
       printf,3,j_bml
       printf,3,''
       printf,3,';Contourx'
       printf,3,x_b
       printf,3,''
       printf,3,';Contoury'
       printf,3,y_b
       printf,3,''
       close,3       
     endelse
   endif 
 endif
if preview_val eq 2 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   max_val=max(n_e_raw)
   max_range=max(n_e_raw+n_e_err)
   scale_coef=fix(alog10(max_val))
   titl='Electron density'
   if n_e_coord eq 0 then xtitl='Major radius, m'
   if n_e_coord eq 1 then xtitl='rho = sqrt(psi)'
   if n_e_coord eq 2 then xtitl='rho = sqrt(phi)'
   ytitl='Electron density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+'!N cm!U-3!N'
   plot, n_e_raw_r, n_e_raw*10.0^(-scale_coef),color=0,background=-1,xstyle=0,ystyle=0,psym=6,yrange=[0,max_range*10.0^(-scale_coef)],$
   Thick=1, Charsize=1.5, ticklen=1,xtitle=xtitl,ytitle=ytitl,title=titl
   !P.Color=0
   if n_elements(n_e_raw_err) lt 50 then oploterr, n_e_raw_r, n_e_raw*10.0^(-scale_coef),n_e_raw_err*10.0^(-scale_coef)
   !P.Color=-1
   oplot, n_e_r, n_e*10.0^(-scale_coef),color=120
   oplot, n_e_r, (n_e+n_e_err)*10.0^(-scale_coef),color=60
   oplot, n_e_r, (n_e-n_e_err)*10.0^(-scale_coef),color=60
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Plotx'
       printf,3,n_e_raw_r
       printf,3,''
       printf,3,';Ploty'
       printf,3, n_e_raw*10.0^(-scale_coef)
       printf,3,''
       printf,3,';Plotx'
       printf,3,n_e_r
       printf,3,''
       printf,3,';Ploty'
       printf,3, n_e*10.0^(-scale_coef)
       printf,3,''
       printf,3,';Plotx'
       printf,3,n_e_r
       printf,3,''
       printf,3,';Ploty'
       printf,3, (n_e+n_e_err)*10.0^(-scale_coef)
       printf,3,''
       printf,3,';Plotx'
       printf,3,n_e_r
       printf,3,''
       printf,3,';Ploty'
       printf,3, (n_e-n_e_err)*10.0^(-scale_coef)
       printf,3,''
       close,3       
     endelse
   endif 
endif
if preview_val eq 3 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   max_val=max(t_e_raw)
   max_range=max(t_e_raw+t_e_err)
   titl='Electron temperature'
   if t_e_coord eq 0 then xtitl='Major radius, m'
   if t_e_coord eq 1 then xtitl='rho = sqrt(psi)'
   if t_e_coord eq 2 then xtitl='rho = sqrt(phi)'
   ytitl='Electron temperature, keV'
   plot, t_e_raw_r, t_e_raw,color=0,background=-1,xstyle=0,ystyle=0,psym=6,yrange=[0,max_range],$
   Thick=1, Charsize=1.5, ticklen=1,xtitle=xtitl,ytitle=ytitl,title=titl
   !P.Color=0
   if n_elements(t_e_raw_err) lt 50 then oploterr, t_e_raw_r, t_e_raw,t_e_raw_err
   !P.Color=-1
   oplot, t_e_r, t_e,color=120
   oplot, t_e_r, t_e+t_e_err,color=60
   oplot, t_e_r, t_e-t_e_err,color=60
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Plotx'
       printf,3,t_e_raw_r
       printf,3,''
       printf,3,';Ploty'
       printf,3, t_e_raw
       printf,3,''
       printf,3,';Plotx'
       printf,3, t_e_r
       printf,3,''
       printf,3,';Ploty'
       printf,3, t_e
       printf,3,''
       printf,3,';Plotx'
       printf,3, t_e_r
       printf,3,''
       printf,3,';Ploty'
       printf,3, t_e+t_e_err
       printf,3,''
       printf,3,';Plotx'
       printf,3, t_e_r
       printf,3,''
       printf,3,';Ploty'
       printf,3, t_e-t_e_err
       printf,3,''
       close,3       
     endelse
   endif 
endif
if preview_val eq 4 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   max_val=max(z_eff_raw)
   max_range=max(z_eff_raw+z_eff_err)
   titl='Effective charge (Z!Deff!N)'
   if z_eff_coord eq 0 then xtitl='Major radius, m'
   if z_eff_coord eq 1 then xtitl='rho = sqrt(psi)'
   if z_eff_coord eq 2 then xtitl='rho = sqrt(phi)'
   ytitl='Z!Deff!N'
   plot, z_eff_raw_r, z_eff_raw,color=0,background=-1,xstyle=0,ystyle=0,psym=6,yrange=[0,max_range*1.1],$
   Thick=1, Charsize=1.5, ticklen=1,xtitle=xtitl,ytitle=ytitl,$
   title=titl
   !P.Color=0
   if n_elements(z_eff_raw_err) lt 50 then oploterr, z_eff_raw_r, z_eff_raw,z_eff_raw_err
   !P.Color=-1
   oplot, z_eff_r, z_eff,color=120
   oplot, z_eff_r, z_eff+z_eff_err,color=60
   oplot, z_eff_r, z_eff-z_eff_err,color=60
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Plotx'
       printf,3, z_eff_raw_r
       printf,3,''
       printf,3,';Ploty'
       printf,3, z_eff_raw
       printf,3,''
       printf,3,';Plotx'
       printf,3, z_eff_r
       printf,3,''
       printf,3,';Ploty'
       printf,3, z_eff
       printf,3,''
       printf,3,';Plotx'
       printf,3, z_eff_r
       printf,3,''
       printf,3,';Ploty'
       printf,3, z_eff+z_eff_err
       printf,3,''
       printf,3,';Plotx'
       printf,3, z_eff_r
       printf,3,''
       printf,3,';Ploty'
       printf,3, z_eff-z_eff_err
       printf,3,''
       close,3       
     endelse
   endif 
endif

end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which plots pre-constructed 3D input arrays of
;ne,te,z,eff,and n0. Plot button is located under the Load base.
;-------------------------------------------------------------------------------------------------------------------------
Pro plot_input_arr, Main_base
;The following common block contains some of the settings of "export
;graph to the file"
common export_file, export_file,export_sel,export_flag
 ;The following common block contains 1D n_e profiles of raw and
 ;smoothed data, 3D n_e and ne_stop_cross_section arrays after they constructed
 common dens_electrons,n_e_coord,n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr,ne_stop_cross_section
 ;The following common block contains 1D t_e profiles of raw and
 ;smoothed data and 3D t_e array after it constructed.
 common temp_electrons,t_e_coord,t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
 ;The following common block contains 1D z_eff profiles of raw and
 ;smoothed data and 3D z_eff array after it constructed.
 common effective_charge, z_eff_coord, z_eff_raw,z_eff_raw_err,z_eff_raw_r,z_eff,z_eff_err,z_eff_r,z_eff_arr,z_eff_err_arr
 ;The following common block contains the parameters which describe the geometry
 ;and position of the beam tank and all components needed for calculation.
 common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block contains the parameters which describe the geometry
;and position of the machine plasma
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower
 ;The following common block contains the parameter which data is
 ;curently plotted
 common draw_request,draw_req
;The following commong block contains the rho arrays which used for
;mapping of 1D Ne,Te,Z_eff arrays to the machine 3D coordinated and
;eventually to the beam coordinates.
common flux_surfaces, rho_arr_beam_coord,rho_grid,rgrid_arr,zgrid_arr,rgrid_midplane,rho_grid_midplane
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
 ;The following common block contains some of the settings for construction
 ;of the arrays used for the beam attenuation and penetration
 ;calculation.
 common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
 ;The following common block contains X,Y,Z coordinate arrays used for the beam
 ;calculation grid and output 3D arrays of the beam density and excitation fracitons
 common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution) 
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
 ;The following common block contains neutral gas parameters used in
 ;calculation of the beam attenuation in the gas.
 common neutral_gas,tank_pressure,torus_pressure,duct_pressure,duct_pressure_loc,n0_arr,n0_stop_cross_section
 ;The following common block contains the parameters which describe the
 ;positions and sizes of the beam limiters. 
 common beam_limiters, n_limiters, limiters_table,limiters_arr
 ;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err 

;-----------------------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------
 if export_flag and export_sel eq 1 then begin
   close,3
   openw,3,export_file
   printf,3,';Exported Data from ALCBEAM plot'
   printf,3,'----------------------------------' 
   printf,3,''
   printf,3,';File is created on:'
   printf,3, systime()
   printf,3,';File is created by:'
   printf,3, 'ALCBEAM (ver. '+alcbeam_ver+')'
 endif

 preview_val=Widget_Info(Widget_Info(Main_base, FIND_BY_UNAME='Preview_Arr_Droplist'), /Droplist_Select)
 Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Preview_Arr_Droplist'),get_value=preview_table
 preview_text=preview_table(preview_val)
 Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Scale_Check'),get_value=scale_check
 WIDGET_CONTROL,Widget_Info(Main_base, FIND_BY_UNAME='Result_Plot') , GET_VALUE=drawID
 wset, drawID
 draw_req=1
if preview_val eq 0 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   !X.Margin=[10,6]
   !Y.Margin=[3,2]
   ;plot circles----------
   ang=make_array(45,/index)*2.0*!Pi/45.0
   usersym,1.4*sin(ang),1.4*cos(ang)
   ;---------------------
   if grid_aper_type eq 0 then begin
      x_bml_used=x_bml
      y_bml_used=y_bml
   endif else begin
     fact=fix((strsplit(grid_aper_names(grid_aper_type),' ',/extract))(1))
     n_ap=(n_elements(x_bml)-1)/2 
     if n_elements(x_bml) MOD 2 eq 1 then begin
       x_bml_used=x_bml((n_ap mod fact):*:fact)
       y_bml_used=y_bml((n_ap mod fact):*:fact)
     endif else begin
       x_bml_used=[x_bml((n_ap mod fact):n_ap:fact),x_bml(n_ap+1:*:fact)]
       y_bml_used=[y_bml((n_ap mod fact):n_ap:fact),y_bml(n_ap+1:*:fact)]
     endelse
   endelse
   titl='Apertures to be used for Ray Tracing'
   xtitl='Beam X coordinate, cm'
   ytitl='Beam Y coordinate, cm'
   plot, x_bml_used*100.0, y_bml_used*100.0,color=0,background=-1,ystyle=1,xstyle=1,psym=8,yrange=[min(y_bml_used)*120,max(y_bml_used)*120],$
   xrange=[min(x_bml_used)*120,max(x_bml_used)*120],Thick=1, Charsize=1.4, ticklen=0,ytitle=ytitl,xtitle=xtitl, Title=titl
   xyouts,95,368,'Beam: '+beam,/device,color=0,charsize=1.3,charthick=1
   xyouts,95,348,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3,charthick=1
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Plotx'
       printf,3,x_bml*100.0
       printf,3,''
       printf,3,';Ploty'
       printf,3,y_bml*100.0
       printf,3,''
       close,3      
     endelse
  endif
endif 
if preview_val eq 1 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   !X.Margin=[10,6]
   !Y.Margin=[3,2]
   ;plot flux----------
   titl='Plasma flux surfaces'
   xtitl='Major radius, m'
   ytitl='Z, m'
   x_ind = where(min(rho_grid,dimension=2) lt 0.95)
   x_range1 = rgrid_arr(x_ind(0))
   x_range2 = rgrid_arr(x_ind(n_elements(x_ind)-1))
   x_border = (x_range2-x_range1)/10.0
   z_ind = where(min(rho_grid,dimension=1) lt 0.95)
   z_range1 = zgrid_arr(z_ind(0))
   z_range2 = zgrid_arr(z_ind(n_elements(z_ind)-1))
   z_border = (z_range2-z_range1)/10.0

   contour, rho_grid<1.0,rgrid_arr,zgrid_arr,color=0,background=-1,ystyle=1,xstyle=1,Thick=1, xrange=[x_range1-x_border,x_range2+x_border], yrange=[z_range1-z_border,z_range2+z_border*3.0],$
   Charsize=1.4, ticklen=0,ytitle=ytitl,xtitle=xtitl, Title=titl,levels=[0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99],c_colors=[120,0,0,0,0,0,0,0,0,0,120]
   xyouts,105,370,'Beam: '+beam,/device,color=0,charsize=1.3,charthick=1
   xyouts,105,350,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3,charthick=1
   xyouts,320,370,'Phi0: '+strtrim(string(beam_port_phi,format='(F10.3)'),1)+' rad',/device,color=0,charsize=1.3,charthick=1

   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Contourz'
       printf,3,rho_grid<1.0
       printf,3,''       
       printf,3,';Contourx'
       printf,3,rgrid_arr
       printf,3,''
       printf,3,';Contoury'
       printf,3,zgrid_arr
       printf,3,''
       close,3      
     endelse
  endif
endif 
if preview_val eq 2 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   !X.Margin=[9,9]
   !Y.Margin=[3,2]
   if scale_check eq 1 then begin
      max_val=max(n_e_arr)
      min_val=min(n_e_arr)
   endif else begin
      max_val=max(n_e_arr(Z_B_Slider_val,*,*))
      min_val=min(n_e_arr(Z_B_Slider_val,*,*))
   endelse
   if min_val eq max_val then max_val=min_val+1e12
   scale_coef=fix(alog10(max_val))
   titl='Electron density'
   xtitl='Beam X coordinate, m'
   ytitl='Beam Y coordinate, m'
   contour, n_e_arr(Z_B_Slider_val,*,*)*10.0^(-scale_coef),x_beam,y_beam,color=0,background=-1,ystyle=1,xstyle=1,xtitle='Beam X coordinate, m',ytitle='Beam Y coordinate, m',$
   levels=interpol([min_val,max_val]*10.0^(-scale_coef),255),C_COLORS = interpol([16,208],255), /FILL,title=titl,Charsize=1.5
 
   oplot,[0,0],[-max(y_beam),max(y_beam)],color=-1,linestyle=2
   oplot,[-max(x_beam),max(x_beam)],[0,0],color=-1,linestyle=2
   xyouts,280,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3,charthick=3
   xyouts,280,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=-1,charsize=1.3,charthick=1  
   xyouts,90,360,'Beam: '+beam,/device,color=0,charsize=1.3,charthick=3
   xyouts,90,360,'Beam: '+beam,/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3,charthick=3
   xyouts,90,340,'Shot: '+strtrim(string(shot),2),/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3,charthick=3
   xyouts,90,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=-1,charsize=1.3,charthick=1
  ;colorbar--------------------------------------------------------------------------------------------------------------------------
   w_x_size=!D.X_Vsize & w_y_size=!D.Y_Vsize
   pos=[0.95,0.11,0.99,0.85] & n_ticks=7 & col_min=16 & col_max=208 & n_colors=255
   bar_pos_x=pos(0)*w_x_size & bar_pos_y=pos(1)*w_y_size & bar_size_x= (pos(2)-pos(0))*w_x_size & bar_size_y=(pos(3)-pos(1))*w_y_size
   bar = interpol([col_min,col_max],n_colors) ## replicate(1,10)
   TV, CONGRID(bar, bar_size_x, bar_size_y), bar_pos_x+1, bar_pos_y+1
   plot,[0,bar_size_x],[0,bar_size_y],/nodata,xticks=1,yticks=n_ticks-1,xstyle=1,ystyle=1,position=pos,color=0,charsize=1.4,/noerase,xtickformat='(A1)',$
   yminor=2,ytickname=string(interpol([min_val,max_val]*10.0^(-scale_coef),n_ticks),format='(F4.2)'),yticklen=0.2
   xyouts,438,370,'x10!U '+strtrim(string(scale_coef,format='(I2)'),2)+'!Ncm!U-3!N',color=0,charsize=1.4,/device
   ;----------------------------------------------------------------------------------------------------------------------------------
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl+' x 10!U '+strtrim(string(scale_coef,format='(I2)'),2)+'!Ncm!U-3!N'
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Contourz'
       printf,3,reform(n_e_arr(Z_B_Slider_val,*,*))*10.0^(-scale_coef)
       printf,3,''
       printf,3,';Contourx'
       printf,3,x_beam
       printf,3,''
       printf,3,';Contoury'
       printf,3,y_beam
       printf,3,''
       close,3      
     endelse
   endif 
endif
if preview_val eq 3 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(n_e_arr) else max_val=max(n_e_arr(*,X_B_Slider_val,Y_B_Slider_val))
   scale_coef=fix(alog10(max_val))
   titl='Electron density'
   xtitl='Distance from accelerating grids, m'
   ytitl='Electron density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+'!Ncm!U-3!N'
   plot, z_beam, n_e_arr(*,X_B_Slider_val,Y_B_Slider_val)*10.0^(-scale_coef),color=0,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   xyouts,330,360,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Plotx'
       printf,3,z_beam
       printf,3,''
       printf,3,';Ploty'
       printf,3,reform(n_e_arr(*,X_B_Slider_val,Y_B_Slider_val))*10.0^(-scale_coef)
       printf,3,''    
       close,3      
     endelse
   endif
 endif
 if preview_val eq 4 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   n_z=n_elements(z_beam)
   ;calulation r_major along the beam centerline x_beam=0, y_beam=0
   grid_cent_x=r_grid*cos(phi_grid)
   grid_cent_y=-r_grid*sin(phi_grid)
   wall_cent_x=r_wall*cos(phi_wall)
   wall_cent_y=-r_wall*sin(phi_wall)
   dist_all_XY=sqrt((wall_cent_x-grid_cent_x)^2.0+(wall_cent_y-grid_cent_y)^2.0)
   sin_pivot=-(wall_cent_y-grid_cent_y)/dist_all_XY;angle in machine XY plane (horizontal)
   cos_pivot=-(wall_cent_x-grid_cent_x)/dist_all_XY
  
   dist_all_XYZ=sqrt((wall_cent_x-grid_cent_x)^2.0+(wall_cent_y-grid_cent_y)^2.0+(z_wall-z_grid)^2.0)
   sin_alpha=(z_wall-z_grid)/dist_all_XYZ ; angle in machine XZ plane (vertical)
   cos_alpha=sqrt(1.0-sin_alpha^2.0)
   ;rotating beam coordinate to machine midplane projection 
   ix=x_b_slider_val
   iy=y_b_slider_val
   z_beam1=z_beam*cos_alpha-y_beam(iy)*sin_alpha
   y_beam1=z_beam*sin_alpha+y_beam(iy)*cos_alpha+z_grid
   x_beam1=x_beam(ix)                    
   ;moving beam to machine center and rotating
   x_tor2=-z_beam1*cos_pivot+x_beam1*sin_pivot+r_grid*cos(phi_grid)
   y_tor2=-z_beam1*sin_pivot-x_beam1*cos_pivot-r_grid*sin(phi_grid)
   r_tor2=sqrt(x_tor2^2.0+y_tor2^2.0)
   min_r_tor2 = min(r_tor2,min_ind)
   r_tor3 = r_tor2(0:min_ind)
   ind_all = where(r_tor3 gt r_major-r_minor*1.2 and r_tor3 lt r_major+r_minor*1.2)
   
   ind1 = max(ind_all)
   ind2 = min(ind_all)
   r_output=reverse(r_tor3(ind_all))
   ;---------------------------------------------------------------
   if scale_check eq 1 then max_val=max(n_e_arr(ind2:ind1,*,*)) else max_val=max(n_e_arr(ind2:ind1,X_B_Slider_val,Y_B_Slider_val))
   scale_coef=fix(alog10(max_val))
   titl='Electron density'
   xtitl='Major Radius, m'
   ytitl='Electron density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+'!Ncm!U-3!N'
   plot, r_output, reverse(n_e_arr(ind2:ind1,X_B_Slider_val,Y_B_Slider_val),1)*10.0^(-scale_coef),color=0,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl,xrange=[r_major-1.2*r_minor,r_major+1.2*r_minor]
   xyouts,330,360,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Plotx'
       printf,3,r_output
       printf,3,''
       printf,3,';Ploty'
       printf,3,reform(reverse(n_e_arr(ind2:ind1,X_B_Slider_val,Y_B_Slider_val)),1)*10.0^(-scale_coef)
       printf,3,''    
       close,3      
     endelse
   endif
 endif
 if preview_val eq 5 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(n_e_arr) else max_val=max(n_e_arr(Z_B_Slider_val,*,Y_B_Slider_val))
   scale_coef=fix(alog10(max_val))
   titl='Electron density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !N cm!U-3!N'
   xtitl='Beam X coordinate, m'
   ytitl='Electron density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !Ncm!U-3!N'
   plot, x_beam, n_e_arr(Z_B_Slider_val,*,Y_B_Slider_val)*10.0^(-scale_coef),color=0,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   oplot,[0,0],[0,2.0*max_val*10.0^(-scale_coef)],color=0,linestyle=2
   xyouts,330,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Plotx'
       printf,3,x_beam
       printf,3,''
       printf,3,';Ploty'
       printf,3,reform(n_e_arr(Z_B_Slider_val,*,Y_B_Slider_val))*10.0^(-scale_coef)
       printf,3,''      
       close,3      
     endelse
   endif
 endif
 if preview_val eq 6 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(n_e_arr) else max_val=max(n_e_arr(Z_B_Slider_val,X_B_Slider_val,*))
   scale_coef=fix(alog10(max_val))
   titl='Electron density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !N cm!U-3!N'
   xtitl='Beam Y coordinate, m'
   ytitl='Electron density, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+' !Ncm!U-3!N'
   plot, Y_beam, n_e_arr(Z_B_Slider_val,X_B_Slider_val,*)*10.0^(-scale_coef),color=0,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   oplot,[0,0],[0,2.0*max_val*10.0^(-scale_coef)],color=0,linestyle=2
   xyouts,330,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Plotx'
       printf,3,y_beam
       printf,3,''
       printf,3,';Ploty'
       printf,3,reform(n_e_arr(Z_B_Slider_val,X_B_Slider_val,*))*10.0^(-scale_coef)
       printf,3,''      
       close,3      
     endelse
   endif
 endif
if preview_val eq 7  then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   !X.Margin=[9,9]
   !Y.Margin=[3,2]
   if scale_check eq 1 then begin
      max_val=max(t_e_arr)
      min_val=min(t_e_arr)
   endif else begin
      max_val=max(t_e_arr(Z_B_Slider_val,*,*))
      min_val=min(t_e_arr(Z_B_Slider_val,*,*))
   endelse
   if min_val eq max_val then max_val=min_val+0.01
   titl='Electron temperature, keV'
   xtitl='Beam X coordinate, m'
   ytitl='Beam Y coordinate, m'
   contour, t_e_arr(Z_B_Slider_val,*,*),x_beam,y_beam,color=0,background=-1,ystyle=1,xstyle=1,xtitle=xtitl,ytitle=ytitl,$
   levels=interpol([min_val,max_val],255),C_COLORS = interpol([16,208],255), /FILL,title=titl,Charsize=1.5
   oplot,[0,0],[-max(y_beam),max(y_beam)],color=-1,linestyle=2
   oplot,[-max(x_beam),max(x_beam)],[0,0],color=-1,linestyle=2
   xyouts,280,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3,charthick=3
   xyouts,280,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=-1,charsize=1.3,charthick=1  
   xyouts,90,360,'Beam: '+beam,/device,color=0,charsize=1.3,charthick=3
   xyouts,90,360,'Beam: '+beam,/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3,charthick=3
   xyouts,90,340,'Shot: '+strtrim(string(shot),2),/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3,charthick=3
   xyouts,90,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=-1,charsize=1.3,charthick=1
  ;colorbar--------------------------------------------------------------------------------------------------------------------------
   w_x_size=!D.X_Vsize & w_y_size=!D.Y_Vsize
   pos=[0.95,0.11,0.99,0.85] & n_ticks=7 & col_min=16 & col_max=208 & n_colors=255
   bar_pos_x=pos(0)*w_x_size & bar_pos_y=pos(1)*w_y_size & bar_size_x= (pos(2)-pos(0))*w_x_size & bar_size_y=(pos(3)-pos(1))*w_y_size
   bar = interpol([col_min,col_max],n_colors) ## replicate(1,10)
   TV, CONGRID(bar, bar_size_x, bar_size_y), bar_pos_x+1, bar_pos_y+1
   plot,[0,bar_size_x],[0,bar_size_y],/nodata,xticks=1,yticks=n_ticks-1,xstyle=1,ystyle=1,position=pos,color=0,charsize=1.4,/noerase,xtickformat='(A1)',$
   yminor=2,ytickname=string(interpol([min_val,max_val],n_ticks),format='(F4.2)'),yticklen=0.2
   ;----------------------------------------------------------------------------------------------------------------------------------
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Contourz'
       printf,3,reform(t_e_arr(Z_B_Slider_val,*,*))
       printf,3,''
       printf,3,';Contourx'
       printf,3,x_beam
       printf,3,''
       printf,3,';Contoury'
       printf,3,y_beam
       printf,3,''
       close,3      
     endelse
   endif  
endif
if preview_val eq 8 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(t_e_arr) else max_val=max(t_e_arr(*,X_B_Slider_val,Y_B_Slider_val))
   titl='Electron temperature'
   xtitl='Distance from accelerating grids, m'
   ytitl='Electron temperature, keV'
   plot, z_beam, t_e_arr(*,X_B_Slider_val,Y_B_Slider_val),color=0,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   xyouts,330,360,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Plotx'
       printf,3,z_beam
       printf,3,''
       printf,3,';Ploty'
       printf,3,reform(t_e_arr(*,X_B_Slider_val,Y_B_Slider_val))
       printf,3,''    
       close,3      
     endelse
   endif
 endif
 if preview_val eq 9 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   n_z=n_elements(z_beam)
   ;calulation r_major along the beam centerline x_beam=0, y_beam=0
   grid_cent_x=r_grid*cos(phi_grid)
   grid_cent_y=-r_grid*sin(phi_grid)
   wall_cent_x=r_wall*cos(phi_wall)
   wall_cent_y=-r_wall*sin(phi_wall)
   dist_all_XY=sqrt((wall_cent_x-grid_cent_x)^2.0+(wall_cent_y-grid_cent_y)^2.0)
   sin_pivot=-(wall_cent_y-grid_cent_y)/dist_all_XY;angle in machine XY plane (horizontal)
   cos_pivot=-(wall_cent_x-grid_cent_x)/dist_all_XY
  
   dist_all_XYZ=sqrt((wall_cent_x-grid_cent_x)^2.0+(wall_cent_y-grid_cent_y)^2.0+(z_wall-z_grid)^2.0)
   sin_alpha=(z_wall-z_grid)/dist_all_XYZ ; angle in machine XZ plane (vertical)
   cos_alpha=sqrt(1.0-sin_alpha^2.0)
   ;rotating beam coordinate to machine midplane projection 
   ix=x_b_slider_val
   iy=y_b_slider_val
   z_beam1=z_beam*cos_alpha-y_beam(iy)*sin_alpha
   y_beam1=z_beam*sin_alpha+y_beam(iy)*cos_alpha+z_grid
   x_beam1=x_beam(ix)                    
   ;moving beam to machine center and rotating
   x_tor2=-z_beam1*cos_pivot+x_beam1*sin_pivot+r_grid*cos(phi_grid)
   y_tor2=-z_beam1*sin_pivot-x_beam1*cos_pivot-r_grid*sin(phi_grid)
   r_tor2=sqrt(x_tor2^2.0+y_tor2^2.0)
   min_r_tor2 = min(r_tor2,min_ind)
   r_tor3 = r_tor2(0:min_ind)
   ind_all = where(r_tor3 gt r_major-r_minor*1.2 and r_tor3 lt r_major+r_minor*1.2)
   
   ind1 = max(ind_all)
   ind2 = min(ind_all)
   r_output=reverse(r_tor3(ind_all)) 
   ;---------------------------------------------------------------
   if scale_check eq 1 then max_val=max(t_e_arr(ind2:ind1,*,*)) else max_val=max(t_e_arr(ind2:ind1,X_B_Slider_val,Y_B_Slider_val))
   titl='Electron temperature'
   xtitl='Major Radius, m'
   ytitl='Electron temperature, keV'
   plot, r_output, reverse(t_e_arr(ind2:ind1,X_B_Slider_val,Y_B_Slider_val),1),color=0,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl,xrange=[r_major-1.2*r_minor,r_major+1.2*r_minor]
   xyouts,330,360,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Plotx'
       printf,3,r_output
       printf,3,''
       printf,3,';Ploty'
       printf,3,reform(reverse(t_e_arr(ind2:ind1,X_B_Slider_val,Y_B_Slider_val)),1)
       printf,3,''    
       close,3      
     endelse
   endif
 endif
 if preview_val eq 10 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(t_e_arr) else max_val=max(t_e_arr(Z_B_Slider_val,*,Y_B_Slider_val))
   titl='Electron temperature'
   xtitl='Beam X coordinate, m'
   ytitl='Electron temperature, keV'
   plot, x_beam, t_e_arr(Z_B_Slider_val,*,Y_B_Slider_val),color=0,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   oplot,[0,0],[0,2.0*max_val],color=0,linestyle=2
   xyouts,330,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Plotx'
       printf,3,x_beam
       printf,3,''
       printf,3,';Ploty'
       printf,3,reform(t_e_arr(Z_B_Slider_val,*,Y_B_Slider_val))
       printf,3,''      
       close,3      
     endelse
   endif
 endif
 if preview_val eq 11 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(t_e_arr) else max_val=max(t_e_arr(Z_B_Slider_val,X_B_Slider_val,*))
   titl='Electron temperature'
   xtitl='Beam Y coordinate, m'
   ytitl='Electron temperature, keV'
   plot, y_beam, t_e_arr(Z_B_Slider_val,X_B_Slider_val,*),color=0,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   oplot,[0,0],[0,2.0],color=0,linestyle=2
   xyouts,330,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Plotx'
       printf,3,y_beam
       printf,3,''
       printf,3,';Ploty'
       printf,3,reform(t_e_arr(Z_B_Slider_val,X_B_Slider_val,*))
       printf,3,''      
       close,3      
     endelse
   endif
 endif
if preview_val eq 12 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   !X.Margin=[9,9]
   !Y.Margin=[3,2]
   if scale_check eq 1 then begin
      max_val=max(z_eff_arr)
      min_val=min(z_eff_arr)
   endif else begin
      max_val=max(z_eff_arr(Z_B_Slider_val,*,*))
      min_val=min(z_eff_arr(Z_B_Slider_val,*,*))
   endelse
   if min_val eq max_val then max_val=min_val+0.01
   titl='Effective charge (Z!Deff!N)'
   xtitl='Beam X coordinate, m'
   ytitl='Beam Y coordinate, m'
   contour, z_eff_arr(Z_B_Slider_val,*,*),x_beam,y_beam,color=0,background=-1,ystyle=1,xstyle=1,xtitle=xtitl,ytitle=ytitl,$
   levels=interpol([min_val,max_val],255),C_COLORS = interpol([16,208],255), /FILL,title=titl,Charsize=1.5
   oplot,[0,0],[-max(y_beam),max(y_beam)],color=-1,linestyle=2
   oplot,[-max(x_beam),max(x_beam)],[0,0],color=-1,linestyle=2
   xyouts,280,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3,charthick=3
   xyouts,280,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=-1,charsize=1.3,charthick=1  
   xyouts,90,360,'Beam: '+beam,/device,color=0,charsize=1.3,charthick=3
   xyouts,90,360,'Beam: '+beam,/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3,charthick=3
   xyouts,90,340,'Shot: '+strtrim(string(shot),2),/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3,charthick=3
   xyouts,90,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=-1,charsize=1.3,charthick=1
  ;colorbar--------------------------------------------------------------------------------------------------------------------------
   w_x_size=!D.X_Vsize & w_y_size=!D.Y_Vsize
   pos=[0.95,0.11,0.99,0.85] & n_ticks=7 & col_min=16 & col_max=208 & n_colors=255
   bar_pos_x=pos(0)*w_x_size & bar_pos_y=pos(1)*w_y_size & bar_size_x= (pos(2)-pos(0))*w_x_size & bar_size_y=(pos(3)-pos(1))*w_y_size
   bar = interpol([col_min,col_max],n_colors) ## replicate(1,10)
   TV, CONGRID(bar, bar_size_x, bar_size_y), bar_pos_x+1, bar_pos_y+1
   plot,[0,bar_size_x],[0,bar_size_y],/nodata,xticks=1,yticks=n_ticks-1,xstyle=1,ystyle=1,position=pos,color=0,charsize=1.4,/noerase,xtickformat='(A1)',$
   yminor=2,ytickname=string(interpol([min_val,max_val],n_ticks),format='(F4.2)'),yticklen=0.2
   ;----------------------------------------------------------------------------------------------------------------------------------
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Contourz'
       printf,3,reform(z_eff_arr(Z_B_Slider_val,*,*))
       printf,3,''
       printf,3,';Contourx'
       printf,3,x_beam
       printf,3,''
       printf,3,';Contoury'
       printf,3,y_beam
       printf,3,''
       close,3      
     endelse
   endif 
endif 
if preview_val eq 13 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(z_eff_arr) else max_val=max(z_eff_arr(*,X_B_Slider_val,Y_B_Slider_val))
   titl='Effective charge (Z!Deff!N)'
   xtitl='Distance from accelerating grids, m'
   ytitl='Effective charge (Z!Deff!N)'
   plot, z_beam, z_eff_arr(*,X_B_Slider_val,Y_B_Slider_val),color=0,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*1.1],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   xyouts,330,360,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Plotx'
       printf,3,z_beam
       printf,3,''
       printf,3,';Ploty'
       printf,3,reform(z_eff_arr(*,X_B_Slider_val,Y_B_Slider_val))
       printf,3,''      
       close,3      
     endelse
   endif
 endif
 if preview_val eq 14 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(z_eff_arr) else max_val=max(z_eff_arr(Z_B_Slider_val,*,Y_B_Slider_val))
   titl='Effective charge (Z!Deff!N)'
   xtitl='Beam X coordinate, m'
   ytitl='Effective charge (Z!Deff!N)'
   plot, x_beam, z_eff_arr(Z_B_Slider_val,*,Y_B_Slider_val),color=0,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*1.1],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   xyouts,330,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Plotx'
       printf,3,x_beam
       printf,3,''
       printf,3,';Ploty'
       printf,3,reform(z_eff_arr(Z_B_Slider_val,*,Y_B_Slider_val))
       printf,3,''      
       close,3      
     endelse
   endif
 endif
 if preview_val eq 15 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(z_eff_arr) else max_val=max(z_eff_arr(Z_B_Slider_val,X_B_Slider_val,*))
   titl='Effective charge (Z!Deff!N)'
   xtitl='Beam Y coordinate, m'
   ytitl='Effective charge (Z!Deff!N)'
   plot, y_beam, z_eff_arr(Z_B_Slider_val,X_B_Slider_val,*),color=0,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*1.1],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   xyouts,330,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Plotx'
       printf,3,y_beam
       printf,3,''
       printf,3,';Ploty'
       printf,3,reform(z_eff_arr(Z_B_Slider_val,X_B_Slider_val,*))
       printf,3,''      
       close,3      
     endelse
   endif
 endif
if preview_val eq 16 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   !X.Margin=[9,9]
   !Y.Margin=[3,2]
   if scale_check eq 1 then begin
      max_val=max(n0_arr)
      min_val=min(n0_arr)
   endif else begin
      max_val=max(n0_arr(Z_B_Slider_val,*,*))
      min_val=min(n0_arr(Z_B_Slider_val,*,*))
   endelse
   if min_val eq max_val then max_val=min_val+1e10
   scale_coef=fix(alog10(max_val))
   titl='Density of the neutral gas'
   xtitl='Beam X coordinate, m'
   ytitl='Beam Y coordinate, m'
   contour, n0_arr(Z_B_Slider_val,*,*)*10.0^(-scale_coef),x_beam,y_beam,color=0,background=-1,ystyle=1,xstyle=1,xtitle=xtitl,ytitle=ytitl,$
   levels=interpol([min_val,max_val]*10.0^(-scale_coef),255),C_COLORS = interpol([16,208],255), /FILL,title=titl,Charsize=1.5
   oplot,[0,0],[-max(y_beam),max(y_beam)],color=-1,linestyle=2
   oplot,[-max(x_beam),max(x_beam)],[0,0],color=-1,linestyle=2
   xyouts,280,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3,charthick=3
   xyouts,280,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=-1,charsize=1.3,charthick=1  
   xyouts,90,360,'Beam: '+beam,/device,color=0,charsize=1.3,charthick=3
   xyouts,90,360,'Beam: '+beam,/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3,charthick=3
   xyouts,90,340,'Shot: '+strtrim(string(shot),2),/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3,charthick=3
   xyouts,90,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=-1,charsize=1.3,charthick=1
   ;colorbar--------------------------------------------------------------------------------------------------------------------------
   w_x_size=!D.X_Vsize & w_y_size=!D.Y_Vsize
   pos=[0.95,0.11,0.99,0.85] & n_ticks=7 & col_min=16 & col_max=208 & n_colors=255
   bar_pos_x=pos(0)*w_x_size & bar_pos_y=pos(1)*w_y_size & bar_size_x= (pos(2)-pos(0))*w_x_size & bar_size_y=(pos(3)-pos(1))*w_y_size
   bar = interpol([col_min,col_max],n_colors) ## replicate(1,10)
   TV, CONGRID(bar, bar_size_x, bar_size_y), bar_pos_x+1, bar_pos_y+1
   plot,[0,bar_size_x],[0,bar_size_y],/nodata,xticks=1,yticks=n_ticks-1,xstyle=1,ystyle=1,position=pos,color=0,charsize=1.4,/noerase,xtickformat='(A1)',$
   yminor=2,ytickname=string(interpol([min_val,max_val]*10.0^(-scale_coef),n_ticks),format='(F4.2)'),yticklen=0.2
   xyouts,438,370,'x10!U '+strtrim(string(scale_coef,format='(I2)'),2)+'!Ncm!U-3!N',color=0,charsize=1.4,/device
   ;----------------------------------------------------------------------------------------------------------------------------------
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl+' x 10!U '+strtrim(string(scale_coef,format='(I2)'),2)+'!Ncm!U-3!N'
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Contourz'
       printf,3,reform(n0_arr(Z_B_Slider_val,*,*))*10.0^(-scale_coef)
       printf,3,''
       printf,3,';Contourx'
       printf,3,x_beam
       printf,3,''
       printf,3,';Contoury'
       printf,3,y_beam
       printf,3,''
       close,3      
     endelse
   endif  
endif 
if preview_val eq 17 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(n0_arr) else max_val=max(n0_arr(*,X_B_Slider_val,Y_B_Slider_val))
   scale_coef=fix(alog10(max_val))
   titl='Density of the neutral gas'
   xtitl='Distance from accelerating grids, m'
   ytitl='Density of the neutral gas, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+'!Ncm!U-3!N'
   plot, z_beam, n0_arr(*,X_B_Slider_val,Y_B_Slider_val)*10.0^(-scale_coef),color=0,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   xyouts,330,360,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Plotx'
       printf,3,z_beam
       printf,3,''
       printf,3,';Ploty'
       printf,3,reform(n0_arr(*,X_B_Slider_val,Y_B_Slider_val))*10.0^(-scale_coef)
       printf,3,''      
       close,3      
     endelse
   endif
 endif
 if preview_val eq 18 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(n0_arr) else max_val=max(n0_arr(Z_B_Slider_val,*,Y_B_Slider_val))
   scale_coef=fix(alog10(max_val))
   titl='Density of the neutral gas'
   xtitl='Beam X coordinate, m'
   ytitl='Density of the neutral gas, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+'!Ncm!U-3!N'
   plot, x_beam, n0_arr(Z_B_Slider_val,*,Y_B_Slider_val)*10.0^(-scale_coef),color=0,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   oplot,[0,0],[0,2.0*max_val*10.0^(-scale_coef)],color=0,linestyle=2
   xyouts,330,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Plotx'
       printf,3,x_beam
       printf,3,''
       printf,3,';Ploty'
       printf,3,reform(n0_arr(Z_B_Slider_val,*,Y_B_Slider_val))*10.0^(-scale_coef)
       printf,3,''      
       close,3      
     endelse
   endif
 endif
 if preview_val eq 19 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(n0_arr) else max_val=max(n0_arr(Z_B_Slider_val,X_B_Slider_val,*))
   scale_coef=fix(alog10(max_val))
   titl='Density of the neutral gas'
   xtitl='Beam Y coordinate, m'
   ytitl='Density of the neutral gas, x10!U'+strtrim(string(scale_coef,format='(I2)'),1)+'!Ncm!U-3!N'
   plot, Y_beam, n0_arr(Z_B_Slider_val,X_B_Slider_val,*)*10.0^(-scale_coef),color=0,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   oplot,[0,0],[0,2.0*max_val*10.0^(-scale_coef)],color=0,linestyle=2
   xyouts,330,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Plotx'
       printf,3,y_beam
       printf,3,''
       printf,3,';Ploty'
       printf,3,reform(n0_arr(Z_B_Slider_val,X_B_Slider_val,*))*10.0^(-scale_coef)
       printf,3,''      
       close,3      
     endelse
   endif
 endif
  if preview_val eq 20 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   if total(e_check) gt 1 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Several beam energy components are selected. Contour of the component with maximal energy is plotted.']], Set_text_top_line=n_elements(status_tx)-4
   endif
   E_B_Val=(where(e_check gt 0))(0)
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   !X.Margin=[9,9]
   !Y.Margin=[3,2]
   if scale_check eq 1 then begin
      max_val=max(exc_n2_frac(e_b_val,*,*,*))
      min_val=min(exc_n2_frac(e_b_val,*,*,*))
   endif else begin
      max_val=max(exc_n2_frac(e_b_val,Z_B_Slider_val,*,*))
      min_val=min(exc_n2_frac(e_b_val,Z_B_Slider_val,*,*))
   endelse
   if min_val eq max_val then max_val=min_val+1
   scale_coef=fix(alog10(max_val))-1
   if e_b_val eq 0 then e_str='(E!Dfull!N energy)' else e_str='(E/'+strtrim(string(round(1.0/e_frac(e_b_val)),format='(I2)'),2)+' energy)'
   titl='Fraction in n=2 excited state of the '+e_str
   xtitl='Beam X coordinate, m'
   ytitl='Beam Y coordinate, m'
   contour, exc_n2_frac(e_b_val,Z_B_Slider_val,*,*)*10.0^(-scale_coef),x_beam,y_beam,color=0,background=-1,ystyle=1,xstyle=1,xtitle=xtitl,ytitle=ytitl,$
   levels=interpol([min_val,max_val]*10.0^(-scale_coef),255),C_COLORS = interpol([16,208],255), /FILL,title=titl,Charsize=1.5
   oplot,[0,0],[-max(y_beam),max(y_beam)],color=-1,linestyle=2
   oplot,[-max(x_beam),max(x_beam)],[0,0],color=-1,linestyle=2
   xyouts,280,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3,charthick=3
   xyouts,280,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=-1,charsize=1.3,charthick=1  
   xyouts,90,360,'Beam: '+beam,/device,color=0,charsize=1.3,charthick=3
   xyouts,90,360,'Beam: '+beam,/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3,charthick=3
   xyouts,90,340,'Shot: '+strtrim(string(shot),2),/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3,charthick=3
   xyouts,90,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3,charthick=3
   xyouts,90,300,'Beam atom: '+strtrim(beam_atom),/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=0,charsize=1.3,charthick=3
   xyouts,90,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=-1,charsize=1.3,charthick=1
   ;colorbar--------------------------------------------------------------------------------------------------------------------------
   w_x_size=!D.X_Vsize & w_y_size=!D.Y_Vsize
   pos=[0.95,0.11,0.99,0.85] & n_ticks=7 & col_min=16 & col_max=208 & n_colors=255
   bar_pos_x=pos(0)*w_x_size & bar_pos_y=pos(1)*w_y_size & bar_size_x= (pos(2)-pos(0))*w_x_size & bar_size_y=(pos(3)-pos(1))*w_y_size
   bar = interpol([col_min,col_max],n_colors) ## replicate(1,10)
   TV, CONGRID(bar, bar_size_x, bar_size_y), bar_pos_x+1, bar_pos_y+1
   plot,[0,bar_size_x],[0,bar_size_y],/nodata,xticks=1,yticks=n_ticks-1,xstyle=1,ystyle=1,position=pos,color=0,charsize=1.4,/noerase,xtickformat='(A1)',$
   yminor=2,ytickname=string(interpol([min_val,max_val]*10.0^(-scale_coef),n_ticks),format='(F5.2)'),yticklen=0.2
   xyouts,438,370,'    x10!U '+strtrim(string(scale_coef,format='(I2)'),2)+'!N',color=0,charsize=1.4,/device
   ;----------------------------------------------------------------------------------------------------------------------------------
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl+' x10!U '+strtrim(string(scale_coef,format='(I2)'),2)+'!N'
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Contourz'
       printf,3,reform(exc_n2_frac(e_b_val,Z_B_Slider_val,*,*))*10.0^(-scale_coef)
       printf,3,''
       printf,3,';Contourx'
       printf,3,x_beam
       printf,3,''
       printf,3,';Contoury'
       printf,3,y_beam
       printf,3,''
       close,3      
     endelse
   endif    
 endif
 if preview_val eq 21 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   E_B_Val=where(e_check gt 0)
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(exc_n2_frac(e_b_val,*,*,*)) else max_val=max(exc_n2_frac(e_b_val,*,X_B_Slider_val,Y_B_Slider_val))
   scale_coef=fix(alog10(max_val))-1
   n_energy_sel=n_elements(E_B_Val)
   color_ind=[0,48,64,112,160]
   titl='Fraction of atoms in n=2 excited state x10!U'+strtrim(string(scale_coef,format='(I2)'),1)
   xtitl='Distance from accelerating grids, m'
   ytitl='Fraction of atoms in n=2 excited state x10!U'+strtrim(string(scale_coef,format='(I2)'),1)
   plot, z_beam, z_beam,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   for i=0, n_energy_sel-1 do begin
     if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
     e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
     oplot, z_beam, exc_n2_frac(e_b_val(i),*,X_B_Slider_val,Y_B_Slider_val)*10.0^(-scale_coef),color=color_ind(e_b_val(i))
     xyouts,70,130-i*20,e_str,/device,color=color_ind(e_b_val(i)),charsize=1.3
   endfor 
   xyouts,330,360,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3

   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3,charthick=1
   ;xyouts,90,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=-1,charsize=1.3,charthick=1
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       for i=0, n_energy_sel-1 do begin
         if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
         e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
         printf,3,';Text'
         printf,3,e_str
         printf,3,''
         printf,3,';Plotx'
         printf,3,z_beam
         printf,3,''
         printf,3,';Ploty'
         printf,3,reform(exc_n2_frac(e_b_val(i),*,X_B_Slider_val,Y_B_Slider_val))*10.0^(-scale_coef)
         printf,3,''
       endfor      
       close,3      
     endelse
   endif 
 endif 
 if preview_val eq 22 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   E_B_Val=where(e_check gt 0)
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   n_z=n_elements(z_beam)
   ;calulation r_major along the beam centerline x_beam=0, y_beam=0
   grid_cent_x=r_grid*cos(phi_grid)
   grid_cent_y=-r_grid*sin(phi_grid)
   wall_cent_x=r_wall*cos(phi_wall)
   wall_cent_y=-r_wall*sin(phi_wall)
   dist_all_XY=sqrt((wall_cent_x-grid_cent_x)^2.0+(wall_cent_y-grid_cent_y)^2.0)
   sin_pivot=-(wall_cent_y-grid_cent_y)/dist_all_XY;angle in machine XY plane (horizontal)
   cos_pivot=-(wall_cent_x-grid_cent_x)/dist_all_XY
  
   dist_all_XYZ=sqrt((wall_cent_x-grid_cent_x)^2.0+(wall_cent_y-grid_cent_y)^2.0+(z_wall-z_grid)^2.0)
   sin_alpha=(z_wall-z_grid)/dist_all_XYZ ; angle in machine XZ plane (vertical)
   cos_alpha=sqrt(1.0-sin_alpha^2.0)
   ;rotating beam coordinate to machine midplane projection 
   ix=x_b_slider_val
   iy=y_b_slider_val
   z_beam1=z_beam*cos_alpha-y_beam(iy)*sin_alpha
   y_beam1=z_beam*sin_alpha+y_beam(iy)*cos_alpha+z_grid
   x_beam1=x_beam(ix)                    
   ;moving beam to machine center and rotating
   x_tor2=-z_beam1*cos_pivot+x_beam1*sin_pivot+r_grid*cos(phi_grid)
   y_tor2=-z_beam1*sin_pivot-x_beam1*cos_pivot-r_grid*sin(phi_grid)
   r_tor2=sqrt(x_tor2^2.0+y_tor2^2.0)
   min_r_tor2 = min(r_tor2,min_ind)
   r_tor3 = r_tor2(0:min_ind)
   ind_all = where(r_tor3 gt r_major-r_minor*1.2 and r_tor3 lt r_major+r_minor*1.2)
   
   ind1 = max(ind_all)
   ind2 = min(ind_all)
   r_output=reverse(r_tor3(ind_all)) 
   ;---------------------------------------------------------------
   if scale_check eq 1 then max_val=max(exc_n2_frac(e_b_val,ind2:ind1,*,*)) else max_val=max(exc_n2_frac(e_b_val,ind2:ind1,X_B_Slider_val,Y_B_Slider_val))
   scale_coef=fix(alog10(max_val))-1
   n_energy_sel=n_elements(E_B_Val)
   color_ind=[0,48,64,112,160]
   titl='Fraction of atoms in n=2 excited state x10!U'+strtrim(string(scale_coef,format='(I2)'),1)
   xtitl='Major Radius, m'
   ytitl='Fraction of atoms in n=2 excited state x10!U'+strtrim(string(scale_coef,format='(I2)'),1)
   plot, r_output, r_output,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl,xrange=[r_major-1.2*r_minor,r_major+1.2*r_minor]
   for i=0, n_energy_sel-1 do begin
     if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
     e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
     oplot, r_output, reverse(exc_n2_frac(e_b_val(i),ind2:ind1,X_B_Slider_val,Y_B_Slider_val),2)*10.0^(-scale_coef),color=color_ind(e_b_val(i))
     xyouts,70,130-i*20,e_str,/device,color=color_ind(e_b_val(i)),charsize=1.3
   endfor  
   xyouts,330,360,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3,charthick=1
   ;xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=-1,charsize=1.3,charthick=1
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       for i=0, n_energy_sel-1 do begin
         if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
         e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
         printf,3,';Text'
         printf,3,e_str
         printf,3,''
         printf,3,';Plotx'
         printf,3,r_output
         printf,3,''
         printf,3,';Ploty'
         printf,3,reform(reverse(exc_n2_frac(e_b_val(i),ind2:ind1,X_B_Slider_val,Y_B_Slider_val),2))*10.0^(-scale_coef)
         printf,3,''
       endfor      
       close,3      
     endelse
   endif
 endif 
 if preview_val eq 23 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   E_B_Val=where(e_check gt 0)
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(exc_n2_frac(e_b_val,*,*,*)) else max_val=max(exc_n2_frac(e_b_val,Z_B_Slider_val,*,Y_B_Slider_val))
   scale_coef=fix(alog10(max_val))-1
   n_energy_sel=n_elements(E_B_Val)
   color_ind=[0,48,64,112,160]
   titl='Fraction of atoms in n=2 excited state x10!U'+strtrim(string(scale_coef,format='(I2)'),1)
   xtitl='Beam X coordinate, m'
   ytitl='Fraction of atoms in n=2 excited state x10!U'+strtrim(string(scale_coef,format='(I2)'),1)
   plot, x_beam, z_beam,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   for i=0, n_energy_sel-1 do begin
     if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
     e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
     oplot, x_beam, exc_n2_frac(e_b_val(i),Z_B_Slider_val,*,Y_B_Slider_val)*10.0^(-scale_coef),color=color_ind(e_b_val(i))
     xyouts,70,130-i*20,e_str,/device,color=color_ind(e_b_val(i)),charsize=1.3
   endfor
   xyouts,330,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3,charthick=1
   ;xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=-1,charsize=1.3,charthick=1
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       for i=0, n_energy_sel-1 do begin
         if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
         e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
         printf,3,';Text'
         printf,3,e_str
         printf,3,''
         printf,3,';Plotx'
         printf,3,x_beam
         printf,3,''
         printf,3,';Ploty'
         printf,3,reform(exc_n2_frac(e_b_val(i),Z_B_Slider_val,*,Y_B_Slider_val))*10.0^(-scale_coef)
         printf,3,''
       endfor      
       close,3      
     endelse
   endif
 endif
 if preview_val eq 24 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   E_B_Val=where(e_check gt 0)
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(exc_n2_frac(e_b_val,*,*,*)) else max_val=max(exc_n2_frac(e_b_val,Z_B_Slider_val,X_B_Slider_val,*))
   scale_coef=fix(alog10(max_val))-1
   n_energy_sel=n_elements(E_B_Val)
   color_ind=[0,48,64,112,160]
   titl='Fraction of atoms in n=2 excited state x10!U'+strtrim(string(scale_coef,format='(I2)'),1)
   xtitl='Beam Y coordinate, m'
   ytitl='Fraction of atoms in n=2 excited state x10!U'+strtrim(string(scale_coef,format='(I2)'),1)
   plot, y_beam, z_beam,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   for i=0, n_energy_sel-1 do begin
     if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
     e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
     oplot, y_beam, exc_n2_frac(e_b_val(i),Z_B_Slider_val,X_B_Slider_val,*)*10.0^(-scale_coef),color=color_ind(e_b_val(i))
     xyouts,70,130-i*20,e_str,/device,color=color_ind(e_b_val(i)),charsize=1.3
   endfor  
   xyouts,330,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'X coordinate: '+strtrim(string(x_beam(x_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3,charthick=1
   ;xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=-1,charsize=1.3,charthick=1
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       for i=0, n_energy_sel-1 do begin
         if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
         e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
         printf,3,';Text'
         printf,3,e_str
         printf,3,''
         printf,3,';Plotx'
         printf,3,y_beam
         printf,3,''
         printf,3,';Ploty'
         printf,3,reform(exc_n2_frac(e_b_val(i),Z_B_Slider_val,X_B_Slider_val,*))*10.0^(-scale_coef)
         printf,3,''
       endfor      
       close,3      
     endelse
   endif
  endif
  if preview_val eq 25 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   if total(e_check) gt 1 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Several beam energy components are selected. Contour of the component with maximal energy is plotted.']], Set_text_top_line=n_elements(status_tx)-4
   endif
   E_B_Val=(where(e_check gt 0))(0)
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   !X.Margin=[9,9]
   !Y.Margin=[3,2]
   if scale_check eq 1 then begin
      max_val=max(exc_n3_frac(e_b_val,*,*,*))
      min_val=min(exc_n3_frac(e_b_val,*,*,*))
   endif else begin
      max_val=max(exc_n3_frac(e_b_val,Z_B_Slider_val,*,*))
      min_val=min(exc_n3_frac(e_b_val,Z_B_Slider_val,*,*))
   endelse
   if min_val eq max_val then max_val=min_val+1
   scale_coef=fix(alog10(max_val))-1
   if e_b_val eq 0 then e_str='(E!Dfull!N energy)' else e_str='(E/'+strtrim(string(round(1.0/e_frac(e_b_val)),format='(I2)'),2)+' energy)'
   titl='Fraction in n=3 excited state of the '+e_str
   xtitl='Beam X coordinate, m'
   ytitl='Beam Y coordinate, m'
   contour, exc_n3_frac(e_b_val,Z_B_Slider_val,*,*)*10.0^(-scale_coef),x_beam,y_beam,color=0,background=-1,ystyle=1,xstyle=1,xtitle=xtitl,ytitle=ytitl,$
   levels=interpol([min_val,max_val]*10.0^(-scale_coef),255),C_COLORS = interpol([16,208],255), /FILL,title=titl,Charsize=1.5
   oplot,[0,0],[-max(y_beam),max(y_beam)],color=-1,linestyle=2
   oplot,[-max(x_beam),max(x_beam)],[0,0],color=-1,linestyle=2
   xyouts,280,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3,charthick=3
   xyouts,280,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=-1,charsize=1.3,charthick=1  
   xyouts,90,360,'Beam: '+beam,/device,color=0,charsize=1.3,charthick=3
   xyouts,90,360,'Beam: '+beam,/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3,charthick=3
   xyouts,90,340,'Shot: '+strtrim(string(shot),2),/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3,charthick=3
   xyouts,90,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3,charthick=3
   xyouts,90,300,'Beam atom: '+strtrim(beam_atom),/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=0,charsize=1.3,charthick=3
   xyouts,90,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=-1,charsize=1.3,charthick=1
   ;colorbar--------------------------------------------------------------------------------------------------------------------------
   w_x_size=!D.X_Vsize & w_y_size=!D.Y_Vsize
   pos=[0.95,0.11,0.99,0.85] & n_ticks=7 & col_min=16 & col_max=208 & n_colors=255
   bar_pos_x=pos(0)*w_x_size & bar_pos_y=pos(1)*w_y_size & bar_size_x= (pos(2)-pos(0))*w_x_size & bar_size_y=(pos(3)-pos(1))*w_y_size
   bar = interpol([col_min,col_max],n_colors) ## replicate(1,10)
   TV, CONGRID(bar, bar_size_x, bar_size_y), bar_pos_x+1, bar_pos_y+1
   plot,[0,bar_size_x],[0,bar_size_y],/nodata,xticks=1,yticks=n_ticks-1,xstyle=1,ystyle=1,position=pos,color=0,charsize=1.4,/noerase,xtickformat='(A1)',$
   yminor=2,ytickname=string(interpol([min_val,max_val]*10.0^(-scale_coef),n_ticks),format='(F5.2)'),yticklen=0.2
   xyouts,438,370,'    x10!U '+strtrim(string(scale_coef,format='(I2)'),2)+'!N',color=0,charsize=1.4,/device
   ;----------------------------------------------------------------------------------------------------------------------------------
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl+' x10!U '+strtrim(string(scale_coef,format='(I2)'),2)+'!N'
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Contourz'
       printf,3,reform(exc_n3_frac(e_b_val,Z_B_Slider_val,*,*))*10.0^(-scale_coef)
       printf,3,''
       printf,3,';Contourx'
       printf,3,x_beam
       printf,3,''
       printf,3,';Contoury'
       printf,3,y_beam
       printf,3,''
       close,3      
     endelse
   endif    
 endif
 if preview_val eq 26 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   E_B_Val=where(e_check gt 0)
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(exc_n3_frac(e_b_val,*,*,*)) else max_val=max(exc_n3_frac(e_b_val,*,X_B_Slider_val,Y_B_Slider_val))
   scale_coef=fix(alog10(max_val))-1
   n_energy_sel=n_elements(E_B_Val)
   color_ind=[0,48,64,112,160]
   titl='Fraction of atoms in n=3 excited state x10!U'+strtrim(string(scale_coef,format='(I2)'),1)
   xtitl='Distance from accelerating grids, m'
   ytitl='Fraction of atoms in n=3 excited state x10!U'+strtrim(string(scale_coef,format='(I2)'),1)
   plot, z_beam, z_beam,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   for i=0, n_energy_sel-1 do begin
     if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
     e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
     oplot, z_beam, exc_n3_frac(e_b_val(i),*,X_B_Slider_val,Y_B_Slider_val)*10.0^(-scale_coef),color=color_ind(e_b_val(i))
     xyouts,70,130-i*20,e_str,/device,color=color_ind(e_b_val(i)),charsize=1.3
   endfor 
   xyouts,330,360,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3,charthick=1
 ;  xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=-1,charsize=1.3,charthick=1
 if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       for i=0, n_energy_sel-1 do begin
         if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
         e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
         printf,3,';Text'
         printf,3,e_str
         printf,3,''
         printf,3,';Plotx'
         printf,3,z_beam
         printf,3,''
         printf,3,';Ploty'
         printf,3,reform(exc_n3_frac(e_b_val(i),*,X_B_Slider_val,Y_B_Slider_val))*10.0^(-scale_coef)
         printf,3,''
       endfor      
       close,3      
     endelse
   endif 
 endif
 if preview_val eq 27 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   E_B_Val=where(e_check gt 0)
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   n_z=n_elements(z_beam)
   ;calulation r_major along the beam centerline x_beam=0, y_beam=0
   grid_cent_x=r_grid*cos(phi_grid)
   grid_cent_y=-r_grid*sin(phi_grid)
   wall_cent_x=r_wall*cos(phi_wall)
   wall_cent_y=-r_wall*sin(phi_wall)
   dist_all_XY=sqrt((wall_cent_x-grid_cent_x)^2.0+(wall_cent_y-grid_cent_y)^2.0)
   sin_pivot=-(wall_cent_y-grid_cent_y)/dist_all_XY;angle in machine XY plane (horizontal)
   cos_pivot=-(wall_cent_x-grid_cent_x)/dist_all_XY
  
   dist_all_XYZ=sqrt((wall_cent_x-grid_cent_x)^2.0+(wall_cent_y-grid_cent_y)^2.0+(z_wall-z_grid)^2.0)
   sin_alpha=(z_wall-z_grid)/dist_all_XYZ ; angle in machine XZ plane (vertical)
   cos_alpha=sqrt(1.0-sin_alpha^2.0)
   ;rotating beam coordinate to machine midplane projection 
   ix=x_b_slider_val
   iy=y_b_slider_val
   z_beam1=z_beam*cos_alpha-y_beam(iy)*sin_alpha
   y_beam1=z_beam*sin_alpha+y_beam(iy)*cos_alpha+z_grid
   x_beam1=x_beam(ix)                    
   ;moving beam to machine center and rotating
   x_tor2=-z_beam1*cos_pivot+x_beam1*sin_pivot+r_grid*cos(phi_grid)
   y_tor2=-z_beam1*sin_pivot-x_beam1*cos_pivot-r_grid*sin(phi_grid)
   r_tor2=sqrt(x_tor2^2.0+y_tor2^2.0)
   min_r_tor2 = min(r_tor2,min_ind)
   r_tor3 = r_tor2(0:min_ind)
   ind_all = where(r_tor3 gt r_major-r_minor*1.2 and r_tor3 lt r_major+r_minor*1.2)
   
   ind1 = max(ind_all)
   ind2 = min(ind_all)
   r_output=reverse(r_tor3(ind_all)) 
   ;---------------------------------------------------------------
   if scale_check eq 1 then max_val=max(exc_n3_frac(e_b_val,ind2:ind1,*,*)) else max_val=max(exc_n3_frac(e_b_val,ind2:ind1,X_B_Slider_val,Y_B_Slider_val))
   scale_coef=fix(alog10(max_val))-1
   n_energy_sel=n_elements(E_B_Val)
   color_ind=[0,48,64,112,160]
   titl='Fraction of atoms in n=3 excited state x10!U'+strtrim(string(scale_coef,format='(I2)'),1)
   xtitl='Major Radius, m'
   ytitl='Fraction of atoms in n=3 excited state x10!U'+strtrim(string(scale_coef,format='(I2)'),1)
   plot, r_output, r_output,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl,xrange=[r_major-1.2*r_minor,r_major+1.2*r_minor]
   for i=0, n_energy_sel-1 do begin
     if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
     e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
     oplot, r_output, reverse(exc_n3_frac(e_b_val(i),ind2:ind1,X_B_Slider_val,Y_B_Slider_val),2)*10.0^(-scale_coef),color=color_ind(e_b_val(i))
     xyouts,70,130-i*20,e_str,/device,color=color_ind(e_b_val(i)),charsize=1.3
   endfor  
   xyouts,330,360,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3,charthick=1
   ;xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=-1,charsize=1.3,charthick=1
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       for i=0, n_energy_sel-1 do begin
         if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
         e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
         printf,3,';Text'
         printf,3,e_str
         printf,3,''
         printf,3,';Plotx'
         printf,3,r_output
         printf,3,''
         printf,3,';Ploty'
         printf,3,reform(reverse(exc_n3_frac(e_b_val(i),ind2:ind1,X_B_Slider_val,Y_B_Slider_val),2))*10.0^(-scale_coef)
         printf,3,''
       endfor      
       close,3      
     endelse
   endif
 endif  
 if preview_val eq 28 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   E_B_Val=where(e_check gt 0)
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(exc_n3_frac(e_b_val,*,*,*)) else max_val=max(exc_n3_frac(e_b_val,Z_B_Slider_val,*,Y_B_Slider_val))
   scale_coef=fix(alog10(max_val))-1
    n_energy_sel=n_elements(E_B_Val)
   color_ind=[0,48,64,112,160]
   titl='Fraction of atoms in n=3 excited state x10!U'+strtrim(string(scale_coef,format='(I2)'),1)
   xtitl='Beam X coordinate, m'
   ytitl='Fraction of atoms in n=3 excited state x10!U'+strtrim(string(scale_coef,format='(I2)'),1)
   plot, x_beam, z_beam,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   for i=0, n_energy_sel-1 do begin
     if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
     e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
     oplot, x_beam, exc_n3_frac(e_b_val(i),Z_B_Slider_val,*,Y_B_Slider_val)*10.0^(-scale_coef),color=color_ind(e_b_val(i))
     xyouts,70,130-i*20,e_str,/device,color=color_ind(e_b_val(i)),charsize=1.3
   endfor
   xyouts,330,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3,charthick=1
   ;xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=-1,charsize=1.3,charthick=1
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       for i=0, n_energy_sel-1 do begin
         if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
         e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
         printf,3,';Text'
         printf,3,e_str
         printf,3,''
         printf,3,';Plotx'
         printf,3,x_beam
         printf,3,''
         printf,3,';Ploty'
         printf,3,reform(exc_n3_frac(e_b_val(i),Z_B_Slider_val,*,Y_B_Slider_val))*10.0^(-scale_coef)
         printf,3,''
       endfor      
       close,3      
     endelse
   endif
 endif
 if preview_val eq 29 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   e_check=make_array(n_elements(e_beam))
   for i=0, n_elements(e_beam)-1 do begin
     Widget_control,Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),get_value=dum
     e_check(i)=dum
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=1
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=1
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   if total(e_check) eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please choose energy component to plot.']], Set_text_top_line=n_elements(status_tx)-4
     erase
     st_err=1
     return
   endif
   E_B_Val=where(e_check gt 0) 
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(exc_n3_frac(e_b_val,*,*,*)) else max_val=max(exc_n3_frac(e_b_val,Z_B_Slider_val,X_B_Slider_val,*))
   scale_coef=fix(alog10(max_val))-1
   n_energy_sel=n_elements(E_B_Val)
   color_ind=[0,48,64,112,160]
   titl='Fraction of atoms in n=3 excited state x10!U'+strtrim(string(scale_coef,format='(I2)'),1)
   xtitl='Beam Y coordinate, m'
   ytitl='Fraction of atoms in n=3 excited state x10!U'+strtrim(string(scale_coef,format='(I2)'),1)
   plot, y_beam, z_beam,color=0,/nodata,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val*10.0^(-scale_coef)],charsize=1.5,$
   xtitle=xtitl,ytitle=ytitl,title=titl
   for i=0, n_energy_sel-1 do begin
     if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
     e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
     oplot, y_beam, exc_n3_frac(e_b_val(i),Z_B_Slider_val,X_B_Slider_val,*)*10.0^(-scale_coef),color=color_ind(e_b_val(i))
     xyouts,70,130-i*20,e_str,/device,color=color_ind(e_b_val(i)),charsize=1.3
   endfor 
   xyouts,330,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'X coordinate: '+strtrim(string(x_beam(x_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   xyouts,70,300,'Beam atom: '+strtrim(beam_atom),/device,color=0,charsize=1.3,charthick=1
  ; xyouts,70,280,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV',/device,color=-1,charsize=1.3,charthick=1
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam atom: '+strtrim(beam_atom)       
       printf,3,''
       printf,3,';Text'
       printf,3,'E!Dfull!N: '+strtrim(string(e_full,format='(F10.1)'),2)+' keV'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       for i=0, n_energy_sel-1 do begin
         if e_b_val(i) eq 0 then e_str='E!Dfull!N: '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV' else $
         e_str='E/'+strtrim(string(round(1.0/e_frac(e_b_val(i))),format='(I2)'),2)+': '+strtrim(string(e_beam(e_b_val(i)),format='(F5.1)'),2)+' keV'
         printf,3,';Text'
         printf,3,e_str
         printf,3,''
         printf,3,';Plotx'
         printf,3,y_beam
         printf,3,''
         printf,3,';Ploty'
         printf,3,reform(exc_n3_frac(e_b_val(i),Z_B_Slider_val,X_B_Slider_val,*))*10.0^(-scale_coef)
         printf,3,''
       endfor      
       close,3      
     endelse
   endif
 endif
 if preview_val eq 30 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   !X.Margin=[9,9]
   !Y.Margin=[3,2]
   if scale_check eq 1 then begin
      max_val=max(limiters_arr)
      min_val=min(limiters_arr)
   endif else begin
      max_val=max(limiters_arr(Z_B_Slider_val,*,*))
      min_val=min(limiters_arr(Z_B_Slider_val,*,*))
   endelse
   if min_val eq max_val then max_val=min_val+1e10
   titl='Position of the beam limiters'
   xtitl='Beam X coordinate, m'
   ytitl='Beam Y coordinate, m'
   contour, limiters_arr(Z_B_Slider_val,*,*),x_beam,y_beam,color=0,background=-1,ystyle=1,xstyle=1,xtitle=xtitl,ytitle=ytitl,$
   levels=[0,1],C_COLORS = [240,64], /FILL,title=titl,Charsize=1.5
   oplot,[0,0],[-max(y_beam),max(y_beam)],color=0,linestyle=2
   oplot,[-max(x_beam),max(x_beam)],[0,0],color=0,linestyle=2
   xyouts,280,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3,charthick=3
   xyouts,280,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=-1,charsize=1.3,charthick=1  
   xyouts,90,360,'Beam: '+beam,/device,color=0,charsize=1.3,charthick=3
   xyouts,90,360,'Beam: '+beam,/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3,charthick=3
   xyouts,90,340,'Shot: '+strtrim(string(shot),2),/device,color=-1,charsize=1.3,charthick=1
   xyouts,90,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3,charthick=3
   xyouts,90,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=-1,charsize=1.3,charthick=1
  ;colorbar--------------------------------------------------------------------------------------------------------------------------
   w_x_size=!D.X_Vsize & w_y_size=!D.Y_Vsize
   pos=[0.95,0.11,0.99,0.85] & n_ticks=2 & col_min=240 & col_max=64 & n_colors=2
   bar_pos_x=pos(0)*w_x_size & bar_pos_y=pos(1)*w_y_size & bar_size_x= (pos(2)-pos(0))*w_x_size & bar_size_y=(pos(3)-pos(1))*w_y_size
   bar = interpol([col_min,col_max],n_colors) ## replicate(1,10)
   TV, CONGRID(bar, bar_size_x, bar_size_y), bar_pos_x+1, bar_pos_y+1
   plot,[0,bar_size_x],[0,bar_size_y],/nodata,xticks=1,yticks=n_ticks-1,xstyle=1,ystyle=1,position=pos,color=0,charsize=1.4,/noerase,xtickformat='(A1)',$
   yminor=2,ytickname=['no','yes'],yticklen=0.2
   ;----------------------------------------------------------------------------------------------------------------------------------
  if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Contourz'
       printf,3,reform(limiters_arr(Z_B_Slider_val,*,*))
       printf,3,''
       printf,3,';Contourx'
       printf,3,x_beam
       printf,3,''
       printf,3,';Contoury'
       printf,3,y_beam
       printf,3,''
       close,3      
     endelse
   endif  
 endif 
 if preview_val eq 31 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(limiters_arr) else max_val=max(limiters_arr(*,X_B_Slider_val,Y_B_Slider_val))*1e-6
   titl='Position of the beam limiters'
   xtitl='Distance from accelerating grids, m'
   ytitl='Position of the beam limiters'
   plot, z_beam, limiters_arr(*,X_B_Slider_val,Y_B_Slider_val)*1e-6,color=0,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val],charsize=1.5,$
   xtitle=xtitl,ytitl=ytitl,title=titl
   xyouts,330,360,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Plotx'
       printf,3,z_beam
       printf,3,''
       printf,3,';Ploty'
       printf,3,reform(limiters_arr(*,X_B_Slider_val,Y_B_Slider_val))*1e-6
       printf,3,''      
       close,3      
     endelse
   endif
 endif
 if preview_val eq 32 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=1
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Y_B_Slider'),Get_Value=Y_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(limiters_arr) else max_val=max(limiters_arr(Z_B_Slider_val,*,Y_B_Slider_val))*1e-6
   titl='Position of the beam limiters'
   xtitl='Beam X coordinate, m'
   ytitl='Position of the beam limiters'
   plot, x_beam, limiters_arr(Z_B_Slider_val,*,Y_B_Slider_val)*1e-6,color=0,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val],charsize=1.5,$
   xtitle=xtitl,ytitl=ytitl, title=titl
   oplot,[0,0],[0,2.0*max_val],color=0,linestyle=2
   xyouts,330,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance: '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'Y coordinate: '+strtrim(string(y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Plotx'
       printf,3,x_beam
       printf,3,''
       printf,3,';Ploty'
       printf,3,reform(limiters_arr(Z_B_Slider_val,*,Y_B_Slider_val))*1e-6
       printf,3,''      
       close,3      
     endelse
   endif
 endif
 if preview_val eq 33 then begin
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Z_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='X_B_Slider'),Sensitive=1
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
   for i=0, n_elements(e_beam)-1 do begin
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_'+strtrim(string(i+1),2)) ,Sensitive=0
     Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Check_'+strtrim(string(i+1),2)),Sensitive=0
   endfor
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0   
   Widget_Control, Widget_Info(Main_base, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Z_B_Slider'),Get_Value=Z_B_Slider_val
   Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='X_B_Slider'),Get_Value=X_B_Slider_val
   !X.Margin=[7,3]
   !Y.Margin=[3,2]
   if scale_check eq 1 then max_val=max(limiters_arr) else max_val=max(limiters_arr(Z_B_Slider_val,X_B_Slider_val,*))*1e-6
   titl='Position of the beam limiters'
   xtitl='Beam X coordinate, m'
   ytitl='Position of the beam limiters'
   plot, y_beam, limiters_arr(Z_B_Slider_val,X_B_Slider_val,*)*1e-6,color=0,background=-1,ystyle=2,xstyle=1,yrange=[0,max_val],charsize=1.5,$
   xtitle=xtitl,ytitl=ytitl, title=titl
   oplot,[0,0],[0,2.0*max_val],color=0,linestyle=2
   xyouts,330,360,'Z distance  : '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,330,340,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m',/device,color=0,charsize=1.3
   xyouts,70,360,'Beam: '+beam,/device,color=0,charsize=1.3
   xyouts,70,340,'Shot: '+strtrim(string(shot),2),/device,color=0,charsize=1.3
   xyouts,70,320,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec',/device,color=0,charsize=1.3
   if export_flag then begin
     if export_sel eq 0 then begin
       a_img=tvrd(true=1) 
       tvlct,r_img,g_img,b_img,/get 
       write_png,export_file,a_img,r_img,g_img,b_img 
     endif else begin
       printf,3,''
       printf,3,';Plot type'      
       printf,3,preview_text
       printf,3,''
       printf,3,';Title'
       printf,3,titl
       printf,3,''
       printf,3,';Xtitle'
       printf,3,xtitl
       printf,3,''
       printf,3,';Ytitle'
       printf,3,ytitl
       printf,3,''
       printf,3,';Text'
       printf,3,'Beam: '+beam
       printf,3,''
       printf,3,';Text'
       printf,3,'Shot: '+strtrim(string(shot),2)
       printf,3,''
       printf,3,';Text'
       printf,3,'Time: ['+strtrim(string(t1,format='(F5.3)'),2)+'-'+strtrim(string(t2,format='(F5.3)'),2)+'] sec'
       printf,3,''
       printf,3,';Text'
       printf,3,'Z distance: '+strtrim(string(z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Text'
       printf,3,'X coordinate: '+strtrim(string(x_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
       printf,3,''
       printf,3,';Plotx'
       printf,3,y_beam
       printf,3,''
       printf,3,';Ploty'
       printf,3,reform(limiters_arr(Z_B_Slider_val,X_B_Slider_val,*))*1e-6
       printf,3,''      
       close,3      
     endelse
   endif
 endif

end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which performs on the event from "Code Grid/Mesh" window
;-------------------------------------------------------------------------------------------------------------------------
Pro Code_Grid_Widget_event, ev
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block contains the table of the parameters which
;defile the 3D spatial grid which used for calculation
common grid_arr, code_grid_arr
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during in the Code Grid/Mesh window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
     st_err=0
     return
   endif
 endif
;-----------------------------------------------------

; Global event cases:
;---------------------------------------------------------------------------------------------------------------------------------------
case ev.id of
    ;-----------------Glose Grid Button
   Widget_Info(ev.id, FIND_BY_UNAME='Code_Close_Grid_Button'): begin
    Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Code_Grid_Widget'),/DESTROY
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Code_Save_Grid_Button'): begin
    Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Code_Grid_Table1'),Get_value=code_grid_arr1
    Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Code_Grid_Table2'),Get_value=code_grid_arr2
    code_grid_arr={z:float(code_grid_arr1),x:float(code_grid_arr2(*,0)),y:float(code_grid_arr2(*,1))}
    Widget_control, status_wid, Get_Value=status_tx
    Widget_Control, status_wid,$
    Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Code Grid/Mesh were saved']], Set_text_top_line=n_elements(status_tx)-4
   end
  else:
   endcase
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which performs on the event from "Neutral Gas" window
;-------------------------------------------------------------------------------------------------------------------------
Pro Neutral_Gas_Widget_event, ev
;The following common block contains neutral gas parameters used in
;calculation of the beam attenuation in the gas.
common neutral_gas,tank_pressure,torus_pressure,duct_pressure,duct_pressure_loc,n0_arr,n0_stop_cross_section
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir 

 ;-----------------------------------------------------
 if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during in the Neutral Gas window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
     st_err=0
     return
   endif
 endif
 ;-----------------------------------------------------

; Global event cases:
;---------------------------------------------------------------------------------------------------------------------------------------
case ev.id of
    ;-----------------Neutral_Gas Button
   Widget_Info(ev.id, FIND_BY_UNAME='Neutral_Gas_Close_Button'): begin
    Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Neutral_Gas_Widget'),/DESTROY
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Neutral_Gas_Save_Button'): begin
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='P_Tank_Text'),Get_value=tank_pressure_txt
      tank_pressure=float(tank_pressure_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='P_Torus_Text'),Get_value=torus_pressure_txt
      torus_pressure=float(torus_pressure_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='P_Duct_Text'),Get_value=duct_pressure_txt
      duct_pressure=float(duct_pressure_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_Duct_Text'),Get_value=duct_pressure_loc_txt
      duct_pressure_loc=float(duct_pressure_loc_txt(0))
      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Neutral gas parameters were saved']], Set_text_top_line=n_elements(status_tx)-4
   end
  else:
   endcase
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which performs on the event from "Construct Settings" window
;-------------------------------------------------------------------------------------------------------------------------
Pro Construct_Settings_Widget_event, ev
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation.
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during in the CONSTRUCT Settings window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
     st_err=0
     return
   endif
 endif
;-----------------------------------------------------

; Global event cases:
;---------------------------------------------------------------------------------------------------------------------------------------
case ev.id of
    ;-----------------Construct_Settings Buttons
   Widget_Info(ev.id, FIND_BY_UNAME='Construct_Settings_Close_Button'): begin
    Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Construct_Settings_Widget'),/DESTROY
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Construct_Settings_Save_Button'): begin
      flux_surf_arr_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Flux_Surf_Arr_Type_Droplist'), /Droplist_Select)
      Ne_arr_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Ne_Arr_Type_Droplist'), /Droplist_Select)
      Te_arr_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Te_Arr_Type_Droplist'), /Droplist_Select)
      Z_Eff_arr_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Z_Eff_Arr_Type_Droplist'), /Droplist_Select)
      Stop_plasma_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Stop_Plasma_Type_Droplist'), /Droplist_Select)
      Exc_plasma_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Exc_Plasma_Type_Droplist'), /Droplist_Select)
      Gas_arr_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Gas_Arr_Type_Droplist'), /Droplist_Select) 
      Stop_gas_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Stop_Gas_Type_Droplist'), /Droplist_Select)
      Lim_arr_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Lim_Arr_Type_Droplist'), /Droplist_Select)
      Grid_aper_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Grid_Aper_Type_Droplist'), /Droplist_Select)
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='ADAS_Dir_Text'),get_value=adas_dir
      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : CONSTRUCT Settings were saved']], Set_text_top_line=n_elements(status_tx)-4 
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Stop_Plasma_Type_Droplist'): begin
     Stop_plasma_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Stop_Plasma_Type_Droplist'), /Droplist_Select)
     Exc_plasma_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Exc_Plasma_Type_Droplist'), /Droplist_Select)
     if stop_plasma_type gt 2 and exc_plasma_type gt 2 then begin
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='ADAS_Label'), Sensitive=0
       Widget_Control,  Widget_Info(ev.top, FIND_BY_UNAME='ADAS_Dir_Text'), Sensitive=0
     endif else begin
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='ADAS_Label'), Sensitive=1
       Widget_Control,  Widget_Info(ev.top, FIND_BY_UNAME='ADAS_Dir_Text'), Sensitive=1
     endelse  
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Exc_Plasma_Type_Droplist'): begin 
     Stop_plasma_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Stop_Plasma_Type_Droplist'), /Droplist_Select)
     Exc_plasma_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Exc_Plasma_Type_Droplist'), /Droplist_Select)
     if stop_plasma_type gt 2 and exc_plasma_type gt 2 then begin
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='ADAS_Label'), Sensitive=0
       Widget_Control,  Widget_Info(ev.top, FIND_BY_UNAME='ADAS_Dir_Text'), Sensitive=0
     endif else begin
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='ADAS_Label'), Sensitive=1
       Widget_Control,  Widget_Info(ev.top, FIND_BY_UNAME='ADAS_Dir_Text'), Sensitive=1
     endelse
   end
else:
   endcase
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which performs on the event from "Run Settings" window
;-------------------------------------------------------------------------------------------------------------------------
Pro Calc_Settings_Widget_event, ev
;The following common block contains some of the settings of how to
;run the beam attenuation and penetration calculation.
common run_settings,div_type,div_type_names,atten_type, atten_type_names, vel_dis_type,vel_dis_names,save_output_type,save_output_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during in the RUN Settings window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
     st_err=0
     return
   endif
 endif
;-----------------------------------------------------

; Global event cases:
;---------------------------------------------------------------------------------------------------------------------------------------
case ev.id of
    ;-----------------Run_Settings Buttons
   Widget_Info(ev.id, FIND_BY_UNAME='Calc_Settings_Close_Button'): begin
    Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Calc_Settings_Widget'),/DESTROY
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Calc_Settings_Save_Button'): begin
      div_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Div_Type_Droplist'), /Droplist_Select)
      atten_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Atten_Type_Droplist'), /Droplist_Select)
      vel_dis_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Vel_Dis_Droplist'), /Droplist_Select)
      save_output_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Save_Output_Type_Droplist'), /Droplist_Select)
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Save_Output_File_Text'),Get_value=save_output_file
      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : RUN Settings were saved']], Set_text_top_line=n_elements(status_tx)-4 
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Save_Output_Type_Droplist'): begin
      save_output_type_1=Widget_Info(Widget_Info(ev.id, FIND_BY_UNAME='Save_Output_Type_Droplist'), /Droplist_Select)
       if save_output_type_1 eq 0 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Save_Output_File_Text'),Sensitive=0
      endif    
      if save_output_type_1 eq 1 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Save_Output_File_Text'),Sensitive=1
      endif
      if save_output_type_1 eq 2 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Save_Output_File_Text'),Sensitive=0
      endif 
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Div_Type_Droplist'): begin
      div_type_1=Widget_Info(Widget_Info(ev.id, FIND_BY_UNAME='Div_Type_Droplist'), /Droplist_Select)
      if div_type_1 eq 0 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Atten_Type_Droplist'),Sensitive=1
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Vel_Dis_Droplist'),Sensitive=1
      endif  
      if div_type_1 eq 1 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Atten_Type_Droplist'),Sensitive=1
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Vel_Dis_Droplist'),Sensitive=1
      endif   
      if div_type_1 eq 2 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Atten_Type_Droplist'),Set_Droplist_Select=5
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Atten_Type_Droplist'),Sensitive=0
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Vel_Dis_Droplist'),Set_Droplist_Select=1
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Vel_Dis_Droplist'),Sensitive=0        
      endif
   end
 else:
   endcase
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which performs on the event from "Load Settings" window
;-------------------------------------------------------------------------------------------------------------------------
Pro Load_Settings_Widget_event, ev
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration
;calculation
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,$
ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
;The following common block contains some of the settings of "saving
;parameters to the file"
common save_param, save_param_file
;The following common block contains some of the settings of how to
;run the beam attenuation and penetration calculation.
common run_settings, div_type,div_type_names,atten_type, atten_type_names, vel_dis_type,vel_dis_names,save_output_type,save_output_file
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error occured during in the LOAD Settings window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
     st_err=0
     return
   endif
 endif
;-----------------------------------------------------

; Global event cases:
;---------------------------------------------------------------------------------------------------------------------------------------
case ev.id of
    ;-----------------Load_Settings Buttons
   Widget_Info(ev.id, FIND_BY_UNAME='Load_Settings_Close_Button'): begin
    Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Load_Settings_Widget'),/DESTROY
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Load_Settings_Save_Button'): begin
      general_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='General_Type_Droplist'), /Droplist_Select)
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='General_File_Text'),Get_value=general_file      
      beam_geom_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Beam_Geom_Type_Droplist'), /Droplist_Select)
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Geom_File_Text'),Get_value=beam_geom_file
      beam_lim_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Beam_Lim_Type_Droplist'), /Droplist_Select)
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Lim_File_Text'),Get_value=beam_lim_file     
      beam_param_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Beam_Param_Type_Droplist'), /Droplist_Select)
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Param_File_Text'),Get_value=beam_param_file
      ne_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Ne_Type_Droplist'), /Droplist_Select)
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Ne_File_Text'),Get_value=ne_file
      te_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Te_Type_Droplist'), /Droplist_Select)
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Te_File_Text'),Get_value=te_file
      z_eff_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Z_Eff_Type_Droplist'), /Droplist_Select)
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_Eff_File_Text'),Get_value=Z_eff_file      
      plasma_geom_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Geom_Type_Droplist'), /Droplist_Select)
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Geom_File_Text'),Get_value=plasma_geom_file
      plasma_param_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Param_Type_Droplist'), /Droplist_Select)
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Param_File_Text'),Get_value=plasma_param_file       
      gas_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Gas_Type_Droplist'), /Droplist_Select)
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Gas_File_Text'),Get_value=gas_file
      grid_type=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Grid_Type_Droplist'), /Droplist_Select)
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Grid_File_Text'),Get_value=grid_file
      save_param_file=file_dir+'/'+beam+'.abi'
      ;save_output_file=file_dir+'/'+beam+'_'+strtrim(string(run,format='(I2)'),2)+'.abo'
      
      Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Load_Choice_Check'),Get_value=load_choice     
      
      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : LOAD Settings were saved']], Set_text_top_line=n_elements(status_tx)-4  
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Load_Choice_Check'): begin
     Widget_Control,ev.id,Get_value=load_choice_1
     if load_choice_1 eq 0 then begin
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='General_Type_Droplist'), Set_Droplist_Select=load_set_def(0)
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='General_Type_Droplist'),Timer=0.01   
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Beam_Geom_Type_Droplist'), Set_Droplist_Select=load_set_def(1)
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Beam_Geom_Type_Droplist'),Timer=0.01
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Beam_Lim_Type_Droplist'), Set_Droplist_Select=load_set_def(2)
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Beam_Lim_Type_Droplist'),Timer=0.01  
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Beam_Param_Type_Droplist'), Set_Droplist_Select=load_set_def(3)
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Beam_Param_Type_Droplist'),Timer=0.01
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Geom_Type_Droplist'), Set_Droplist_Select=load_set_def(4)
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Geom_Type_Droplist'),Timer=0.01
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Param_Type_Droplist'), Set_Droplist_Select=load_set_def(5)
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Param_Type_Droplist'),Timer=0.01          
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Ne_Type_Droplist'), Set_Droplist_Select=load_set_def(6)
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Ne_Type_Droplist'),Timer=0.01
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Te_Type_Droplist'), Set_Droplist_Select=load_set_def(7)
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Te_Type_Droplist'),Timer=0.01
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Z_Eff_Type_Droplist'), Set_Droplist_Select=load_set_def(8)
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Z_Eff_Type_Droplist'),Timer=0.01
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Gas_Type_Droplist'), Set_Droplist_Select=load_set_def(9)
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Gas_Type_Droplist'),Timer=0.01       
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Grid_Type_Droplist'), Set_Droplist_Select=load_set_def(10)
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Grid_Type_Droplist'),Timer=0.01
     endif
     if load_choice_1 eq 1 then begin
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='General_Type_Droplist'), Set_Droplist_Select=1
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='General_Type_Droplist'),Timer=0.01   
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Beam_Geom_Type_Droplist'), Set_Droplist_Select=1
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Beam_Geom_Type_Droplist'),Timer=0.01
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Beam_Lim_Type_Droplist'), Set_Droplist_Select=1
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Beam_Lim_Type_Droplist'),Timer=0.01  
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Beam_Param_Type_Droplist'), Set_Droplist_Select=1
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Beam_Param_Type_Droplist'),Timer=0.01
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Geom_Type_Droplist'), Set_Droplist_Select=3
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Geom_Type_Droplist'),Timer=0.01
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Param_Type_Droplist'), Set_Droplist_Select=1
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Param_Type_Droplist'),Timer=0.01          
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Ne_Type_Droplist'), Set_Droplist_Select=3
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Ne_Type_Droplist'),Timer=0.01
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Te_Type_Droplist'), Set_Droplist_Select=4
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Te_Type_Droplist'),Timer=0.01
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Z_Eff_Type_Droplist'), Set_Droplist_Select=4
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Z_Eff_Type_Droplist'),Timer=0.01
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Gas_Type_Droplist'), Set_Droplist_Select=1
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Gas_Type_Droplist'),Timer=0.01       
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Grid_Type_Droplist'), Set_Droplist_Select=1
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Grid_Type_Droplist'),Timer=0.01
     endif  
     if load_choice_1 eq 2 then begin
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='General_Type_Droplist'), Set_Droplist_Select=2
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='General_Type_Droplist'),Timer=0.01   
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Beam_Geom_Type_Droplist'), Set_Droplist_Select=2
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Beam_Geom_Type_Droplist'),Timer=0.01
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Beam_Lim_Type_Droplist'), Set_Droplist_Select=2
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Beam_Lim_Type_Droplist'),Timer=0.01  
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Beam_Param_Type_Droplist'), Set_Droplist_Select=2
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Beam_Param_Type_Droplist'),Timer=0.01
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Geom_Type_Droplist'), Set_Droplist_Select=4
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Geom_Type_Droplist'),Timer=0.01
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Param_Type_Droplist'), Set_Droplist_Select=2
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Param_Type_Droplist'),Timer=0.01         
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Ne_Type_Droplist'), Set_Droplist_Select=4
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Ne_Type_Droplist'),Timer=0.01
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Te_Type_Droplist'), Set_Droplist_Select=5
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Te_Type_Droplist'),Timer=0.01
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Z_Eff_Type_Droplist'), Set_Droplist_Select=5
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Z_Eff_Type_Droplist'),Timer=0.01
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Gas_Type_Droplist'), Set_Droplist_Select=2
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Gas_Type_Droplist'),Timer=0.01       
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Grid_Type_Droplist'), Set_Droplist_Select=2
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Grid_Type_Droplist'),Timer=0.01
     endif
   end  
   Widget_Info(ev.id, FIND_BY_UNAME='General_Type_Droplist'): begin
      general_type_1=Widget_Info(ev.id, /Droplist_Select)
     ; Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'),Get_value=beam_1
      if general_type_1 eq 0 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='General_File_Text'),Sensitive=0
      endif 
      if general_type_1 eq 1 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='General_File_Text'),Sensitive=1
        general_file_1=file_dir+'/'+beam+'.abi'
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='General_File_Text'),Set_value=General_file_1
      endif
      if general_type_1 eq 2 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='General_File_Text'),Sensitive=0
      endif 
   end   
   Widget_Info(ev.id, FIND_BY_UNAME='Beam_Geom_Type_Droplist'): begin
      beam_geom_type_1=Widget_Info(ev.id, /Droplist_Select)
     ; Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'),Get_value=beam_1
      if beam_geom_type_1 eq 0 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Geom_File_Text'),Sensitive=0
      endif    
      if beam_geom_type_1 eq 1 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Geom_File_Text'),Sensitive=1
        beam_geom_file_1=file_dir+'/'+beam+'.abi'
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Geom_File_Text'),Set_value=beam_geom_file_1
      endif
      if beam_geom_type_1 eq 2 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Geom_File_Text'),Sensitive=0
      endif 
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Beam_Lim_Type_Droplist'): begin
      beam_lim_type_1=Widget_Info(ev.id, /Droplist_Select)
     ; Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'),Get_value=beam_1
      if beam_lim_type_1 eq 0 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Lim_File_Text'),Sensitive=0
      endif    
      if beam_lim_type_1 eq 1 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Lim_File_Text'),Sensitive=1
        beam_lim_file_1=file_dir+'/'+beam+'.abi'
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Lim_File_Text'),Set_value=beam_lim_file_1
      endif
      if beam_lim_type_1 eq 2 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Lim_File_Text'),Sensitive=0
      endif 
    end
    Widget_Info(ev.id, FIND_BY_UNAME='Beam_Param_Type_Droplist'): begin
      beam_param_type_1=Widget_Info(ev.id, /Droplist_Select)
      ;Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'),Get_value=beam_1
      if beam_param_type_1 eq 0 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Param_File_Text'),Sensitive=0
      endif    
      if beam_param_type_1 eq 1 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Param_File_Text'),Sensitive=1
        beam_param_file_1=file_dir+'/'+beam+'.abi'
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Param_File_Text'),Set_value=beam_param_file_1
      endif
      if beam_param_type_1 eq 2 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Param_File_Text'),Sensitive=0
      endif 
    end    
    Widget_Info(ev.id, FIND_BY_UNAME='Ne_Type_Droplist'): begin
      ne_type_1=Widget_Info(ev.id, /Droplist_Select)
    ;  Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'),Get_value=beam_1
      if ne_type_1 eq 0 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Ne_File_Text'),Sensitive=0
      endif
      if ne_type_1 eq 1 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Ne_File_Text'),Sensitive=0
      endif      
      if ne_type_1 eq 2 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Ne_File_Text'),Sensitive=1
        ne_file_1=file_dir+'/fits_'+shot+'.save'
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Ne_File_Text'),Set_value=ne_file_1
      endif
      if ne_type_1 eq 3 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Ne_File_Text'),Sensitive=1
        ne_file_1=file_dir+'/'+beam+'.abi'
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Ne_File_Text'),Set_value=ne_file_1
      endif
      if ne_type_1 eq 4 then begin
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Ne_File_Text'),Sensitive=0
      endif  
    end
    Widget_Info(ev.id, FIND_BY_UNAME='Te_Type_Droplist'): begin
      te_type_1=Widget_Info(ev.id, /Droplist_Select)
     ; Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'),Get_value=beam_1
      if te_type_1 eq 0 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Te_File_Text'),Sensitive=0
      endif
      if te_type_1 eq 1 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Te_File_Text'),Sensitive=0
      endif
      if te_type_1 eq 2 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Te_File_Text'),Sensitive=0
      endif
      if te_type_1 eq 3 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Te_File_Text'),Sensitive=1
        te_file_1=file_dir+'/fits_'+shot+'.save'
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Te_File_Text'),Set_value=te_file_1
      endif      
      if te_type_1 eq 4 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Te_File_Text'),Sensitive=1
        te_file_1=file_dir+'/'+beam+'.abi'
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Te_File_Text'),Set_value=te_file_1
      endif
      if te_type_1 eq 5 then begin
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Te_File_Text'),Sensitive=0
      endif    
    end
    Widget_Info(ev.id, FIND_BY_UNAME='Z_Eff_Type_Droplist'): begin
      z_eff_type_1=Widget_Info(ev.id, /Droplist_Select)
      ;Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'),Get_value=beam_1
      if z_eff_type_1 eq 0 or z_eff_type eq 1 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_Eff_File_Text'),Sensitive=0
      endif     
      if z_eff_type_1 eq 2 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_Eff_File_Text'),Sensitive=1
        z_eff_file_1='1.5'
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_Eff_File_Text'),Set_value=z_eff_file_1
      endif
      if z_eff_type_1 eq 3 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_Eff_File_Text'),Sensitive=1
        z_eff_file_1=file_dir+'/z_neo_ave_'+shot+'.sav'
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_Eff_File_Text'),Set_value=z_eff_file_1
      endif  
      if z_eff_type_1 eq 4 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_Eff_File_Text'),Sensitive=1
        z_eff_file_1=file_dir+'/'+beam+'.abi'
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_Eff_File_Text'),Set_value=z_eff_file_1
      endif      
      if z_eff_type_1 eq 5 then begin
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_Eff_File_Text'),Sensitive=0
      endif    
    end
    Widget_Info(ev.id, FIND_BY_UNAME='Plasma_Geom_Type_Droplist'): begin
      plasma_geom_type_1=Widget_Info(ev.id, /Droplist_Select)
     ; Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'),Get_value=beam_1
      if plasma_geom_type_1 eq 0 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Geom_File_Text'),Sensitive=0
      endif
      if plasma_geom_type_1 eq 1 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Geom_File_Text'),Sensitive=1
        plasma_geom_file_1=file_dir+'/efit/*.*'
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Geom_File_Text'),Set_value=plasma_geom_file_1
      endif
      if plasma_geom_type_1 eq 2 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Geom_File_Text'),Sensitive=1
        plasma_geom_file_1=file_dir+'/vmec/*.*'
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Geom_File_Text'),Set_value=plasma_geom_file_1
      endif
      if plasma_geom_type_1 eq 3 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Geom_File_Text'),Sensitive=1
        plasma_geom_file_1=file_dir+'/'+beam+'.abi'
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Geom_File_Text'),Set_value=plasma_geom_file_1
      endif
      if plasma_geom_type_1 eq 4 then begin
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Geom_File_Text'),Sensitive=0
      endif     
    end
     Widget_Info(ev.id, FIND_BY_UNAME='Plasma_Param_Type_Droplist'): begin
      plasma_param_type_1=Widget_Info(ev.id, /Droplist_Select)
     ; Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'),Get_value=beam_1
      if plasma_param_type_1 eq 0 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Param_File_Text'),Sensitive=0
      endif
      if plasma_param_type_1 eq 1 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Param_File_Text'),Sensitive=1
        plasma_param_file_1=file_dir+'/'+beam+'.abi'
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Param_File_Text'),Set_value=plasma_param_file_1
      endif      
      if plasma_param_type_1 eq 2 then begin
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Param_File_Text'),Sensitive=0
      endif     
    end
    Widget_Info(ev.id, FIND_BY_UNAME='Gas_Type_Droplist'): begin
      gas_type_1=Widget_Info(ev.id, /Droplist_Select)
     ; Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'),Get_value=beam_1
      if gas_type_1 eq 0 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Gas_File_Text'),Sensitive=0
      endif
      if gas_type_1 eq 1 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Gas_File_Text'),Sensitive=1
        gas_file_1=file_dir+'/'+beam+'.abi'
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Gas_File_Text'),Set_value=gas_file_1
      endif      
      if gas_type_1 eq 2 then begin
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Gas_File_Text'),Sensitive=0
      endif     
    end
    Widget_Info(ev.id, FIND_BY_UNAME='Grid_Type_Droplist'): begin
      grid_type_1=Widget_Info(ev.id, /Droplist_Select)
      ;Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'),Get_value=beam_1
      if grid_type_1 eq 0 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Grid_File_Text'),Sensitive=0
      endif
      if grid_type_1 eq 1 then begin
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Grid_File_Text'),Sensitive=1
        grid_file_1=file_dir+'/'+beam+'.abi'
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Grid_File_Text'),Set_value=grid_file_1
      endif      
      if grid_type_1 eq 2 then begin
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Grid_File_Text'),Sensitive=0
      endif     
    end
 else:
   endcase
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which performs on the event from "Beam Geometry" window
;-------------------------------------------------------------------------------------------------------------------------
Pro Beam_Geometry_Widget_event, ev
 ;The following common block contains the parameters which describe the geometry
 ;and position of the beam tank and all components needed for calculation.
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block contains the parameters which describe the geometry
;and position of the machine plasma
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower
;The following common block contains the parameters which describe the
;positions and sizes of the beam limiters.
common beam_limiters, n_limiters, limiters_table,limiters_arr
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err
;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during in the Beam Geometry window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
     st_err=0
     return
   endif
 endif
;-----------------------------------------------------

; Global event cases:
;---------------------------------------------------------------------------------------------------------------------------------------
case ev.id of
    ;-----------------Beam_Geometry Button
   Widget_Info(ev.id, FIND_BY_UNAME='Beam_Geometry_Close_Button'): begin
    Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Geometry_Widget'),/DESTROY
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Beam_Geometry_Save_Button') or Widget_Info(ev.id, FIND_BY_UNAME='Beam_Geometry_View'): begin
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Port_Text'),Get_value=beam_port_txt
      beam_port=beam_port_txt(0)
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Port_Phi_Text'),Get_value=beam_port_phi_txt
      beam_port_phi=float(beam_port_phi_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='X_Bml_Text'),Get_value=x_Bml_txt
      x_bml=float(strsplit(x_bml_txt,', ',/extract))/1e3
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Y_Bml_Text'),Get_value=y_Bml_txt
      y_bml=float(strsplit(y_bml_txt,', ',/extract))/1e3
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Grid_Ap_Diam_Text'),Get_value=grid_ap_diam_txt
      grid_ap_diam=float(grid_ap_diam_txt(0))      
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='X_Grids_Focus_Text'),Get_value=x_grid_focus_txt
      x_grid_focus=float(x_grid_focus_txt(0)) 
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Y_Grids_Focus_Text'),Get_value=y_grid_focus_txt
      y_grid_focus=float(y_grid_focus_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Tank_Front_Text'),Get_value=tank_front_dist_txt
      tank_front_dist=float(tank_front_dist_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Tank_Size_Text'),Get_value=tank_size_txt
      tank_size=float(tank_size_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Tank_Diam_Text'),Get_value=tank_diam_txt
      tank_diam=float(tank_diam_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Neutr_Front_Text'),Get_value=neutr_front_dist_txt
      neutr_front_dist=float(neutr_front_dist_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Neutr_Size_Text'),Get_value=neutr_size_txt
      neutr_size=float(neutr_size_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Neutr_Diam_Text'),Get_value=neutr_diam_txt
      neutr_diam=float(neutr_diam_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Tank_Magnet_Text'),Get_value=tank_magnet_dist_txt
      tank_magnet_dist=float(tank_magnet_dist_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Magnet_Size_Text'),Get_value=magnet_size_txt
      magnet_size=float(magnet_size_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Magnet_Diam_Text'),Get_value=magnet_diam_txt
      magnet_diam=float(magnet_diam_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Tank_Calorim_Text'),Get_value=tank_cal_dist_txt
      tank_cal_dist=float(tank_cal_dist_txt(0)) 
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='R_Wall_Text'),Get_value=r_wall_txt
      R_wall=float(r_wall_txt(0)) 
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_Wall_Text'),Get_value=z_wall_txt
      Z_wall=float(z_wall_txt(0)) 
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Phi_Wall_Text'),Get_value=phi_wall_txt
      phi_wall=float(phi_wall_txt(0)) 
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='R_Grid_Text'),Get_value=r_grid_txt
      R_grid=float(r_grid_txt(0)) 
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_Grid_Text'),Get_value=z_grid_txt
      Z_grid=float(z_grid_txt(0)) 
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Phi_Grid_Text'),Get_value=phi_grid_txt
      phi_grid=float(phi_grid_txt(0)) 
      
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Tank_Magnet_Text'),Get_value=magnet_tank_dist_txt
      magnet_tank_dist=float(magnet_tank_dist_txt(0))     

      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Beam Geometry parameters were saved']], Set_text_top_line=n_elements(status_tx)-4  
      
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Geometry_View'),Get_value=beam_view
      if beam_port ne '?' then begin
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Geometry_Plot'),get_value=drawID1
        cal_diam=neutr_diam*1.5 ; m
        cal_size=0.2*tank_size ;m
        x_marg=r_minor
        y_marg=r_minor
        wset, drawID1
        !X.Margin=[4,2]
        !Y.Margin=[2,7]
        ;geometrical factors
        grid_cent_x=-r_grid*cos(phi_grid)
        grid_cent_y=-r_grid*sin(phi_grid)
        wall_cent_x=-r_wall*cos(phi_wall)
        wall_cent_y=-r_wall*sin(phi_wall)
        grid_cent_z=z_grid
        wall_cent_z=z_wall
       

        dist_all_XY=sqrt((r_wall*cos(phi_wall)-r_grid*cos(phi_grid))^2.0+(r_wall*sin(phi_wall)-r_grid*sin(phi_grid))^2.0)
        cos_pivot_XY=(wall_cent_x-grid_cent_x)/dist_all_XY
        sin_pivot_XY=-(wall_cent_y-grid_cent_y)/dist_all_XY
        dist_all_YZ=sqrt((r_wall*sin(phi_wall)-r_grid*sin(phi_grid))^2.0+(z_wall-z_grid)^2.0)
        sin_pivot_YZ=-(wall_cent_z-grid_cent_z)/dist_all_YZ
        cos_pivot_YZ=(wall_cent_y-grid_cent_y)/dist_all_YZ
        dist_all_XYZ=sqrt((r_wall*cos(phi_wall)-r_grid*cos(phi_grid))^2.0+(r_wall*sin(phi_wall)-r_grid*sin(phi_grid))^2.0+(z_wall-z_grid)^2.0)
        dist_all_XZ=sqrt((r_wall*cos(phi_wall)-r_grid*cos(phi_grid))^2.0+(z_wall-z_grid)^2.0)
        sin_pivot_XZ=-(wall_cent_z-grid_cent_z)/dist_all_XZ
        cos_pivot_XZ=(wall_cent_x-grid_cent_x)/dist_all_XZ
        cos_pivot_Z=dist_all_XY/dist_all_XYZ
        sin_pivot_Z=sqrt(1.0-cos_pivot_Z^2.0)
        cos_pivot_Y=dist_all_XZ/dist_all_XYZ
        sin_pivot_Y=sqrt(1.0-cos_pivot_Y^2.0)      

        if beam_view eq 0 then begin
        tank_front_x=grid_cent_x+(tank_front_dist)*cos_pivot_XY*cos_pivot_Z
        tank_front_y=grid_cent_y-(tank_front_dist)*sin_pivot_XY*cos_pivot_Z      
   
  
        wx0=min([grid_cent_x-neutr_diam/2.0*sin_pivot_XY,-(r_major+r_minor*1.2),tank_front_x-tank_diam/2.0*sin_pivot_XY,tank_front_x-tank_diam/2.0*cos_pivot_XY])-x_marg
        wx1=max([-r_wall*cos(phi_grid),-(r_major-r_minor*1.2),tank_front_x+tank_diam/2.0*sin_pivot_XY,tank_front_x+tank_diam/2.0*cos_pivot_XY])+x_marg
        wy0=min([grid_cent_y-neutr_diam/2.0*cos_pivot_XY,-(r_minor*2.0),tank_front_y-tank_diam/2.0*cos_pivot_XY,tank_front_y-tank_diam/2.0*sin_pivot_XY])-y_marg
        wy1=max([grid_cent_y+neutr_diam/2.0*cos_pivot_XY,(r_minor*2.0),tank_front_y+tank_diam/2.0*cos_pivot_XY,tank_front_y+tank_diam/2.0*sin_pivot_XY])+y_marg        
                
        plot,[0,0],[1,1],color=0,background=-1,xrange=[wx0,wx1],yrange=[wy0,wy1],/nodata,ystyle=1,xstyle=1
        angl_arr=interpol([-!Pi,!Pi],200)
        oplot,[wx0,wx1],[0,0],color=0,linestyle=2
        ;plot plasma and machine
        oplot,(r_major+r_minor)*cos(angl_arr),(r_major+r_minor)*sin(angl_arr),thick=1,color=120,linestyle=2      
        oplot,(r_major-r_minor)*cos(angl_arr),(r_major-r_minor)*sin(angl_arr),thick=1,color=120,linestyle=2
        oplot,r_major*cos(angl_arr),r_major*sin(angl_arr),thick=2,color=120              
        oplot,(r_major+r_minor*1.4)*cos(angl_arr),(r_major+r_minor*1.2)*sin(angl_arr),thick=3,color=0
        xyouts, 630,380,'Machine torus',color=0,/device,charsize=1.5
        xyouts, 630,360,'Plasma center and plasma enclosure',color=120,/device,charsize=1.5
        ;plot beam port
        xyouts,-r_minor*3.0-r_major,-0.4,beam_port+' port',color=0,charsize=1.5

        ;plot focal point
        F_diam=(wx1-wx0)/500.0
        F_shift=(wx1-wx0)/100.0
        oplot,grid_cent_x+x_grid_focus*cos_pivot_XY*cos_pivot_Z+F_diam*cos(angl_arr),$
        grid_cent_y-x_grid_focus*sin_pivot_XY*cos_pivot_Z+F_diam*sin(angl_arr),thick=2,color=112
        oplot,grid_cent_x+y_grid_focus*cos_pivot_XY*cos_pivot_Z+F_diam*cos(angl_arr),$
        grid_cent_y-y_grid_focus*sin_pivot_XY*cos_pivot_Z+F_diam*sin(angl_arr),thick=2,color=112       

        if x_grid_focus eq y_grid_focus then begin
          xyouts,grid_cent_x+x_grid_focus*cos_pivot_XY*cos_pivot_Z+F_shift,$
          grid_cent_y-x_grid_focus*sin_pivot_XY*cos_pivot_Z,'F', color=112,charsize=2
          xyouts, 400,380,'Grids focal radius (F)',color=112,/device,charsize=1.5
        endif else begin
          xyouts,grid_cent_x+x_grid_focus*cos_pivot_XY*cos_pivot_Z+F_shift,$
          grid_cent_y-x_grid_focus*sin_pivot_XY*cos_pivot_Z,'Fx', color=112,charsize=2
          xyouts, 400,380,'Grids focal radii (Fx, Fy)',color=112,/device,charsize=1.5 
          xyouts,grid_cent_x+y_grid_focus*cos_pivot_XY*cos_pivot_Z+F_shift,$
          grid_cent_y-y_grid_focus*sin_pivot_XY*cos_pivot_Z,'Fy', color=112,charsize=2    
        endelse 
        
        ;plot beam centerline and grids
      
        oplot,[grid_cent_x,wall_cent_x],[grid_cent_y,wall_cent_y],color=0,linestyle=2

       ; oplot,[grid_cent_x-max(x_bml)*sin_pivot_XY,grid_cent_x+max(x_bml)*sin_pivot_XY],$
       ; [grid_cent_y-max(x_bml)*cos_pivot_XY,grid_cent_y+max(x_bml)*cos_pivot_XY],color=112,thick=6
        oplot,grid_cent_x+x_bml*sin_pivot_XY-y_bml*cos_pivot_XY*sin_pivot_Z,grid_cent_y+x_bml*cos_pivot_XY+y_bml*sin_pivot_XY*sin_pivot_Z,color=112,psym=3
        
        xyouts, 60,380,'Accelerating grids',color=112,/device,charsize=1.5
        x_c=neutr_diam/2.0*cos(angl_arr)
        y_c=neutr_diam/2.0*sin(angl_arr)
        neutr_front_x= grid_cent_x+neutr_front_dist*cos_pivot_XY*cos_pivot_Z
        neutr_front_y= grid_cent_y-neutr_front_dist*sin_pivot_XY*cos_pivot_Z
        oplot,neutr_front_x+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,neutr_front_y+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=96 ,thick=2
        oplot,neutr_front_x+neutr_size*cos_pivot_XY*cos_pivot_Z+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,$
        neutr_front_y-neutr_size*sin_pivot_XY*cos_pivot_Z+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=96,thick=2     
        oplot,[neutr_front_x-neutr_diam/2.0*sin_pivot_XY,neutr_front_x-neutr_diam/2.0*sin_pivot_XY+neutr_size*cos_pivot_XY*cos_pivot_Z],$
        [neutr_front_y-neutr_diam/2.0*cos_pivot_XY,neutr_front_y-neutr_diam/2.0*cos_pivot_XY-neutr_size*sin_pivot_XY*cos_pivot_Z],color=96,thick=2            
        oplot,[neutr_front_x+neutr_diam/2.0*sin_pivot_XY,neutr_front_x+neutr_diam/2.0*sin_pivot_XY+neutr_size*cos_pivot_XY*cos_pivot_Z],$
        [neutr_front_y+neutr_diam/2.0*cos_pivot_XY,neutr_front_y+neutr_diam/2.0*cos_pivot_XY-neutr_size*sin_pivot_XY*cos_pivot_Z],color=96,thick=2
   
        xyouts, 60,360,'Neutralizer tube',color=96,/device,charsize=1.5
        ;plot tank
        x_c=tank_diam/2.0*cos(angl_arr)
        y_c=tank_diam/2.0*sin(angl_arr)      
        tank_front_x=grid_cent_x+(tank_front_dist)*cos_pivot_XY*cos_pivot_Z
        tank_front_y=grid_cent_y-(tank_front_dist)*sin_pivot_XY*cos_pivot_Z     
        oplot,tank_front_x+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,tank_front_y+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=0 ,thick=2
        oplot,tank_front_x+tank_size*cos_pivot_XY*cos_pivot_Z+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,$
        tank_front_y-tank_size*sin_pivot_XY*cos_pivot_Z+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=0,thick=2 
        oplot,[tank_front_x-tank_diam/2.0*sin_pivot_XY,tank_front_x-tank_diam/2.0*sin_pivot_XY+tank_size*cos_pivot_XY*cos_pivot_Z],$
        [tank_front_y-tank_diam/2.0*cos_pivot_XY,tank_front_y-tank_diam/2.0*cos_pivot_XY-tank_size*sin_pivot_XY*cos_pivot_Z],color=0,thick=2       
        oplot,[tank_front_x+tank_diam/2.0*sin_pivot_XY,tank_front_x+tank_diam/2.0*sin_pivot_XY+tank_size*cos_pivot_XY*cos_pivot_Z],$
        [tank_front_y+tank_diam/2.0*cos_pivot_XY,tank_front_y+tank_diam/2.0*cos_pivot_XY-tank_size*sin_pivot_XY*cos_pivot_Z],color=0,thick=2
 
        xyouts, 230,380,'Beam tank',color=0,/device,charsize=1.5
       ;plot deflection magnet
        if magnet_size ne 0.0 then begin
          x_c=magnet_diam/2.0*cos(angl_arr)
          y_c=magnet_diam/2.0*sin(angl_arr)    
          magnet_front_x=grid_cent_x+(tank_front_dist+tank_magnet_dist)*cos_pivot_XY*cos_pivot_Z
          magnet_front_y=grid_cent_y-(tank_front_dist+tank_magnet_dist)*sin_pivot_XY*cos_pivot_Z
          oplot,magnet_front_x+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,magnet_front_y+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=64 ,thick=2
          oplot,magnet_front_x+magnet_size*cos_pivot_XY*cos_pivot_Z+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,$
          magnet_front_y-magnet_size*sin_pivot_XY*cos_pivot_Z+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=64,thick=2       
          oplot,[magnet_front_x-magnet_diam/2.0*sin_pivot_XY,magnet_front_x-magnet_diam/2.0*sin_pivot_XY+magnet_size*cos_pivot_XY*cos_pivot_Z],$
          [magnet_front_y-magnet_diam/2.0*cos_pivot_XY,magnet_front_y-magnet_diam/2.0*cos_pivot_XY-magnet_size*sin_pivot_XY*cos_pivot_Z],color=64 ,thick=2      
          oplot,[magnet_front_x+magnet_diam/2.0*sin_pivot_XY,magnet_front_x+magnet_diam/2.0*sin_pivot_XY+magnet_size*cos_pivot_XY*cos_pivot_Z],$
          [magnet_front_y+magnet_diam/2.0*cos_pivot_XY,magnet_front_y+magnet_diam/2.0*cos_pivot_XY-magnet_size*sin_pivot_XY*cos_pivot_Z],color=64,thick=2
          xyouts, 230,360,'Deflection magnet',color=64,/device,charsize=1.5
        endif
        ;plot calorimeter
        if tank_cal_dist ne 0.0 then begin
          x_c=cal_diam/2.0*cos(angl_arr)
          y_c=cal_diam/2.0*sin(angl_arr)    
          cal_front_x=grid_cent_x+(tank_front_dist+tank_size+tank_cal_dist)*cos_pivot_XY*cos_pivot_Z
          cal_front_y=grid_cent_y-(tank_front_dist+tank_size+tank_cal_dist)*sin_pivot_XY*cos_pivot_Z
          oplot,cal_front_x+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,cal_front_y+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=160 ,thick=2
          oplot,cal_front_x+cal_size*cos_pivot_XY*cos_pivot_Z+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,$
          cal_front_y-cal_size*sin_pivot_XY*cos_pivot_Z+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=160,thick=2     
          oplot,[cal_front_x-cal_diam/2.0*sin_pivot_XY,cal_front_x-cal_diam/2.0*sin_pivot_XY+cal_size*cos_pivot_XY*cos_pivot_Z],$
          [cal_front_y-cal_diam/2.0*cos_pivot_XY,cal_front_y-cal_diam/2.0*cos_pivot_XY-cal_size*sin_pivot_XY*cos_pivot_Z],color=160 ,thick=2     
          oplot,[cal_front_x+cal_diam/2.0*sin_pivot_XY,cal_front_x+cal_diam/2.0*sin_pivot_XY+cal_size*cos_pivot_XY*cos_pivot_Z],$
          [cal_front_y+cal_diam/2.0*cos_pivot_XY,cal_front_y+cal_diam/2.0*cos_pivot_XY-cal_size*sin_pivot_XY*cos_pivot_Z],color=160,thick=2
          xyouts, 400,340,'Calorimeter',color=160,/device,charsize=1.5                    
        endif
        ;plot limiters
        for i=0,n_limiters-1 do begin
          z_pos=float(limiters_table(1,i))
          lim_size=float(limiters_table(2,i))
          lim_diam=float(limiters_table(3,i))
          x_size=float(limiters_table(4,i))/2.0
          y_size=float(limiters_table(5,i))/2.0
          r_lim =float(limiters_table(6,i)) 
          if finite(r_lim) then begin
            oplot,r_lim*cos(angl_arr),r_lim*sin(angl_arr),color=48,thick=2
          endif else begin
            lim_front_x=grid_cent_x+(z_pos)*cos_pivot_XY*cos_pivot_Z
            lim_front_y=grid_cent_y-(z_pos)*sin_pivot_XY*cos_pivot_Z
            lim_back_x=lim_front_x+lim_size*cos_pivot_XY*cos_pivot_Z
            lim_back_y=lim_front_y-lim_size*sin_pivot_XY*cos_pivot_Z     
            if finite(lim_diam) then begin
              x_c=lim_diam/2.0*cos(angl_arr)
              y_c=lim_diam/2.0*sin(angl_arr)
              oplot,lim_front_x+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,lim_front_y+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=48 ,thick=2
              oplot,lim_front_x+lim_size*cos_pivot_XY*cos_pivot_Z+x_c*sin_pivot_XY-y_c*cos_pivot_XY*sin_pivot_Z,$
              lim_front_y-lim_size*sin_pivot_XY*cos_pivot_Z+x_c*cos_pivot_XY+y_c*sin_pivot_XY*sin_pivot_Z,color=48,thick=2 
              oplot,[lim_front_x+lim_diam/2.0*sin_pivot_XY,lim_back_x+lim_diam/2.0*sin_pivot_XY],$
              [lim_front_y+lim_diam/2.0*cos_pivot_XY,lim_back_y+lim_diam/2.0*cos_pivot_XY],color=48,thick=2
              oplot,[lim_front_x-lim_diam/2.0*sin_pivot_XY,lim_back_x-lim_diam/2.0*sin_pivot_XY],$
              [lim_front_y-lim_diam/2.0*cos_pivot_XY,lim_back_y-lim_diam/2.0*cos_pivot_XY],color=48,thick=2
            endif else begin 
              oplot,[lim_front_x-x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z,lim_back_x-x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_front_y-x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z,lim_back_y-x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_front_x-x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z,lim_back_x-x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_front_y-x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z,lim_back_y-x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_front_x+x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z,lim_back_x+x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_front_y+x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z,lim_back_y+x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_front_x+x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z,lim_back_x+x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_front_y+x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z,lim_back_y+x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_front_x-x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z,lim_front_x-x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_front_y-x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z,lim_front_y-x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_front_x-x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z,lim_front_x+x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_front_y-x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z,lim_front_y+x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_front_x+x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z,lim_front_x+x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_front_y+x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z,lim_front_y+x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_front_x+x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z,lim_front_x-x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_front_y+x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z,lim_front_y-x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_back_x-x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z,lim_back_x-x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_back_y-x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z,lim_back_y-x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_back_x-x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z,lim_back_x+x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_back_y-x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z,lim_back_y+x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_back_x+x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z,lim_back_x+x_size*sin_pivot_XY-y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_back_y+x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z,lim_back_y+x_size*cos_pivot_XY+y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
              oplot,[lim_back_x+x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z,lim_back_x-x_size*sin_pivot_XY+y_size*cos_pivot_XY*sin_pivot_Z],$
              [lim_back_y+x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z,lim_back_y-x_size*cos_pivot_XY-y_size*sin_pivot_XY*sin_pivot_Z],color=48,thick=2
            endelse
         endelse
       endfor
       xyouts, 400,360,'Beam limiters (beam duct)',color=48,/device,charsize=1.5       
       endif
       if beam_view eq 1 then begin

        tank_front_x=grid_cent_x+(tank_front_dist)*cos_pivot_XZ*cos_pivot_Y
        tank_front_z=grid_cent_z-(tank_front_dist)*sin_pivot_XZ*cos_pivot_Y      
   
        wx0=min([grid_cent_x-neutr_diam/2.0*sin_pivot_XZ,-(r_major+r_minor*1.2),tank_front_x-tank_diam/2.0*sin_pivot_XZ,tank_front_x-tank_diam/2.0*cos_pivot_XZ])-x_marg
        wx1=max([-r_wall*cos(phi_grid),-(r_major-r_minor*1.2),tank_front_x+tank_diam/2.0*sin_pivot_XZ,tank_front_x+tank_diam/2.0*cos_pivot_XZ])+x_marg
        wy0=min([grid_cent_z-neutr_diam/2.0*cos_pivot_XZ,-(r_minor*elong*1.4),tank_front_z-tank_diam/2.0*cos_pivot_XZ,tank_front_z-tank_diam/2.0*sin_pivot_XZ])-y_marg
        wy1=max([grid_cent_z+neutr_diam/2.0*cos_pivot_XZ,(r_minor*elong*1.4),tank_front_z+tank_diam/2.0*cos_pivot_XZ,tank_front_z+tank_diam/2.0*sin_pivot_XZ])+y_marg        
            
        plot,[0,0],[1,1],color=0,background=-1,xrange=[wx0,wx1],yrange=[wy0,wy1],/nodata,ystyle=1,xstyle=1
        angl_arr=interpol([-!Pi,!Pi],200)
        oplot,[wx0,wx1],[0,0],color=0,linestyle=2
        ;plot plasma and machine
        n_z_int=200
        n_r_int=1000
        rgrid1=r_major-r_minor*1.1
        rgrid2=r_major+r_minor*1.1
        zgrid1=-r_minor*elong*1.1+z_major
        zgrid2=r_minor*elong*1.1+z_major    
        rgrid_arr = interpol([rgrid1,rgrid2],n_r_int)
        zgrid_arr = interpol([zgrid1,zgrid2],n_z_int)
        rgrid_arr_1 = make_array(n_r_int,/index)
        zgrid_arr_1 = make_array(n_z_int,/index)       
        rho_grid=fltarr(n_r_int,n_z_int)
        rho_grid(*,*)=1.1
        n_r_minor=5
        r_minor_arr=interpol([0.0,r_minor],n_r_minor)
        n_theta=500
        theta_arr=interpol([-!Pi,!Pi],n_theta)    
        triang=fltarr(n_theta)
        triang(where(theta_arr gt 0))=triang_upper
        triang(where(theta_arr le 0))=triang_lower
        for i=0,n_r_minor-1 do begin 
          r_new=r_major+r_minor_arr(i)*cos(theta_arr+sin(theta_arr)*asin(triang))
          z_new=elong*r_minor_arr(i)*sin(theta_arr)+z_major
          rho_grid(locate(rgrid_arr,r_new),locate(zgrid_arr,z_new))=r_minor_arr(i)/r_minor
          oplot,-r_new,z_new,thick=1,color=0,linestyle=2
          if i eq 0 then oplot,-r_new,z_new,thick=2,color=120,linestyle=1
          if i eq n_r_minor-1 then oplot,-r_new,z_new,thick=2,color=120,linestyle=0      
        endfor
                   
        oplot,[-r_major-r_minor*1.4,-r_major-r_minor*1.4,-r_major+r_minor*1.2,-r_major+r_minor*1.2,-r_major-r_minor*1.4],$
        [-r_minor*elong*1.4,r_minor*elong*1.4,r_minor*elong*1.4,-r_minor*elong*1.4,-r_minor*elong*1.4],thick=3,color=0
         oplot,[-r_major+r_minor*1.2,0.0,0.0,-r_major-r_minor*1.4],$
        [-r_minor*elong*1.4,-r_minor*elong*1.4,r_minor*elong*1.4,r_minor*elong*1.4],thick=2,color=0,linestyle=2
              

        xyouts, 630,380,'Machine torus',color=0,/device,charsize=1.5
        xyouts, 630,360,'Plasma center  and plasma enclosure',color=120,/device,charsize=1.5
        ;plot beam port
        xyouts,-r_minor*3.0-r_major,-0.4,beam_port+' port',color=0,charsize=1.5
 
        F_diam=(wx1-wx0)/500.0
        F_shift=(wx1-wx0)/100.0
        oplot,grid_cent_x+x_grid_focus*cos_pivot_XZ*cos_pivot_Y+F_diam*cos(angl_arr),$
        grid_cent_z-x_grid_focus*sin_pivot_XZ*cos_pivot_Y+F_diam*sin(angl_arr),thick=2,color=112
        oplot,grid_cent_x+y_grid_focus*cos_pivot_XZ*cos_pivot_Y+F_diam*cos(angl_arr),$
        grid_cent_z-y_grid_focus*sin_pivot_XZ*cos_pivot_Y+F_diam*sin(angl_arr),thick=2,color=112       

        if x_grid_focus eq y_grid_focus then begin
          xyouts,grid_cent_x+x_grid_focus*cos_pivot_XZ*cos_pivot_Y+F_shift,$
          grid_cent_z-x_grid_focus*sin_pivot_XZ*cos_pivot_Y,'F', color=112,charsize=2
          xyouts, 400,380,'Grids focal radius (F)',color=112,/device,charsize=1.5
        endif else begin
          xyouts,grid_cent_x+x_grid_focus*cos_pivot_XZ*cos_pivot_Y+F_shift,$
          grid_cent_z-x_grid_focus*sin_pivot_XZ*cos_pivot_Y,'Fx', color=112,charsize=2
          xyouts, 400,380,'Grids focal radii (Fx, Fy)',color=112,/device,charsize=1.5 
          xyouts,grid_cent_x+y_grid_focus*cos_pivot_XZ*cos_pivot_Y+F_shift,$
          grid_cent_z-y_grid_focus*sin_pivot_XZ*cos_pivot_Y,'Fy', color=112,charsize=2    
        endelse 
      
        ;plot beam centerline and grids
     
        oplot,[grid_cent_x,wall_cent_x],[grid_cent_z,wall_cent_z],color=0,linestyle=2

       ; oplot,[grid_cent_x-max(x_bml)*sin_pivot_XZ,grid_cent_x+max(x_bml)*sin_pivot_XZ],$
       ; [grid_cent_z-max(x_bml)*cos_pivot_XZ,grid_cent_z+max(x_bml)*cos_pivot_XZ],color=112,thick=6
        oplot,grid_cent_x+x_bml*sin_pivot_XZ-y_bml*cos_pivot_XZ*sin_pivot_Y,grid_cent_z+x_bml*cos_pivot_XZ+y_bml*sin_pivot_XZ*sin_pivot_Y,color=112,psym=3
        
        xyouts, 60,380,'Accelerating grids',color=112,/device,charsize=1.5
        x_c=neutr_diam/2.0*cos(angl_arr)
        y_c=neutr_diam/2.0*sin(angl_arr)
        neutr_front_x= grid_cent_x+neutr_front_dist*cos_pivot_XZ*cos_pivot_Y
        neutr_front_z= grid_cent_z-neutr_front_dist*sin_pivot_XZ*cos_pivot_Y
        oplot,neutr_front_x+x_c*sin_pivot_XZ-y_c*cos_pivot_XZ*sin_pivot_Y,neutr_front_z+x_c*cos_pivot_XZ+y_c*sin_pivot_XZ*sin_pivot_Y,color=96 ,thick=2
        oplot,neutr_front_x+neutr_size*cos_pivot_XZ*cos_pivot_Y+x_c*sin_pivot_XZ-y_c*cos_pivot_XZ*sin_pivot_Y,$
        neutr_front_z-neutr_size*sin_pivot_XZ*cos_pivot_Y+x_c*cos_pivot_XZ+y_c*sin_pivot_XZ*sin_pivot_Y,color=96,thick=2     
        oplot,[neutr_front_x-neutr_diam/2.0*sin_pivot_XZ,neutr_front_x-neutr_diam/2.0*sin_pivot_XZ+neutr_size*cos_pivot_XZ*cos_pivot_Y],$
        [neutr_front_z-neutr_diam/2.0*cos_pivot_XZ,neutr_front_z-neutr_diam/2.0*cos_pivot_XZ-neutr_size*sin_pivot_XZ*cos_pivot_Y],color=96,thick=2            
        oplot,[neutr_front_x+neutr_diam/2.0*sin_pivot_XZ,neutr_front_x+neutr_diam/2.0*sin_pivot_XZ+neutr_size*cos_pivot_XZ*cos_pivot_Y],$
        [neutr_front_z+neutr_diam/2.0*cos_pivot_XZ,neutr_front_z+neutr_diam/2.0*cos_pivot_XZ-neutr_size*sin_pivot_XZ*cos_pivot_Y],color=96,thick=2
       
        xyouts, 60,360,'Neutralizer tube',color=96,/device,charsize=1.5
        ;plot tank
        x_c=tank_diam/2.0*cos(angl_arr)
        y_c=tank_diam/2.0*sin(angl_arr)     
        tank_front_x=grid_cent_x+(tank_front_dist)*cos_pivot_XZ*cos_pivot_Y
        tank_front_z=grid_cent_z-(tank_front_dist)*sin_pivot_XZ*cos_pivot_Y     
        oplot,tank_front_x+x_c*sin_pivot_XZ-y_c*cos_pivot_XZ*sin_pivot_Y,tank_front_z+x_c*cos_pivot_XZ+y_c*sin_pivot_XZ*sin_pivot_Y,color=0 ,thick=2
        oplot,tank_front_x+tank_size*cos_pivot_XZ*cos_pivot_Y+x_c*sin_pivot_XZ-y_c*cos_pivot_XZ*sin_pivot_Y,$
        tank_front_z-tank_size*sin_pivot_XZ*cos_pivot_Y+x_c*cos_pivot_XZ+y_c*sin_pivot_XZ*sin_pivot_Y,color=0,thick=2 
        oplot,[tank_front_x-tank_diam/2.0*sin_pivot_XZ,tank_front_x-tank_diam/2.0*sin_pivot_XZ+tank_size*cos_pivot_XZ*cos_pivot_Y],$
        [tank_front_z-tank_diam/2.0*cos_pivot_XZ,tank_front_z-tank_diam/2.0*cos_pivot_XZ-tank_size*sin_pivot_XZ*cos_pivot_Y],color=0,thick=2       
        oplot,[tank_front_x+tank_diam/2.0*sin_pivot_XZ,tank_front_x+tank_diam/2.0*sin_pivot_XZ+tank_size*cos_pivot_XZ*cos_pivot_Y],$
        [tank_front_z+tank_diam/2.0*cos_pivot_XZ,tank_front_z+tank_diam/2.0*cos_pivot_XZ-tank_size*sin_pivot_XZ*cos_pivot_Y],color=0,thick=2
 
        xyouts, 230,380,'Beam tank',color=0,/device,charsize=1.5
       ;plot deflection magnet
        if magnet_size ne 0.0 then begin
          x_c=magnet_diam/2.0*cos(angl_arr)
          y_c=magnet_diam/2.0*sin(angl_arr)    
          magnet_front_x=grid_cent_x+(tank_front_dist+tank_magnet_dist)*cos_pivot_XZ*cos_pivot_Y
          magnet_front_z=grid_cent_z-(tank_front_dist+tank_magnet_dist)*sin_pivot_XZ*cos_pivot_Y
          oplot,magnet_front_x+x_c*sin_pivot_XZ-y_c*cos_pivot_XZ*sin_pivot_Y,magnet_front_z+x_c*cos_pivot_XZ+y_c*sin_pivot_XZ*sin_pivot_Y,color=64 ,thick=2
          oplot,magnet_front_x+magnet_size*cos_pivot_XZ*cos_pivot_Y+x_c*sin_pivot_XZ-y_c*cos_pivot_XZ*sin_pivot_Y,$
          magnet_front_z-magnet_size*sin_pivot_XZ*cos_pivot_Y+x_c*cos_pivot_XZ+y_c*sin_pivot_XZ*sin_pivot_Y,color=64,thick=2       
          oplot,[magnet_front_x-magnet_diam/2.0*sin_pivot_XZ,magnet_front_x-magnet_diam/2.0*sin_pivot_XZ+magnet_size*cos_pivot_XZ*cos_pivot_Y],$
          [magnet_front_z-magnet_diam/2.0*cos_pivot_XZ,magnet_front_z-magnet_diam/2.0*cos_pivot_XZ-magnet_size*sin_pivot_XZ*cos_pivot_Y],color=64 ,thick=2      
          oplot,[magnet_front_x+magnet_diam/2.0*sin_pivot_XZ,magnet_front_x+magnet_diam/2.0*sin_pivot_XZ+magnet_size*cos_pivot_XZ*cos_pivot_Y],$
          [magnet_front_z+magnet_diam/2.0*cos_pivot_XZ,magnet_front_z+magnet_diam/2.0*cos_pivot_XZ-magnet_size*sin_pivot_XZ*cos_pivot_Y],color=64,thick=2
          xyouts, 230,360,'Deflection magnet',color=64,/device,charsize=1.5
        endif
        ;plot calorimeter
        if tank_cal_dist ne 0.0 then begin
          x_c=cal_diam/2.0*cos(angl_arr)
          y_c=cal_diam/2.0*sin(angl_arr)    
          cal_front_x=grid_cent_x+(tank_front_dist+tank_size+tank_cal_dist)*cos_pivot_XZ*cos_pivot_Y
          cal_front_z=grid_cent_z-(tank_front_dist+tank_size+tank_cal_dist)*sin_pivot_XZ*cos_pivot_Y
          oplot,cal_front_x+x_c*sin_pivot_XZ-y_c*cos_pivot_XZ*sin_pivot_Y,cal_front_z+x_c*cos_pivot_XZ+y_c*sin_pivot_XZ*sin_pivot_Y,color=160 ,thick=2
          oplot,cal_front_x+cal_size*cos_pivot_XZ*cos_pivot_Y+x_c*sin_pivot_XZ-y_c*cos_pivot_XZ*sin_pivot_Y,$
          cal_front_z-cal_size*sin_pivot_XZ*cos_pivot_Y+x_c*cos_pivot_XZ+y_c*sin_pivot_XZ*sin_pivot_Y,color=160,thick=2     
          oplot,[cal_front_x-cal_diam/2.0*sin_pivot_XZ,cal_front_x-cal_diam/2.0*sin_pivot_XZ+cal_size*cos_pivot_XZ*cos_pivot_Y],$
          [cal_front_z-cal_diam/2.0*cos_pivot_XZ,cal_front_z-cal_diam/2.0*cos_pivot_XZ-cal_size*sin_pivot_XZ*cos_pivot_Y],color=160 ,thick=2     
          oplot,[cal_front_x+cal_diam/2.0*sin_pivot_XZ,cal_front_x+cal_diam/2.0*sin_pivot_XZ+cal_size*cos_pivot_XZ*cos_pivot_Y],$
          [cal_front_z+cal_diam/2.0*cos_pivot_XZ,cal_front_z+cal_diam/2.0*cos_pivot_XZ-cal_size*sin_pivot_XZ*cos_pivot_Y],color=160,thick=2
          xyouts, 400,340,'Calorimeter',color=160,/device,charsize=1.5                    
        endif
        ;plot limiters
        for i=0,n_limiters-1 do begin
          z_pos=float(limiters_table(1,i))
          lim_size=float(limiters_table(2,i))
          lim_diam=float(limiters_table(3,i))
          x_size=float(limiters_table(4,i))/2.0
          y_size=float(limiters_table(5,i))/2.0
          r_lim =float(limiters_table(6,i)) 
          if finite(r_lim) then begin
            oplot,[-r_lim,-r_lim],[-r_minor*elong*1.4,r_minor*elong*1.4],color=48,thick=2
          endif else begin
            lim_front_x=grid_cent_x+(z_pos)*cos_pivot_XZ*cos_pivot_Y
            lim_front_z=grid_cent_z-(z_pos)*sin_pivot_XZ*cos_pivot_Y
            lim_back_x=lim_front_x+lim_size*cos_pivot_XZ*cos_pivot_Y
            lim_back_z=lim_front_z-lim_size*sin_pivot_XZ*cos_pivot_Y     
            if finite(lim_diam) then begin
              x_c=lim_diam/2.0*cos(angl_arr)
              y_c=lim_diam/2.0*sin(angl_arr)
              oplot,lim_front_x+x_c*sin_pivot_XZ-y_c*cos_pivot_XZ*sin_pivot_Y,lim_front_z+x_c*cos_pivot_XZ+y_c*sin_pivot_XZ*sin_pivot_Y,color=48 ,thick=2
              oplot,lim_front_x+lim_size*cos_pivot_XZ*cos_pivot_Y+x_c*sin_pivot_XZ-y_c*cos_pivot_XZ*sin_pivot_Y,$
              lim_front_z-lim_size*sin_pivot_XZ*cos_pivot_Y+x_c*cos_pivot_XZ+y_c*sin_pivot_XZ*sin_pivot_Y,color=48,thick=2 
              oplot,[lim_front_x+lim_diam/2.0*sin_pivot_XZ,lim_back_x+lim_diam/2.0*sin_pivot_XZ],$
              [lim_front_z+lim_diam/2.0*cos_pivot_XZ,lim_back_z+lim_diam/2.0*cos_pivot_XZ],color=48,thick=2
              oplot,[lim_front_x-lim_diam/2.0*sin_pivot_XZ,lim_back_x-lim_diam/2.0*sin_pivot_XZ],$
              [lim_front_z-lim_diam/2.0*cos_pivot_XZ,lim_back_z-lim_diam/2.0*cos_pivot_XZ],color=48,thick=2
            endif else begin 
              oplot,[lim_front_x-y_size*sin_pivot_XZ-x_size*cos_pivot_XZ*sin_pivot_Y,lim_back_x-y_size*sin_pivot_XZ-x_size*cos_pivot_XZ*sin_pivot_Y],$
              [lim_front_z-y_size*cos_pivot_XZ+x_size*sin_pivot_XZ*sin_pivot_Y,lim_back_z-y_size*cos_pivot_XZ+x_size*sin_pivot_XZ*sin_pivot_Y],color=48,thick=2
              oplot,[lim_front_x-y_size*sin_pivot_XZ+x_size*cos_pivot_XZ*sin_pivot_Y,lim_back_x-y_size*sin_pivot_XZ+x_size*cos_pivot_XZ*sin_pivot_Y],$
              [lim_front_z-y_size*cos_pivot_XZ-x_size*sin_pivot_XZ*sin_pivot_Y,lim_back_z-y_size*cos_pivot_XZ-x_size*sin_pivot_XZ*sin_pivot_Y],color=48,thick=2
              oplot,[lim_front_x+y_size*sin_pivot_XZ-x_size*cos_pivot_XZ*sin_pivot_Y,lim_back_x+y_size*sin_pivot_XZ-x_size*cos_pivot_XZ*sin_pivot_Y],$
              [lim_front_z+y_size*cos_pivot_XZ+x_size*sin_pivot_XZ*sin_pivot_Y,lim_back_z+y_size*cos_pivot_XZ+x_size*sin_pivot_XZ*sin_pivot_Y],color=48,thick=2
              oplot,[lim_front_x+y_size*sin_pivot_XZ+x_size*cos_pivot_XZ*sin_pivot_Y,lim_back_x+y_size*sin_pivot_XZ+x_size*cos_pivot_XZ*sin_pivot_Y],$
              [lim_front_z+y_size*cos_pivot_XZ-x_size*sin_pivot_XZ*sin_pivot_Y,lim_back_z+y_size*cos_pivot_XZ-x_size*sin_pivot_XZ*sin_pivot_Y],color=48,thick=2
              oplot,[lim_front_x-y_size*sin_pivot_XZ-x_size*cos_pivot_XZ*sin_pivot_Y,lim_front_x-y_size*sin_pivot_XZ+x_size*cos_pivot_XZ*sin_pivot_Y],$
              [lim_front_z-y_size*cos_pivot_XZ+x_size*sin_pivot_XZ*sin_pivot_Y,lim_front_z-y_size*cos_pivot_XZ-x_size*sin_pivot_XZ*sin_pivot_Y],color=48,thick=2
              oplot,[lim_front_x-y_size*sin_pivot_XZ-x_size*cos_pivot_XZ*sin_pivot_Y,lim_front_x+y_size*sin_pivot_XZ-x_size*cos_pivot_XZ*sin_pivot_Y],$
              [lim_front_z-y_size*cos_pivot_XZ+x_size*sin_pivot_XZ*sin_pivot_Y,lim_front_z+y_size*cos_pivot_XZ+x_size*sin_pivot_XZ*sin_pivot_Y],color=48,thick=2
              oplot,[lim_front_x+y_size*sin_pivot_XZ+x_size*cos_pivot_XZ*sin_pivot_Y,lim_front_x+y_size*sin_pivot_XZ-x_size*cos_pivot_XZ*sin_pivot_Y],$
              [lim_front_z+y_size*cos_pivot_XZ-x_size*sin_pivot_XZ*sin_pivot_Y,lim_front_z+y_size*cos_pivot_XZ+x_size*sin_pivot_XZ*sin_pivot_Y],color=48,thick=2
              oplot,[lim_front_x+y_size*sin_pivot_XZ+x_size*cos_pivot_XZ*sin_pivot_Y,lim_front_x-y_size*sin_pivot_XZ+x_size*cos_pivot_XZ*sin_pivot_Y],$
              [lim_front_z+y_size*cos_pivot_XZ-x_size*sin_pivot_XZ*sin_pivot_Y,lim_front_z-y_size*cos_pivot_XZ-x_size*sin_pivot_XZ*sin_pivot_Y],color=48,thick=2
              oplot,[lim_back_x-y_size*sin_pivot_XZ-x_size*cos_pivot_XZ*sin_pivot_Y,lim_back_x-y_size*sin_pivot_XZ+x_size*cos_pivot_XZ*sin_pivot_Y],$
              [lim_back_z-y_size*cos_pivot_XZ+x_size*sin_pivot_XZ*sin_pivot_Y,lim_back_z-y_size*cos_pivot_XZ-x_size*sin_pivot_XZ*sin_pivot_Y],color=48,thick=2
              oplot,[lim_back_x-y_size*sin_pivot_XZ-x_size*cos_pivot_XZ*sin_pivot_Y,lim_back_x+y_size*sin_pivot_XZ-x_size*cos_pivot_XZ*sin_pivot_Y],$
              [lim_back_z-y_size*cos_pivot_XZ+x_size*sin_pivot_XZ*sin_pivot_Y,lim_back_z+y_size*cos_pivot_XZ+x_size*sin_pivot_XZ*sin_pivot_Y],color=48,thick=2
              oplot,[lim_back_x+y_size*sin_pivot_XZ+x_size*cos_pivot_XZ*sin_pivot_Y,lim_back_x+y_size*sin_pivot_XZ-x_size*cos_pivot_XZ*sin_pivot_Y],$
              [lim_back_z+y_size*cos_pivot_XZ-x_size*sin_pivot_XZ*sin_pivot_Y,lim_back_z+y_size*cos_pivot_XZ+x_size*sin_pivot_XZ*sin_pivot_Y],color=48,thick=2
              oplot,[lim_back_x+y_size*sin_pivot_XZ+x_size*cos_pivot_XZ*sin_pivot_Y,lim_back_x-y_size*sin_pivot_XZ+x_size*cos_pivot_XZ*sin_pivot_Y],$
              [lim_back_z+y_size*cos_pivot_XZ-x_size*sin_pivot_XZ*sin_pivot_Y,lim_back_z-y_size*cos_pivot_XZ-x_size*sin_pivot_XZ*sin_pivot_Y],color=48,thick=2
            endelse
         endelse
       endfor
       xyouts, 400,360,'Beam limiters (beam duct)',color=48,/device,charsize=1.5  
       endif
     endif   
    end
    else:
  endcase
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which performs on the event from "Save Parameters to file" window
;-------------------------------------------------------------------------------------------------------------------------
Pro Save_Param_Widget_event, ev
;The following common block contains some of the settings of "saving
;parameters to the file"
common save_param, save_param_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during in the Save Parameters to File window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
     st_err=0
     return
   endif
 endif
;-----------------------------------------------------

; Global event cases:
;---------------------------------------------------------------------------------------------------------------------------------------
case ev.id of
    ;-----------------Save_Param Button
   Widget_Info(ev.id, FIND_BY_UNAME='Save_Param_Close_Button'): begin
    Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Save_Param_Widget'),/DESTROY
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Save_Param_Save_Button'): begin
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Filename_Text'),Get_value=save_param_file
      save_input_to_file
      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Parameters were saved to the file']], Set_text_top_line=n_elements(status_tx)-4      
   end
  else:
   endcase
end
;-------------------------------------------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------------------------------------------
;Procedure which performs on the event from "Export graph to file" window
;-------------------------------------------------------------------------------------------------------------------------
Pro Export_Widget_event, ev
;the following commonblock contains the id of the main widget
common main_widget,widget_id, driver_id
;The following common block contains the parameter which data is
;curently plotted
common draw_request,draw_req
;The following common block contains some of the settings of "export
;graph to the file"
common export_file, export_file,export_sel,export_flag
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during in the Export Graph to  File window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
     st_err=0
     return
   endif
 endif
;-----------------------------------------------------

; Global event cases:
;---------------------------------------------------------------------------------------------------------------------------------------
case ev.id of
    ;-----------------Export Button
   Widget_Info(ev.id, FIND_BY_UNAME='Export_Close_Button'): begin
    Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Export_Filename_Text'),Get_value=export_file
    Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Export_Widget'),/DESTROY
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Export_Save_Button'): begin
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Export_Filename_Text'),Get_value=export_file
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Export_Select'),Get_value=export_sel
      export_flag=1
      if draw_req eq 0 then plot_input,widget_id
      if draw_req eq 1 then plot_input_arr,widget_id    
      if draw_req eq 2 then plot_output,widget_id
      export_flag=0

      if st_err then begin
       st_err=0
       return
      endif
      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Graph was exported to the file']], Set_text_top_line=n_elements(status_tx)-4      
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Export_Select'): begin
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Export_Filename_Text'),Get_value=export_file
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Export_Select'),Get_value=export_sel
      if export_sel eq 0 then export_ext='.png' else export_ext='.adat'
      export_file=(strsplit(export_file,'.',/extract))(0)+export_ext
      WIDGET_CONTROL,Widget_Info(ev.top, FIND_BY_UNAME='Export_Filename_Text') , SET_VALUE=export_file 
   end   
  else:
   endcase
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which performs on the event from "Save Settings to file" window
;-------------------------------------------------------------------------------------------------------------------------
Pro Save_Set_Widget_event, ev
;The following common block contains some of the settings of "saving
;parameters to the file"
common settings_file, save_set_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during in the Save Parameters to File window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
     st_err=0
     return
   endif
 endif
;-----------------------------------------------------

; Global event cases:
;---------------------------------------------------------------------------------------------------------------------------------------
case ev.id of
    ;-----------------Save_Set Button
   Widget_Info(ev.id, FIND_BY_UNAME='Save_Set_Close_Button'): begin
    Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Save_Set_Widget'),/DESTROY
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Save_Set_Save_Button'): begin
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Save_Set_Filename_Text'),Get_value=save_set_file
      save_set_to_file
      if st_err then return
      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Settings were saved to the file']], Set_text_top_line=n_elements(status_tx)-4      
   end
  else:
   endcase
end
;-------------------------------------------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------------------------------------------
;Procedure which performs on the event from "Load Settings from file" window
;-------------------------------------------------------------------------------------------------------------------------
Pro Load_Set_Widget_event, ev
;The following common block contains some of the settings of "saving
;parameters to the file"
common settings_file, save_set_file
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during in the Save Parameters to File window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
     st_err=0
     return
   endif
 endif
;-----------------------------------------------------

; Global event cases:
;---------------------------------------------------------------------------------------------------------------------------------------
case ev.id of
    ;-----------------Load_Set Button
   Widget_Info(ev.id, FIND_BY_UNAME='Load_Set_Close_Button'): begin
    Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Load_Set_Widget'),/DESTROY
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Load_Set_Load_Button'): begin
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Load_Set_Filename_Text'),Get_value=save_set_file
      load_set_from_file
      if st_err then return
      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Settings were loaded from the file']], Set_text_top_line=n_elements(status_tx)-4      
   end
  else:
   endcase
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which performs on the event from "Beam Parameters" window
;-------------------------------------------------------------------------------------------------------------------------
Pro Beam_Param_Widget_event, ev
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution) 
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during in the Beam Parameters window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
     st_err=0
     return
   endif
 endif
;-----------------------------------------------------

; Global event cases:
;---------------------------------------------------------------------------------------------------------------------------------------
case ev.id of
    ;-----------------Beam_Param Button
   Widget_Info(ev.id, FIND_BY_UNAME='Beam_Param_Close_Button'): begin
    Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Param_Widget'),/DESTROY
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Beam_Param_Save_Button'): begin
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Atom_Text'),Get_value=beam_atom_txt
      if beam_atom_txt(0) eq "H" or beam_atom_txt(0) eq "D" or beam_atom_txt(0) eq "T" then begin
        beam_atom = beam_atom_txt(0)
      endif else begin
        Widget_control, status_wid, Get_Value=status_tx
        Widget_Control, status_wid,$
        Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Beam atom should be either H, D or T']], Set_text_top_line=n_elements(status_tx)-4
        return
      endelse
      beam_atom=beam_atom_txt(0)
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Full_Energy_Text'),Get_value=full_energy_txt
      e_full=float(full_energy_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Energy_Frac_Text'),Get_value=energy_frac_txt
      e_frac=1.0/float(strmid(strsplit(strmid(energy_frac_txt,1,strlen(energy_frac_txt)-2),', ',/extract),2))     
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='I_Beam_Text'),Get_value=I_beam_txt
      I_beam=float(I_beam_txt(0)) 
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='I_Frac_Text'),Get_value=I_frac_txt
      I_frac=float(strsplit(strmid(I_frac_txt,1,strlen(I_frac_txt)-2),', ',/extract))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='I_Opt_Text'),Get_value=I_opt_txt
      I_opt=float(I_opt_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='I_Dens_Par_Text'),Get_value=I_dens_par_txt
      I_dens_par=float(I_dens_par_txt(0))  
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='X_Div_Angle_Text'),Get_value=x_div_bml_opt_txt
      x_div_bml_opt=float(x_div_bml_opt_txt(0))  
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Y_Div_Angle_Text'),Get_value=y_div_bml_opt_txt
      y_div_bml_opt=float(y_div_bml_opt_txt(0))  
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Div_Dist_Par_Text'),Get_value=div_dist_par_txt
      div_dist_par=float(div_dist_par_txt(0))  
      neutralization;procedure which is needed for beam parameters
      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Beam parameters were saved']], Set_text_top_line=n_elements(status_tx)-4    

   end
  else:
   endcase
end
;-------------------------------------------------------------------------------------------------------------------------


;-------------------------------------------------------------------------------------------------------------------------
;Procedure which performs on the event from "Beam Geometry" window
;-------------------------------------------------------------------------------------------------------------------------
Pro Plasma_Geometry_Widget_event, ev
;The following common block contains the parameters which describe the geometry
;and position of the machine plasma
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during in the Plasma Geometry window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
     st_err=0
     return
   endif
 endif
;-----------------------------------------------------

; Global event cases:
;---------------------------------------------------------------------------------------------------------------------------------------
case ev.id of
    ;-----------------Plasma_Geometry Button
   Widget_Info(ev.id, FIND_BY_UNAME='Plasma_Geometry_Close_Button'): begin
    Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Geometry_Widget'),/DESTROY
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Plasma_Geometry_Save_Button'): begin
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='R_Major_Text'),Get_value=R_major_txt
      r_major=float(r_major_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_Major_Text'),Get_value=z_major_txt
      z_major=float(z_major_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='R_Minor_Text'),Get_value=R_minor_txt
      r_minor=float(r_minor_txt(0))
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Elong_Text'),Get_value=elong_txt
      elong=float(elong_txt(0))      
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Triang_U_Text'),Get_value=triang_u_txt
      triang_upper=float(triang_u_txt(0)) 
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Triang_L_Text'),Get_value=triang_l_txt
      triang_lower=float(triang_l_txt(0))
      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plasma Geometry parameters were saved']], Set_text_top_line=n_elements(status_tx)-4   
   end
  else:
   endcase
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which performs on the event from "Beam Limiters" window
;-------------------------------------------------------------------------------------------------------------------------
Pro Beam_Limiters_Widget_event, ev
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block contains the parameters which describe the
;positions and sizes of the beam limiters.
common beam_limiters, n_limiters, limiters_table,limiters_arr
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during in the Beam Limiters window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
     st_err=0
     return
   endif
 endif
;-----------------------------------------------------

; Global event cases:
;---------------------------------------------------------------------------------------------------------------------------------------
case ev.id of
    ;-----------------Beam_Limiters Button
   Widget_Info(ev.id, FIND_BY_UNAME='Beam_Limiters_Close_Button'): begin
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Widget'),/DESTROY
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Beam_Limiters_Save_Button'): begin
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='N_Limiters_Text'),Get_value=N_limiters_txt
     n_limiters=fix(n_limiters_txt(0))
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Table'),Get_value=limiters_table_new
     if n_elements(limiters_table_new) le 1 then begin
       limiters_table=limiters_table_new  
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : No beam limiters are included. Saved.']], Set_text_top_line=n_elements(status_tx)-4
       return       
     endif
     if finite(total((float(limiters_table_new(4,*))+float(limiters_table_new(5,*)))*float(limiters_table_new(3,*)))) eq 0 and $
     finite(total((float(limiters_table_new(6,*)))*float(limiters_table_new(3,*)))) eq 0 and $
     finite(total((float(limiters_table_new(4,*))+float(limiters_table_new(5,*)))*float(limiters_table_new(6,*)))) eq 0  then begin
       limiters_table=limiters_table_new       
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Beam Limiters parameters were saved']], Set_text_top_line=n_elements(status_tx)-4   
     endif else begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Please correct the table entries, Diameter and (X size, Ysize) can not be entered simultaneously']], Set_text_top_line=n_elements(status_tx)-4   
     endelse
   end
   Widget_Info(ev.id, FIND_BY_UNAME='N_Limiters_Button'): begin
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='N_Limiters_Text'),Get_value=N_limiters_txt
     n_limiters=fix(n_limiters_txt(0))
      
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Widget'),ysize=289+19*n_limiters
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Base'),ysize=287+19*n_limiters
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Save_Button'),yoffset=256+19*n_limiters
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Close_Button'),yoffset=256+19*n_limiters
     if n_limiters gt 0 then begin
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Table'),Get_value=limiters_table
       row_label=strtrim(string(make_array(n_limiters,/index)+1,format='(I2)'),2)



       if n_elements(limiters_table)/6 ge n_limiters then begin
         limiters_table=limiters_table(*,0:n_limiters-1)
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Table'),Set_value=limiters_table
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Table'),Row_labels=[row_label]
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Table'),Table_ysize=n_limiters
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Table'),scr_ysize=37+19*n_limiters
       endif else begin      
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Table'),scr_ysize=37+19*n_limiters
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Table'),Table_ysize=n_limiters
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Table'),Row_labels=[row_label]
         for i=0, n_limiters-n_elements(limiters_table)/6-1 do begin
           if n_limiters gt 1 then limiters_table=[[limiters_table],['name','NAN','NAN','NAN','NAN','NAN','NAN']] else limiters_table=['name','NAN','NAN','NAN','NAN','NAN','NAN']
         endfor 
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Table'),Set_value=limiters_table
       endelse
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Table'),Alignment=1
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Table'),Sensitive=1
     endif else begin
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Table'),scr_ysize=37+19*n_limiters
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Table'),Sensitive=0
     limiters_table=''
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Table'),Set_value=[limiters_table]
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Table'),Row_labels=''
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Limiters_Table'),Table_ysize=n_limiters
   endelse 
   end
  else:
   endcase
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which performs on the event from "Plasma Parameters" window
;-------------------------------------------------------------------------------------------------------------------------
Pro Plasma_Param_Widget_event, ev
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block contains the parameters which describe
;some relative  global parameters of the plasma 
common plasma_param, main_ion,n_impur,impur_table
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during in the Beam Limiters window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
     st_err=0
     return
   endif
 endif
;-----------------------------------------------------

; Global event cases:
;---------------------------------------------------------------------------------------------------------------------------------------
case ev.id of
    ;-----------------Plasma Parameters Button
   Widget_Info(ev.id, FIND_BY_UNAME='Plasma_Param_Close_Button'): begin
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Param_Widget'),/DESTROY
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Plasma_Param_Save_Button'): begin
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Main_Ion_Text'),Get_value=main_ion_txt
     if main_ion_txt(0) eq "D" or main_ion_txt(0) eq "H" or main_ion_txt(0) eq "He" then begin
       main_ion = main_ion_txt(0)
     endif else begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Main ion should be either H, D or He']], Set_text_top_line=n_elements(status_tx)-4
       return
     endelse            
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='N_Impur_Text'),Get_value=N_impur_txt
     n_impur=fix(n_impur_txt(0))
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Impur_Table'),Get_value=impur_table_new
     if n_elements(unique(impur_table_new(*,0))) eq n_impur and n_elements(unique(impur_table_new(*,1))) eq n_impur and min(impur_table_new(*,1)) gt 0.0$
     and  min(impur_table_new(*,2)) gt 0.0 and max(impur_table_new(*,2)) le 1.0 and abs(total(float(impur_table_new(*,2)))-1.0) lt 1e-5 then begin
       impur_table=impur_table_new
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plasma impurities parameters were saved']], Set_text_top_line=n_elements(status_tx)-4   
     endif else begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Please correct the table. Impurity symbols and ion charges should be unique. Sum of all fractions should be equal to 1.0']], Set_text_top_line=n_elements(status_tx)-4 
     endelse
   end
   Widget_Info(ev.id, FIND_BY_UNAME='N_Impur_Button'): begin
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='N_Impur_Text'),Get_value=n_impur_txt
     n_impur=fix(n_impur_txt(0))
     if n_impur le 0 then begin
       n_impur=1
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='N_Impur_Text'),Set_value=strtrim(string(n_impur),2)
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Number of plasma impurities should be greater than 0']], Set_text_top_line=n_elements(status_tx)-4   
     endif
     if n_impur gt 7 then begin
       n_impur=7
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='N_Impur_Text'),Set_value=strtrim(string(n_impur),2)
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Currently maximum 7 impurities are supported']], Set_text_top_line=n_elements(status_tx)-4   
     endif
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Impur_Table'),Get_value=impur_table
     column_label=strtrim(string(make_array(n_impur,/index)+1,format='(I2)'),2)

     if n_elements(impur_table)/3 ge n_impur then begin
       impur_table=impur_table(0:n_impur-1,*)
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Impur_Table'),Set_value=impur_table
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Impur_Table'),column_labels=[column_label]
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Impur_Table'),column_widths=50  
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Impur_Table'),Table_xsize=n_impur
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Impur_Table'),scr_xsize=75+50*n_impur
     endif else begin      
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Impur_Table'),scr_xsize=75+50*n_impur+20
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Impur_Table'),Table_xsize=n_impur
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Impur_Table'),column_widths=50 
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Impur_Table'),scr_xsize=75+50*n_impur
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Impur_Table'),Column_labels=[column_label]
       for i=0, n_impur-n_elements(impur_table)/3-1 do begin
         impur_table=[impur_table,[['B'],['5'],['1.000']]]
       endfor 
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Impur_Table'),Set_value=impur_table
     endelse
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Impur_Table'),Alignment=1
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plasma_Impur_Table'),Sensitive=1
   end
  else:
   endcase
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which performs on the event from "Plasma Parameters" window
;-------------------------------------------------------------------------------------------------------------------------
Pro Driver_Widget_event, ev
;the following commonblock contains the id of the main widget
common main_widget,widget_id, driver_id
;The following common block which contains the settings for the
;ALCBEAM driver
common driver_settings, driver_shots,driver_set_file, driver_time
;the following commonblock contains the id of the main widget
common main_widget,widget_id, driver_id
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
driver_wid=widget_info(driver_id,FIND_BY_UNAME='Driver_Status_Text')
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, driver_wid, Get_Value=status_tx
     Widget_Control, driver_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     Widget_control, driver_wid, Get_Value=status_tx
     Widget_Control, driver_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during in the procedures in driver_widget window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
     st_err=0
     return
   endif
 endif
;-----------------------------------------------------

; Global event cases:
;---------------------------------------------------------------------------------------------------------------------------------------
case ev.id of
    ;-----------------Run Driver Buttons
   Widget_Info(ev.id, FIND_BY_UNAME='Driver_Quit_Button'): begin
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Driver_Widget'),/DESTROY
     Widget_Control,Widget_Info(widget_id, FIND_BY_UNAME='Show_Driver_Button'),timer=0.1
   end
   Widget_Info(ev.id, FIND_BY_UNAME='Run_Driver_Button'): begin
    Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Driver_Shots_Text'),Get_value=driver_shots
    Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Driver_Filename_Text'),Get_value=driver_set_file
    Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Driver_Time_Text'),Get_value=driver_time
    st_err=0
    run_driver,ev.top
    if st_err then begin
      Widget_Control, Widget_Info(driver_id, FIND_BY_UNAME='Run_Driver_Button'), Set_Value='Run Driver'
      Widget_control, driver_wid, Get_Value=status_tx
      Widget_Control, driver_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error occured during run_driver procedure.']], Set_text_top_line=n_elements(status_tx)-4
      st_err=0
    endif
   end
 
  else:
   endcase
end
;-------------------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------------------
;Procedure which performs on the event from Main Window
;-------------------------------------------------------------------------------------------------------------------------
Pro Main_Widget_event, ev
;The following common block contains the hostname
common hostname, hostname
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir, adas_dir
;The following common block contains the parameter which data is
;curently plotted
common draw_request,draw_req
;The following common block contains 1D n_e profiles of raw and
;smoothed data, 3D n_e and ne_stop_cross_section arrays after they constructed
common dens_electrons,n_e_coord,n_e_raw,n_e_raw_err,n_e_raw_r,n_e,n_e_err,n_e_r,n_e_arr,n_e_err_arr,ne_stop_cross_section
;The following common block contains 1D t_e profiles of raw and
;smoothed data and 3D t_e array after it constructed.
common temp_electrons,t_e_coord,t_e_raw,t_e_raw_err,t_e_raw_r,t_e,t_e_err,t_e_r,t_e_arr,t_e_err_arr
;The following common block contains 1D z_eff profiles of raw and
;smoothed data and 3D z_eff array after it constructed.
common effective_charge, z_eff_coord, z_eff_raw,z_eff_raw_err,z_eff_raw_r,z_eff,z_eff_err,z_eff_r,z_eff_arr,z_eff_err_arr
;The following common block contains X,Y,Z coordinate arrays used for the beam
;calculation grid and output 3D arrays of the beam density and excitation fracitons
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for calculation.
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration
;calculation 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,$
ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
;The following common block contains neutral gas parameters used in
;calculation of the beam attenuation in the gas.
common neutral_gas,tank_pressure,torus_pressure,duct_pressure,duct_pressure_loc,n0_arr,n0_stop_cross_section
;The following common block contains the parameters which describe the geometry
;and position of the machine plasma
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower
;The following common block contains the parameters which describe
;some relative  global parameters of the plasma 
common plasma_param, main_ion,n_impur,impur_table
;The following common block contains some of the settings of how to
;run the beam attenuation and penetration calculation.
common run_settings, div_type,div_type_names,atten_type, atten_type_names, vel_dis_type,vel_dis_names,save_output_type,save_output_file
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution) 
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
;The following common block contains the parameters which describe the
;positions and sizes of the beam limiters.
common beam_limiters, n_limiters, limiters_table,limiters_arr
;The following common block contains the table of the parameters which
;defile the 3D spatial grid which used for calculation
common grid_arr, code_grid_arr
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation. 
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during Main Event procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
     st_err=0
     return
   endif
 endif

;-----------------------------------------------------

; Global event cases:
;---------------------------------------------------------------------------------------------------------------------------------------
case ev.id of
   ;---------------------Get info on old runs
   Widget_Info(ev.id, FIND_BY_UNAME='Get_Old_Runs_Button'): begin
     cmod_machine=strmatch(hostname,'*psfc.mit.edu',/fold_case)
     st_err=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'), Get_Value=shot
     WIDGET_CONTROL,Widget_Info(ev.top, FIND_BY_UNAME='Result_Plot') , GET_VALUE=drawID
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'), Get_Value=beam
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='User_Droplist'), Set_Value=' '
     Wset,drawID
     Erase
     if strupcase(beam) eq 'DNBI_ALCATOR' and cmod_machine then begin
       ;search for the runs in MDSPLUS
       MDSOPEN,'DNB',shot,/Quiet, status=st0
       if st0 then begin
         MDSTCL,'SET DEFAULT \DNB::TOP'
         ;check if ALCBEAM existed 
         MDSTCL,'DIR/NOFULL',output=output
         output_all=strtrim(STRSPLIT(strjoin(output(3:n_elements(output)-4)),' ', ESCAPE=':', /EXTRACT),1)
         if where(output_all eq 'ALCBEAM') ne -1 then begin
           ;check which nodes are existed in the ALCBEAM
           MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM' 
           MDSTCL,'DIR/NOFULL',output=output
         
         if output(0) eq "" then begin
             Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='User_Droplist'), Set_Value=' '
             Widget_control, status_wid, Get_Value=status_tx
             Widget_Control, status_wid,$
             Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : There are no existed runs available in MDSPLUS for: '+' *** Shot #'+strtrim(string(Shot),1)]], Set_text_top_line=n_elements(status_tx)-4
             Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Read_Results_Button'),Sensitive=0
         endif else begin
           ;-----------------------------
           users=strtrim(STRSPLIT(strjoin(output(3:n_elements(output)-4)),' ', ESCAPE=':', /EXTRACT),1)
           allruns=""
           for i=0,n_elements(users)-1 do begin
             MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+users(i)
             MDSTCL,'DIR/NOFULL',output=output
             if output(0) ne "" then runs=strtrim(STRSPLIT(strjoin(output(3:n_elements(output)-4)),' ', ESCAPE=':', /EXTRACT),1) else runs=""
             allruns=[allruns,users(i)+'.'+runs]
           endfor
           allruns=allruns(1:*)
           ;Display the existed nodes
           Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='User_Droplist'), Set_Value=allruns
           Widget_control, status_wid, Get_Value=status_tx
           Widget_Control, status_wid,$
           Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : '+strtrim(string(n_elements(allruns)),1)+' MDSPLUS  runs exists for DNBI_ALCBEAM']], $
           Set_text_top_line=n_elements(status_tx)-4
           Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Read_Results_Button'),Sensitive=1   
           MDSCLOSE,'DNB'
         endelse   
         endif else begin
           Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='User_Droplist'), Set_Value=' '
           Widget_control, status_wid, Get_Value=status_tx
           Widget_Control, status_wid,$
           Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : There are no MDSPLUS runs exist for: '+' *** Shot #'+strtrim(string(Shot),1)]], Set_text_top_line=n_elements(status_tx)-4
           Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Read_Results_Button'),Sensitive=0
         endelse
       endif else begin
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='User_Droplist'), Set_Value=' '
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : This shot does not exist in MDSPLUS'+' *** Shot #'+strtrim(string(Shot),1)]], Set_text_top_line=n_elements(status_tx)-4
         Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Read_Results_Button'),Sensitive=0
       endelse
     endif
     ;search for the output files in the working directory  
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='User_Droplist'), Get_Value=all_runs
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='File_Dir_Text'), Get_Value=file_dir
     ;check if dir ends on /
     file_dir=strtrim(file_dir,2)
     if strmid(file_dir,strlen(file_dir)-1,1) eq '/' then file_dir=strmid(file_dir,0,strlen(file_dir)-1) 
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='File_Dir_Text'), Set_Value=file_dir

     cd, file_dir
     output_files=file_search('*.abo')
     cd,cur_dir
     run_files=output_files
     for i=0,n_elements(run_files)-1 do begin
        if strlen(run_files(i)) gt 24 then run_files(i) = strmid(run_files(i),0,14)+'...'+strmid(run_files(i),strlen(run_files(i))-6,8)
     end
     if output_files(0) ne "" then begin
        if all_runs(0) eq ' ' then  begin
          Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='User_Droplist'), Set_Value=run_files
        endif else begin
          Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='User_Droplist'), Set_Value=[all_runs,run_files]
        endelse
        Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Read_Results_Button'),Sensitive=1
        Widget_control, status_wid, Get_Value=status_tx
        Widget_Control, status_wid,$
        Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : '+strtrim(string(n_elements(output_files)),1)+' output data file/files exist']], Set_text_top_line=n_elements(status_tx)-4       
    endif else begin
       Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : There are no data file/files were found in '+file_dir+' directory']], Set_text_top_line=n_elements(status_tx)-4
    endelse
     WIDGET_CONTROL,Widget_Info(ev.top, FIND_BY_UNAME='User_Droplist'), TIMER=0.1 
 end
     ;---------------------Change available users/owners of the runs
     Widget_Info(ev.id, FIND_BY_UNAME='User_Droplist'): begin
     st_err=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'), Get_Value=shot
     WIDGET_CONTROL,Widget_Info(ev.top, FIND_BY_UNAME='Result_Plot') , GET_VALUE=drawID
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'), Get_Value=beam
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='File_Dir_Text'), Get_Value=file_dir
     ;check if dir ends on /
     file_dir=strtrim(file_dir,2)
     if strmid(file_dir,strlen(file_dir)-1,1) eq '/' then file_dir=strmid(file_dir,0,strlen(file_dir)-1) 
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='File_Dir_Text'), Set_Value=file_dir

     Widget_Control, ev.id, Get_Value=allruns
     runs_val=Widget_Info(ev.id, /Droplist_Select)
     Wset,drawID
     Erase
     if allruns(0) eq " " then return 
     if strpos(allruns(runs_val),'.abo') eq -1 then begin
       MDSOPEN,'DNB',shot,/Quiet, status=st0
       if st0 then begin
         ;some general info on the selected run
         ;is displayed in the status window
         run_time_ver=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+':TIME_STAMP', status=st1,/quiet)
         div_type_val=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+':DIV_TYPE', status=st1,/quiet)
         att_type_val=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+':ATTEN_TYPE', status=st1,/quiet)
         vel_dis_type_val=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+':VEL_DIS_TYPE', status=st1,/quiet)
         if not(st1) then vel_dis_type_val='NO'         
         stop_plsm_cs=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+':STOP_PLSM_CS', status=st1,/quiet)
         exc_plsm_cs=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+':EXC_PLSM_CS', status=st1,/quiet)
         time_int_val=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+':time_interv',status=st1,/quiet)
         t1_val=strtrim(string(time_int_val(0),format='(F5.3)'),2)
         t2_val=strtrim(string(time_int_val(1),format='(F5.3)'),2)
         att_type_val=att_type_val(0)
         div_type_val=div_type_val(0)
         vel_dis_type_val=vel_dis_type_val(0)
         stop_plsm_cs=stop_plsm_cs(0)
         exc_plsm_cs=exc_plsm_cs(0)
         if st1 then begin
           if n_elements(run_time_ver) eq 1 then run_time_ver=[run_time_ver,'(ver. ???)']
           Widget_control, status_wid, Get_Value=status_tx
           Widget_Control, status_wid,$
           Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Selected run: '+allruns(runs_val) $
           +', shot: '+strtrim(string(Shot),1)+', time interval: ['+t1_val+' : '+t2_val+'] sec, Run performed on '+run_time_ver(0)+', by '+run_time_ver(1)],[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1) $
           +' : Divergence type: '+div_type_val+', Attenuation type: '+att_type_val],[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Beam stoppping in plasma: '+stop_plsm_cs+', Beam excitation in plasma: '+exc_plsm_cs+ ', Velocity distribution calculated: '+vel_dis_type_val]], $
           Set_text_top_line=n_elements(status_tx)-2
         endif else begin
           Widget_control, status_wid, Get_Value=status_tx
           Widget_Control, status_wid,$
           Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Shot: '+strtrim(string(Shot),1)+',selected run: '+allruns(runs_val)+', Run information was not found']], Set_text_top_line=n_elements(status_tx)-4
           Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Read_Results_Button'),Sensitive=0
         endelse
         MDSCLOSE,'DNB'    
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : This shot does not exist in MDSPLUS'+' *** Shot #'+strtrim(string(Shot),1)]], Set_text_top_line=n_elements(status_tx)-4
         Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Read_Results_Button'),Sensitive=0
       endelse
     endif else begin
       load_general_temp,file_dir+'/'+allruns(runs_val),beam_val,shot_val,run_time_ver,t1_val,t2_val,div_type_val,atten_type_val,vel_dis_type_val,stop_plsm_cs,exc_plsm_cs
       if st_err then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during load_general_info_from_output_file procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         st_err=0
         return
       endif
 
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Selected run: '+allruns(runs_val) $
       +', shot: '+strtrim(string(Shot),1)+', time interval: ['+t1_val+' : '+t2_val+'] sec, Run performed on '+run_time_ver(0)+', by '+run_time_ver(1)],[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1) $
       +' : Divergence type: '+div_type_val+', Attenuation type: '+atten_type_val],[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Beam stoppping in plasma: '+stop_plsm_cs+', Beam excitation in plasma: '+exc_plsm_cs+ ', Velocity distribution calculated: '+vel_dis_type_val]], $
        Set_text_top_line=n_elements(status_tx)-2
     endelse
   end
    ;---------------------Read Results From the Tree
     Widget_Info(ev.id, FIND_BY_UNAME='Read_Results_Button'): begin
     st_err=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'), Get_Value=shot
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='User_Droplist'), Get_Value=allruns
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='File_Dir_Text'), Get_Value=file_dir
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'),Editable=1
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_1'),Editable=1
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_2'),Editable=1 
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'),Editable=1
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Ready_Button'), Set_Value='PREPARE A RUN'
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Load_Base'),Sensitive=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Preview_Data_Base'),Sensitive=1
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Save_Param_Button'),Sensitive=1
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Construct_Base'),Sensitive=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Preview_Arr_Base'),Sensitive=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Calc_Base'),Sensitive=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plot_Button'),Sensitive=1
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Export_Button'),Sensitive=1
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plot_Choice_Droplist'),Sensitive=1
     sens_control, ev.top 
                 
     ;check if dir ends on /
     file_dir=strtrim(file_dir,2)
     if strmid(file_dir,strlen(file_dir)-1,1) eq '/' then file_dir=strmid(file_dir,0,strlen(file_dir)-1) 
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='File_Dir_Text'), Set_Value=file_dir

     runs_val=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='User_Droplist'), /Droplist_Select)
     ;do the following only for the MDSPLUS data
     if strpos(allruns(runs_val),'.abo') eq -1 then begin
     MDSOPEN,'DNB',shot,/Quiet, status=st0
     if st0 then begin
       ;modify used setting
       run_time_ver=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+':TIME_STAMP', status=st1,/quiet)
       div_type_val=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+':DIV_TYPE', status=st1,/quiet)
       att_type_val=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+':ATTEN_TYPE', status=st1,/quiet)
       vel_dis_type_val=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+':VEL_DIS_TYPE', status=st1,/quiet)
       if not(st1) then vel_dis_type_val='NO'       
       stop_plsm_cs=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+':STOP_PLSM_CS', status=st1,/quiet)
       exc_plsm_cs=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+':EXC_PLSM_CS', status=st1,/quiet)
       att_type_val=att_type_val(0)
       div_type_val=div_type_val(0)
       vel_dis_type_val=vel_dis_type_val(0)
       stop_plsm_cs=stop_plsm_cs(0)
       exc_plsm_cs=exc_plsm_cs(0)
       div_type=where(strtrim(div_type_names,2) eq div_type_val)
       atten_type=where(strtrim(atten_type_names,2) eq att_type_val)
       vel_dis_type=where(strtrim(vel_dis_names,2) eq vel_dis_type_val)
       stop_plasma_type=where(strtrim(stop_plasma_type_names,2) eq stop_plsm_cs)
       exc_plasma_type=where(strtrim(exc_plasma_type_names,2) eq exc_plsm_cs)

       n_beam=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.RESULTS:n_beam',status=st1,/quiet)
       exc_n2_frac=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.RESULTS:exc_n2_frac',status=st2,/quiet)
       exc_n3_frac=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.RESULTS:exc_n3_frac',status=st3,/quiet)
       E_beam=MDSVALUE('Dim_Of(\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.RESULTS:n_beam,0)',status=st4,/quiet)
       z_beam=MDSVALUE('Dim_Of(\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.RESULTS:n_beam,1)',status=st5,/quiet)
       x_beam=MDSVALUE('Dim_Of(\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.RESULTS:n_beam,2)',status=st6,/quiet)
       y_beam=MDSVALUE('Dim_Of(\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.RESULTS:n_beam,3)',status=st7,/quiet)
       vel_vec_x=0 & vel_vec_y=0 & vel_vec_coef=0
       if vel_dis_type eq 0 then begin
         vel_vec_x=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.RESULTS:vel_vec_x',status=st8,/quiet)
         vel_vec_y=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.RESULTS:vel_vec_y',status=st8,/quiet)
         vel_vec_coef=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.RESULTS:vel_vec_coef',status=st8,/quiet)      
       endif
       time_int=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+':time_interv',status=st8,/quiet)
       t1=time_int(0)
       t2=time_int(1)
       
       z_min=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.CODE_GRID:Z_MIN', status=st9,/quiet)
       z_step1=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.CODE_GRID:Z_STEP1', status=st10,/quiet)
       z_mid=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.CODE_GRID:Z_MID', status=st11,/quiet)
       z_step2=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.CODE_GRID:Z_STEP2', status=st12,/quiet)
       z_max=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.CODE_GRID:Z_MAX', status=st13,/quiet)
       x_min=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.CODE_GRID:X_MIN', status=st14,/quiet)
       x_step=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.CODE_GRID:X_STEP', status=st15,/quiet)
       x_max=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.CODE_GRID:X_MAX', status=st16,/quiet)
       y_min=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.CODE_GRID:Y_MIN', status=st17,/quiet)
       y_step=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.CODE_GRID:Y_STEP', status=st18,/quiet)
       y_max=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.CODE_GRID:Y_MAX', status=st19,/quiet)
      
       x_grid_focus=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:X_GRID_FOCUS', status=st20,/quiet)
       y_grid_focus=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:Y_GRID_FOCUS', status=st20,/quiet)      
       if (not(st20)) then begin
         x_grid_focus=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:GRID_FOCUS', status=st20,/quiet)
         y_grid_focus=x_grid_focus
       endif
       beam_port_phi=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:BEAM_PORT_PHI', status=st21,/quiet)
       if (not(st21)) then begin
         beam_port_phi = 0.0
       endif
       beam_port=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:BEAM_PORT', status=st21,/quiet)
       R_grid=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:R_GRID', status=st22,/quiet)
       Z_grid=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:Z_GRID', status=st23,/quiet)       
       Phi_grid=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:PHI_GRID', status=st24,/quiet)      
       R_wall=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:R_wall', status=st25,/quiet)
       Z_wall=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:Z_wall', status=st26,/quiet)       
       Phi_wall=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:PHI_wall', status=st27,/quiet) 
       tank_front_dist=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:TANK_FRONT', status=st28,/quiet)
       tank_size=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:TANK_SIZE', status=st29,/quiet)
       tank_diam=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:TANK_DIAM', status=st291,/quiet)
       if (not(st291)) then tank_diam = 1.0
       neutr_front_dist=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:NEUTR_FRONT', status=st302,/quiet)
       if (not(st302)) then neutr_front_dist = 0.0
       neutr_size=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:NEUTR_SIZE', status=st30,/quiet)
       neutr_diam=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:NEUTR_DIAM', status=st301,/quiet)
       if (not(st301)) then neutr_diam = 0.2
       tank_magnet_dist=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:TANK_MAGNET', status=st31,/quiet)
       magnet_size=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:MAGNET_SIZE', status=st32,/quiet)
       magnet_diam=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:MAGNET_DIAM', status=st321,/quiet)
       if (not(st321)) then magnet_diam = 0.2
       tank_cal_dist=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:TANK_CAL', status=st33,/quiet)
       beam_apertures=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:BEAM_APERTUR', status=st34,/quiet)
       grid_ap_diam=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_GEOM:GRID_AP_DIAM', status=st35,/quiet)     


       tank_pressure=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.NEUTR_GAS:TANK_P', status=st36,/quiet)
       torus_pressure=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.NEUTR_GAS:TORUS_P', status=st37,/quiet)
       
       duct_pressure=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.NEUTR_GAS:DUCT_P', status=st361,/quiet)
       duct_pressure_loc=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.NEUTR_GAS:DUCT_Z', status=st361,/quiet)
       if (not(st361)) then duct_pressure=0.0
       if (not(st361)) then duct_pressure_loc=0.0

       beam_atom=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_PARAM:BEAM_ATOM', status=st38,/quiet)
       if (not(st38)) then beam_atom='H'
       E_full=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_PARAM:E_FULL', status=st38,/quiet)
       E_frac=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_PARAM:E_FRAC', status=st39,/quiet)
       I_beam=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_PARAM:I_BEAM', status=st40,/quiet)
       I_frac=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_PARAM:I_FRAC', status=st41,/quiet)      
       I_opt=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_PARAM:I_opt', status=st42,/quiet)
       I_dens_par=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_PARAM:I_dens_par', status=st43,/quiet)     
       x_div_bml_opt=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_PARAM:XDIV_BML_OPT', status=st44,/quiet)
       y_div_bml_opt=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_PARAM:YDIV_BML_OPT', status=st44,/quiet)
       if (not(st44)) then begin
         x_div_bml_opt=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_PARAM:DIV_BML_OPT', status=st44,/quiet)
         y_div_bml_opt=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_PARAM:DIV_BML_OPT', status=st44,/quiet)  
       endif

       div_dist_par=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_PARAM:div_dist_par', status=st45,/quiet)   
    
       r_major=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.PLASMA_GEOM:R_MAJOR', status=st46,/quiet)
       z_major=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.PLASMA_GEOM:Z_MAJOR', status=st47,/quiet)
       r_minor=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.PLASMA_GEOM:R_MINOR', status=st48,/quiet)
       elong=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.PLASMA_GEOM:ELONG', status=st49,/quiet)
       triang_upper=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.PLASMA_GEOM:TRIANG_U', status=st50,/quiet)
       triang_lower=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.PLASMA_GEOM:TRIANG_L', status=st51,/quiet)

       n_limiters=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_LIMITER:N_LIMITERS', status=st52,/quiet)
       limiters_table_1=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.BEAM_LIMITER:LIM_TABLE', status=st53,/quiet)
       if st53 and n_elements(limiters_table_1) gt 2 then begin
         if (size(limiters_table_1))(1) eq 6 then begin
           limiters_table=reform(strarr(7,n_limiters))
           limiters_table(*)='NAN'
           limiters_table(0:5,*)=limiters_table_1
         endif else limiters_table=limiters_table_1
       endif 

       
       n_e_coord=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.N_E_PROF:N_E_COORD', status=st54,/quiet)
       if not st54 then n_e_coord = 0 ; default if no val is saved
       n_e_raw=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.N_E_PROF:N_E_RAW', status=st54,/quiet)
       n_e_raw_r=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.N_E_PROF:N_E_RAW_R', status=st55,/quiet)
       n_e_raw_err=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.N_E_PROF:N_E_RAW_ER', status=st56,/quiet)
       n_e=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.N_E_PROF:N_E', status=st57,/quiet)
       n_e_r=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.N_E_PROF:N_E_R', status=st58,/quiet)
       n_e_err=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.N_E_PROF:N_E_ER', status=st59,/quiet)
       t_e_raw=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.T_E_PROF:T_E_RAW', status=st60,/quiet)

       t_e_coord=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.N_E_PROF:T_E_COORD', status=st61,/quiet)
       if not st61 then t_e_coord = 0 ; default if no val is saved
       t_e_raw_r=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.T_E_PROF:T_E_RAW_R', status=st61,/quiet)
       t_e_raw_err=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.T_E_PROF:T_E_RAW_ER', status=st62,/quiet)
       t_e=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.T_E_PROF:T_E', status=st63,/quiet)
       t_e_r=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.T_E_PROF:T_E_R', status=st64,/quiet)
       t_e_err=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.T_E_PROF:T_E_ER', status=st65,/quiet)

       Z_eff_coord=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.N_E_PROF:Z_EFF_COORD', status=st66,/quiet) 
       if not st66 then z_eff_coord = 0 ; default if no val is saved
       Z_eff_raw=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.Z_Eff_PROF:Z_Eff_RAW', status=st66,/quiet)
       Z_eff_raw_r=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.Z_Eff_PROF:Z_Eff_RAW_R', status=st67,/quiet)
       Z_eff_raw_err=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.Z_Eff_PROF:Z_Eff_RAW_ER', status=st68,/quiet)
       Z_eff=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.Z_Eff_PROF:Z_Eff', status=st69,/quiet)
       Z_eff_r=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.Z_Eff_PROF:Z_Eff_R', status=st70,/quiet)
       Z_eff_err=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.Z_Eff_PROF:Z_Eff_ER', status=st71,/quiet)

       main_ion=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.PLASMA_PARAM:MAIN_ION', status=st72,/quiet)
       n_impur=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.PLASMA_PARAM:N_IMPUR', status=st73,/quiet)
       impur_table=MDSVALUE('\DNB::TOP.ALCBEAM.'+allruns(runs_val)+'.INPUT.PLASMA_PARAM:IMPUR_TABLE', status=st74,/quiet)  
         
       st_tot=st1*st2*st3*st4*st5*st6*st7*st8*st9*st10*st11*st12*st13*st14*st15*st16*st17*st18*st19*st20*st21*st22*st23*st24*st25*st26*st27*st28*st29*st30*st31*st32*st33*st34*st35*st36*st37*st38*st39* $
       st40*st41*st42*st43*st44*st45*st46*st47*st48*st49*st50*st51*st52*st53*st54*st55*st56*st57*st58*st59*st60*st61*st62*st63*st64*st65*st66*st67*st68*st69*st70*st71*st72*st73*st74
     if st_tot then begin
         x_bml=beam_apertures(*,0)
         y_bml=beam_apertures(*,1)
         neutralization;procedure which is needed for beam parameters
         code_grid_arr={z:[z_min,z_step1,z_mid,z_step2,z_max],x:[x_min,x_step,x_max],y:[y_min,y_step,y_max]}
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_1'), Set_Value=strtrim(string(t1,format='(F10.3)'),2)
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_2'), Set_Value=strtrim(string(t2,format='(F10.3)'),2)
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Shot: '+strtrim(string(Shot),1)+', selected run: '+allruns(runs_val) $
         +', The data was extracted from MDSPLUS: '+allruns(runs_val)]], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Shot: '+strtrim(string(Shot),1)+', selected run: '+allruns(runs_val)+$
', Missing some data in MDSPLUS or data from old version of ALCBEAM (not consistent with current version).']], Set_text_top_line=n_elements(status_tx)-4
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plot_Button'),Sensitive=0
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Export_Button'),Sensitive=0
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plot_Choice_Droplist'),Sensitive=0
         return
       endelse
       MDSCLOSE,'DNB'    
     endif else begin
       Widget_control, Widget_Info(Main_Base, FIND_BY_UNAME='Status_Text'), Get_Value=status_tx
       Widget_Control, Widget_Info(Main_Base, FIND_BY_UNAME='Status_Text'),$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : This shot does not exist in MDSPLUS'+' *** Shot #'+strtrim(string(Shot),1)]], Set_text_top_line=n_elements(status_tx)-4
     endelse
     endif else begin
         ;if data is in the output file, then extract it
         load_output_data_file,file_dir+'/'+allruns(runs_val)
         if st_err then begin
           Widget_control, status_wid, Get_Value=status_tx
           Widget_Control, status_wid,$
           Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during load_output_data_from_file procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
           st_err=0
           return
         endif
         Widget_control, status_wid, Get_Value=status_tx     
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'), Set_Value=shot
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_1'), Set_Value=strtrim(string(t1,format='(F10.3)'),2)
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_2'), Set_Value=strtrim(string(t2,format='(F10.3)'),2)
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'), Set_Value=beam
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : The data was extracted from file: '+file_dir+'/'+allruns(runs_val)]], Set_text_top_line=n_elements(status_tx)-4 
     endelse
      Widget_control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_1'), Set_Value=strtrim(string(t1,format='(F10.3)'),1)
      Widget_control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_2'), Set_Value=strtrim(string(t2,format='(F10.3)'),1)
         prepare_sliders,ev.top
         if st_err then begin
           Widget_control, status_wid, Get_Value=status_tx
           Widget_Control, status_wid,$
           Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during prepare sliders procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
           st_err=0
           return
         endif
         ;Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
         ;Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
         ;Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
         WIDGET_CONTROL,Widget_Info(ev.top, FIND_BY_UNAME='Result_Plot') , GET_VALUE=drawID
         Wset,drawID
         Erase
   end
    ;---------------------Del Node Button
   Widget_Info(ev.id, FIND_BY_UNAME='Del_Node_Button'): begin
   st_err=0

   Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'), Get_Value=shot
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='User_Droplist'), Get_Value=allruns
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='File_Dir_Text'), Get_Value=file_dir
     ;check if dir ends on /
     file_dir=strtrim(file_dir,2)
     if strmid(file_dir,strlen(file_dir)-1,1) eq '/' then file_dir=strmid(file_dir,0,strlen(file_dir)-1) 
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='File_Dir_Text'), Set_Value=file_dir

     runs_val=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='User_Droplist'), /Droplist_Select)
     user_run=(strsplit(allruns(runs_val),'.',/extract))(0)
     run_del=(strsplit(allruns(runs_val),'.',/extract))(1)
     if strpos(allruns(runs_val),'.abo') eq -1 then begin
       user_run=(strsplit(allruns(runs_val),'.',/extract))(0)
       user_up=strupcase(user)
       if user_run eq user_up then begin
         MDSOPEN,'DNB',shot,/Quiet, status=st0
         if st0 then begin
           MDSTCL,'EDIT DNB/SHOT='+strtrim(string(shot),2)    ;open the shot tree for edit
           MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_run
           MDSTCL,'DELETE NODE '+run_del+' /NOCONFIRM'  ;delete run node
           MDSTCL,'DIR/NOFULL',output=output
           if output(0) eq "" then begin
             MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM'
             MDSTCL,'DELETE NODE '+user_run  ;delete user node 
           endif
           MDSTCL,'WRITE'                           ;save the changes to the tree
           Widget_control, status_wid, Get_Value=status_tx
           Widget_Control, status_wid,$
           Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Shot: '+strtrim(string(Shot),1)+', selected run: '+allruns(runs_val)+', The node was deleted']], Set_text_top_line=n_elements(status_tx)-4
         endif else begin
           Widget_control, status_wid, Get_Value=status_tx
           Widget_Control, status_wid,$
           Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Wrong shot number'+' *** Shot #'+strtrim(string(Shot),1)]], Set_text_top_line=n_elements(status_tx)-4
         endelse
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Only creator of the node may delete it']], Set_text_top_line=n_elements(status_tx)-4
         return
       endelse
     endif else begin
       file_Delete,file_dir+'/'+allruns(runs_val)
       Widget_Control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Output data file was deleted.']], Set_text_top_line=n_elements(status_tx)-4
     endelse
     WIDGET_CONTROL,Widget_Info(ev.top, FIND_BY_UNAME='Get_Old_Runs_Button'), TIMER=0.1 
   end
   ;---------------------X_B Plot Slider Movement
    Widget_Info(ev.id, FIND_BY_UNAME='X_B_Slider'): begin
      st_err=0
      Widget_Control, ev.id,Get_Value=X_B_Slider_val
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='X_B_Label'),Set_Value='Beam X coordinate: '$
      +strtrim(string(X_beam(X_B_Slider_val),format='(F10.3)'),1)+' m'
      if draw_req eq 0 then plot_input,ev.top
      if draw_req eq 1 then plot_input_arr,ev.top     
      if draw_req eq 2 then plot_output,ev.top
      if st_err then begin
        Widget_control, status_wid, Get_Value=status_tx
        Widget_Control, status_wid,$
        Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during redraw procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
        st_err=0
        return
      endif     
    end
   ;---------------------Z_B Plot Slider Movement
    Widget_Info(ev.id, FIND_BY_UNAME='Z_B_Slider'): begin
      st_err=0
      Widget_Control, ev.id,Get_Value=Z_B_Slider_val
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_B_Label'),Set_Value='Distance from Accelerating Grids z_beam: '$
      +strtrim(string(Z_beam(Z_B_Slider_val),format='(F10.3)'),1)+' m'
      if draw_req eq 0 then plot_input,ev.top
      if draw_req eq 1 then plot_input_arr,ev.top     
      if draw_req eq 2 then plot_output,ev.top 
       if st_err then begin
        Widget_control, status_wid, Get_Value=status_tx
        Widget_Control, status_wid,$
        Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during redraw procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
        st_err=0
        return
      endif    
    end
    ;---------------------Y_B Plot Slider Movement
    Widget_Info(ev.id, FIND_BY_UNAME='Y_B_Slider'): begin
      st_err=0
      Widget_Control, ev.id,Get_Value=Y_B_Slider_val
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Y_B_Label'),Set_Value='Beam Y coordinate: '$
      +strtrim(string(Y_beam(Y_B_Slider_val),format='(F10.3)'),1)+' m'
      if draw_req eq 0 then plot_input,ev.top
      if draw_req eq 1 then plot_input_arr,ev.top     
      if draw_req eq 2 then plot_output,ev.top
      if st_err then begin
        Widget_control, status_wid, Get_Value=status_tx
        Widget_Control, status_wid,$
        Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during redraw procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
        st_err=0
        return
      endif     
    end
     ;---------------------E_B Plot Slider Movement
    Widget_Info(ev.id, FIND_BY_UNAME='E_B_Slider'): begin
      st_err=0
      Widget_Control, ev.id,Get_Value=e_b_val
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Label'),Set_Value='Beam Energy component: '$
      +strtrim(string(E_beam(e_b_val),format='(F10.1)'),1)+' keV'
      if draw_req eq 0 then plot_input,ev.top
      if draw_req eq 1 then plot_input_arr,ev.top     
      if draw_req eq 2 then plot_output,ev.top
      if st_err then begin
        Widget_control, status_wid, Get_Value=status_tx
        Widget_Control, status_wid,$
        Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during redraw procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
        st_err=0
        return
      endif    
    end   
    ;---------------------Plot_Output Button
    Widget_Info(ev.id, FIND_BY_UNAME='Plot_Button'): begin
      st_err=0
      plot_output,ev.top
      if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during Plot output data procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
      endif 
    end
    ;---------------------Plot_Choice Droplist
    Widget_Info(ev.id, FIND_BY_UNAME='Plot_Choice_Droplist'): begin
      st_err=0
      sens_control,ev.top
      if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during Sensitivity Control data procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
      endif 
    end
        
    ;---------------------Preview_Input Data_Button
    Widget_Info(ev.id, FIND_BY_UNAME='Preview_Data_Button'): begin
      st_err=0
      plot_input,ev.top
      if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during Preview input data procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
     endif 
    end
    ;---------------------Preview_Output Arr Button
    Widget_Info(ev.id, FIND_BY_UNAME='Preview_Arr_Button'): begin
      st_err=0
      plot_input_arr,ev.top
      if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during Preview constructed data procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
     endif  
    end   
    ;---------------------Ready to run the code sensitive
    Widget_Info(ev.id, FIND_BY_UNAME='Ready_Button'): begin
     st_err=0
     Widget_Control, ev.id, Get_Value=button_val
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'), Get_Value=shot
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'), Get_Value=beam
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='File_Dir_Text'), Get_Value=file_dir     
     if button_val eq 'PREPARE A RUN' then begin 
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Construct_Base'),Sensitive=0
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Calc_Base'),Sensitive=0
       ;Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Preview_Data_Base'),Sensitive=0
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Load_Base'),Sensitive=1
       ;Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Preview_Arr_Base'),Sensitive=0
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Ready_Button'), Set_Value='CANCEL RUN' 
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_1'),Editable=1
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_2'),Editable=1 
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'),Editable=1
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'),Editable=1 
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Ready to load the input data']], Set_text_top_line=n_elements(status_tx)-4
     endif
     if button_val eq 'CANCEL RUN' or button_val eq 'FINISH RUN'then begin 
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Construct_Base'),Sensitive=0
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Calc_Base'),Sensitive=0
       ;Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Preview_Data_Base'),Sensitive=0
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Load_Base'),Sensitive=0
       ;Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Preview_Arr_Base'),Sensitive=0
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Ready_Button'), Set_Value='PREPARE A RUN' 
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_1'),Editable=1
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_2'),Editable=1 
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'),Editable=1
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'),Editable=1 
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Run routine was canceled. Press PREPARE A RUN button to start again.']], Set_text_top_line=n_elements(status_tx)-4
     endif
     if button_val eq 'STOP CALC' then begin 
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Calc_Base'),Sensitive=1
       ;Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Preview_Arr_Base'),Sensitive=1
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Ready_Button'), Set_Value='CANCEL RUN' 
     endif
    end
   ;---------------------Checks to make Del buttons sensitive
    Widget_Info(ev.id, FIND_BY_UNAME='Ready_Del_Check'): begin
     st_err=0
     Widget_Control, ev.id, Get_Value=Ready_Check
     if Ready_Check(0) eq 1 then begin
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Del_Node_Button'),Sensitive=1 
    endif else begin
       Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Del_Node_Button'),Sensitive=0
     endelse
   end
   ;---------------------Shows the Code Grid Window
   Widget_Info(ev.id, FIND_BY_UNAME='Code_Grid_Button'): begin
     st_err=0
     show_code_grid_window, ev.top
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during show_code_grid_window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
     endif  
   end 
  ;---------------------Shows the Beam Geometry Window
   Widget_Info(ev.id, FIND_BY_UNAME='Beam_Geometry_Button'): begin
     st_err=0
     show_beam_geometry_window, ev.top
    if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during show_beam_geometry_window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
     endif
   end 
  ;---------------------Shows the Beam Parameters Window
   Widget_Info(ev.id, FIND_BY_UNAME='Beam_Param_Button'): begin
     st_err=0
     show_beam_param_window, ev.top
    if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during show_beam_param_window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
     endif
   end  
  ;---------------------Shows the Plasma Parameters Window
   Widget_Info(ev.id, FIND_BY_UNAME='Plasma_Param_Button'): begin
     st_err=0
     show_plasma_param_window, ev.top
    if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during show_plasma_param_window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
     endif
   end     ;---------------------Shows the Plasma Geometry Window
   Widget_Info(ev.id, FIND_BY_UNAME='Plasma_Geometry_Button'): begin
     st_err=0
     show_plasma_geometry_window, ev.top
    if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during show_plasma_geometry_window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
     endif
   end 
   ;---------------------Shows the Neutral Gas Window
   Widget_Info(ev.id, FIND_BY_UNAME='Gas_Button'): begin
     st_err=0
     show_neutral_gas_window, ev.top
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during show_neutral_gas_window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
     endif
   end
   ;---------------------Shows the Neutral Gas Window
   Widget_Info(ev.id, FIND_BY_UNAME='Beam_Limiters_Button'): begin
     st_err=0
     show_beam_limiters_window, ev.top
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during show_beam_limiters_window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
     endif
   end   
   ;---------------------Shows Load Settings Window
   Widget_Info(ev.id, FIND_BY_UNAME='Load_Settings_Button'): begin
     st_err=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'), Get_Value=shot
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'), Get_Value=beam
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_1'), Get_Value=t1_txt
     t1=float(t1_txt)
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_2'), Get_Value=t2_txt
     t2=float(t2_txt)
     show_load_settings_window,ev.top
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during show_load_settings_window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
     endif
   end
    ;---------------------Shows Construct Settings Window
   Widget_Info(ev.id, FIND_BY_UNAME='Construct_Settings_Button'): begin
     st_err=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'), Get_Value=shot
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'), Get_Value=beam
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_1'), Get_Value=t1_txt
     t1=float(t1_txt)
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_2'), Get_Value=t2_txt
     t2=float(t2_txt)
     show_construct_settings_window,ev.top
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during show_construct_settings_window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
     endif
   end
    ;---------------------Shows Calc Settings Window
   Widget_Info(ev.id, FIND_BY_UNAME='Calc_Settings_Button'): begin
     st_err=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'), Get_Value=shot
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'), Get_Value=beam
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_1'), Get_Value=t1_txt
     t1=float(t1_txt)
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_2'), Get_Value=t2_txt
     t2=float(t2_txt)
     show_calc_settings_window,ev.top
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during show_calc_settings_window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
     endif
   end 
   ;---------------------Save Parameters to file Window
   Widget_Info(ev.id, FIND_BY_UNAME='Save_Param_Button'): begin
     st_err=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'), Get_Value=shot
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'), Get_Value=beam
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_1'), Get_Value=t1_txt
     t1=float(t1_txt)
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_2'), Get_Value=t2_txt
     t2=float(t2_txt)
     show_save_param_window,ev.top
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during show_save_param_window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
     endif
   end
   ;---------------------Export Window
   Widget_Info(ev.id, FIND_BY_UNAME='Export_Button'): begin
     st_err=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'), Get_Value=beam
     show_export_window,ev.top
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during export_window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
     endif
   end  
   ;---------------------Save Settings to file Window
   Widget_Info(ev.id, FIND_BY_UNAME='Save_Set_File_Button'): begin
     st_err=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'), Get_Value=beam
     show_save_set_window,ev.top
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during show_save_set_window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
     endif
   end  
   ;---------------------Load Settings to file Window
   Widget_Info(ev.id, FIND_BY_UNAME='Load_Set_File_Button'): begin
     st_err=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'), Get_Value=beam
     show_load_set_window,ev.top
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during show_load_set_window. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
     endif
   end   
   ;---------------------Save Log to file Window
   Widget_Info(ev.id, FIND_BY_UNAME='Save_Log_Button'): begin
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Save_Log_Text'), Get_Value=save_log_file
     Widget_control, status_wid, Get_Value=status_tx
     close,2
     openw,2,save_log_file
     printf,2,status_tx
     close,2
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Log was saved into the '+save_log_file+' file']], Set_text_top_line=n_elements(status_tx)-4
   end   
   ;---------------------Run Code Button
   Widget_Info(ev.id, FIND_BY_UNAME='Run_Button'): begin
   st_err=0
   Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Calc_Base'),Sensitive=0
   Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Preview_Arr_Base'),Sensitive=0
   Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Ready_Button'), Set_Value='STOP CALC'
   Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'), Get_Value=shot
   Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Run_Number_Text'), Get_Value=run
   run_number='RUN_'+(strtrim(string(fix(run)),1))(0)
   if beam ne 'DNBI_ALCATOR' and save_output_type eq 0 then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Only DNBI_ALCATOR runs can be saved to MDSPLUS.'+' *** Shot #'+strtrim(string(Shot),1)]], Set_text_top_line=n_elements(status_tx)-4
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Calc_Base'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Preview_Arr_Base'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Ready_Button'), Set_Value='CANCEL RUN' 
     return
   endif
    if div_type eq 2 and x_grid_focus ne y_grid_focus then begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Only circular grid and Fx=Fy case can be calculated by analytical method.'+' *** Shot #'+strtrim(string(Shot),1)]], Set_text_top_line=n_elements(status_tx)-4
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Calc_Base'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Preview_Arr_Base'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Ready_Button'), Set_Value='CANCEL RUN' 
     return
   endif  

   Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_1'), Get_Value=t1_txt
   t1=float(t1_txt)
   Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_2'), Get_Value=t2_txt
   t2=float(t2_txt)
   user_up=strupcase(user)


       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Selected run: '+user_up+'.'+run_number+', Please wait for code to do the calculation']], Set_text_top_line=n_elements(status_tx)-4
       if div_type eq 2 then beam_code_analytic,ev.top
       if div_type eq 1 then beam_code_ray_tracing,ev.top
       if div_type eq 0 then beam_code_interpolating,ev.top

      if st_err eq 1 then begin
        Widget_control, status_wid, Get_Value=status_tx
        Widget_Control, status_wid,$
        Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during CALC procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
        st_err=0
        return
      endif
      if st_err eq 2 then begin
        Widget_control, status_wid, Get_Value=status_tx
        Widget_Control, status_wid,$
        Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Calculation was stopped. Calculation can be started again with different settings.']], Set_text_top_line=n_elements(status_tx)-4
        st_err=0
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Calc_Base'),Sensitive=1
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Preview_Arr_Base'),Sensitive=1
        Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Ready_Button'), Set_Value='CANCEL RUN' 
        return
      endif
      if st_err eq 3 then begin
         return
      endif
    if save_output_type eq 0 then begin
     MDSOPEN,'DNB',shot,/Quiet, status=st0
     if st0 then begin
       MDSTCL,'EDIT DNB/SHOT='+strtrim(string(shot),2)    ;open the shot tree for edit
       MDSTCL,'SET DEFAULT \DNB::TOP'
       ;check if ALCBEAM existed 
       MDSTCL,'DIR/NOFULL',output=output
       output_all=strtrim(STRSPLIT(strjoin(output(3:n_elements(output)-4)),' ', ESCAPE=':', /EXTRACT),1)
       if where(output_all eq 'ALCBEAM') eq -1 then MDSTCL,'ADD NODE ALCBEAM /USAGE=STRUCTURE'       ;add structure
         ;-----------------------------
       MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM'
       MDSTCL,'DIR/NOFULL',output=output
       users=""
       if output(0) ne "" then users=strtrim(STRSPLIT(strjoin(output(3:n_elements(output)-4)),' ', ESCAPE=':', /EXTRACT),1)

       
       if (where(users eq user_up))(0) eq -1 then begin
         MDSTCL,'ADD NODE '+user_up+'/USAGE=STRUCTURE'       ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up
         MDSTCL,'ADD NODE '+run_number+'/USAGE=STRUCTURE'  ;data and time, text
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number
         MDSTCL,'ADD NODE TIME_STAMP/USAGE=TEXT'  ;data and time, text
         MDSTCL,'ADD NODE DIV_TYPE/USAGE=TEXT'  ;divergence type, text
         MDSTCL,'ADD NODE ATTEN_TYPE/USAGE=TEXT'  ;attenuation type, text
         MDSTCL,'ADD NODE VEL_DIS_TYPE/USAGE=TEXT'  ;velocity distribution type, text
         MDSTCL,'ADD NODE EXC_PLSM_CS/USAGE=TEXT'  ;excitation type, text
         MDSTCL,'ADD NODE STOP_PLSM_CS/USAGE=TEXT'  ;stoppping type, text
         MDSTCL,'ADD NODE time_interv/USAGE=NUMERIC'  ;time_interval, [numeric,numeric]          
        
         MDSTCL,'ADD NODE RESULTS/USAGE=STRUCTURE'  ;subtree for output results
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.RESULTS'                  
         MDSTCL,'ADD NODE n_beam/USAGE=SIGNAL'  ;4D array of the beam density
         MDSTCL,'ADD NODE exc_n2_frac/USAGE=SIGNAL'  ;4D array of the excited fraction n=2
         MDSTCL,'ADD NODE exc_n3_frac/USAGE=SIGNAL'  ;4D array of the excited fraction n=3
         if vel_dis_type eq 0 then begin
           MDSTCL,'ADD NODE vel_vec_x/USAGE=NUMERIC'  ;3D array of X coord for vel vect
           MDSTCL,'ADD NODE vel_vec_y/USAGE=NUMERIC'  ;3D array of X coord for vel vect
           MDSTCL,'ADD NODE vel_vec_coef/USAGE=NUMERIC'  ;5D array of vel vect coefs
         endif             
  
   
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number
         MDSTCL,'ADD NODE INPUT/USAGE=STRUCTURE'  ;subtree for input data used for calculation
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT'      
         MDSTCL,'ADD NODE CODE_GRID/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.CODE_GRID'
         MDSTCL,'ADD NODE Z_MIN/USAGE=NUMERIC'       ;add z_min
         MDSTCL,'ADD NODE Z_STEP1/USAGE=NUMERIC'       ;add z_step1
         MDSTCL,'ADD NODE Z_MID/USAGE=NUMERIC'       ;add z_mid
         MDSTCL,'ADD NODE Z_STEP2/USAGE=NUMERIC'       ;add z_step2
         MDSTCL,'ADD NODE Z_MAX/USAGE=NUMERIC'       ;add z_max
         MDSTCL,'ADD NODE X_MIN/USAGE=NUMERIC'       ;add x_min
         MDSTCL,'ADD NODE X_STEP/USAGE=NUMERIC'       ;add x_step
         MDSTCL,'ADD NODE X_MAX/USAGE=NUMERIC'       ;add x_max
         MDSTCL,'ADD NODE Y_MIN/USAGE=NUMERIC'       ;add y_min
         MDSTCL,'ADD NODE Y_STEP/USAGE=NUMERIC'       ;add y_step
         MDSTCL,'ADD NODE Y_MAX/USAGE=NUMERIC'       ;add y_max

         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT'
         MDSTCL,'ADD NODE BEAM_GEOM/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM'
         MDSTCL,'ADD NODE BEAM_APERTUR/USAGE=NUMERIC'       ;add x_bml,y_bml
         MDSTCL,'ADD NODE GRID_AP_DIAM/USAGE=NUMERIC'       ;add grid_ap_diam
         MDSTCL,'ADD NODE X_GRID_FOCUS/USAGE=NUMERIC'       ;add grid_focus node
         MDSTCL,'ADD NODE Y_GRID_FOCUS/USAGE=NUMERIC'       ;add grid_focus node
         MDSTCL,'ADD NODE BEAM_PORT_PHI/USAGE=NUMERIC'   ;add beam_port_phi node
         MDSTCL,'ADD NODE BEAM_PORT/USAGE=TEXT'   ;add beam_port node
         MDSTCL,'ADD NODE R_GRID/USAGE=NUMERIC'   ;add R_grid node
         MDSTCL,'ADD NODE Z_GRID/USAGE=NUMERIC'   ;add Z_grid node
         MDSTCL,'ADD NODE PHI_GRID/USAGE=NUMERIC'   ;add PHI_grid node
         MDSTCL,'ADD NODE R_WALL/USAGE=NUMERIC'   ;add R_wall node
         MDSTCL,'ADD NODE Z_WALL/USAGE=NUMERIC'   ;add Z_wall node
         MDSTCL,'ADD NODE PHI_WALL/USAGE=NUMERIC'   ;add PHI_wall node
         MDSTCL,'ADD NODE TANK_FRONT/USAGE=NUMERIC'   ;add tank_front node
         MDSTCL,'ADD NODE TANK_SIZE/USAGE=NUMERIC'   ;add tank_size node
         MDSTCL,'ADD NODE TANK_DIAM/USAGE=NUMERIC'   ;add tank_diam node
         MDSTCL,'ADD NODE NEUTR_FRONT/USAGE=NUMERIC'   ;add neutr_front_dist node
         MDSTCL,'ADD NODE NEUTR_SIZE/USAGE=NUMERIC'   ;add neutr_size node
         MDSTCL,'ADD NODE NEUTR_DIAM/USAGE=NUMERIC'   ;add neutr_diam node
         MDSTCL,'ADD NODE TANK_MAGNET/USAGE=NUMERIC'   ;add tank_magnet node
         MDSTCL,'ADD NODE MAGNET_SIZE/USAGE=NUMERIC'   ;add magnet_size node
         MDSTCL,'ADD NODE MAGNET_DIAM/USAGE=NUMERIC'   ;add magnet_diam node
         MDSTCL,'ADD NODE TANK_CAL/USAGE=NUMERIC'   ;add tank_cal node
        
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT'
         MDSTCL,'ADD NODE BEAM_PARAM/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.BEAM_PARAM'
         MDSTCL,'ADD NODE BEAM_ATOM/USAGE=TEXT'   ;add beam_atom node 
         MDSTCL,'ADD NODE E_FULL/USAGE=NUMERIC'   ;add e_full node 
         MDSTCL,'ADD NODE E_FRAC/USAGE=NUMERIC'   ;add e_frac node
         MDSTCL,'ADD NODE I_BEAM/USAGE=NUMERIC'   ;add i_beam node
         MDSTCL,'ADD NODE I_FRAC/USAGE=NUMERIC'   ;add i_frac node
         MDSTCL,'ADD NODE I_OPT/USAGE=NUMERIC'   ;add i_opt node
         MDSTCL,'ADD NODE I_DENS_PAR/USAGE=NUMERIC'   ;add i_dens_par node     
         MDSTCL,'ADD NODE XDIV_BML_OPT/USAGE=NUMERIC'   ;add xdiv_bml_opt node
         MDSTCL,'ADD NODE YDIV_BML_OPT/USAGE=NUMERIC'   ;add ydiv_bml_opt node
         MDSTCL,'ADD NODE DIV_DIST_PAR/USAGE=NUMERIC'   ;add div_dist_par node
         
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT'
         MDSTCL,'ADD NODE PLASMA_GEOM/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.PLASMA_GEOM'
         MDSTCL,'ADD NODE R_MAJOR/USAGE=NUMERIC'       ;add r_major node
         MDSTCL,'ADD NODE Z_MAJOR/USAGE=NUMERIC'       ;add  z_major node
         MDSTCL,'ADD NODE R_MINOR/USAGE=NUMERIC'   ;add r_minor node
         MDSTCL,'ADD NODE ELONG/USAGE=NUMERIC'   ;add elong node
         MDSTCL,'ADD NODE TRIANG_U/USAGE=NUMERIC'   ;add trinag_u node
         MDSTCL,'ADD NODE TRIANG_L/USAGE=NUMERIC'   ;add triang_l node
         
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT'
         MDSTCL,'ADD NODE PLASMA_PARAM/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.PLASMA_PARAM'
         MDSTCL,'ADD NODE MAIN_ION/USAGE=TEXT'       ;add main_ion node
         MDSTCL,'ADD NODE N_IMPUR/USAGE=NUMERIC'       ;add  n_impur node
         MDSTCL,'ADD NODE IMPUR_TABLE/USAGE=TEXT'       ;add impurities table

         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT'
         MDSTCL,'ADD NODE BEAM_LIMITER/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.BEAM_LIMITER'
         MDSTCL,'ADD NODE N_LIMITERS/USAGE=NUMERIC'   ;add n_limiters
         MDSTCL,'ADD NODE LIM_TABLE/USAGE=TEXT'       ;add limiters table
      
        
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number +'.INPUT'  
         MDSTCL,'ADD NODE NEUTR_GAS/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.NEUTR_GAS'
         MDSTCL,'ADD NODE TANK_P/USAGE=NUMERIC'   ;add tank_p node
         MDSTCL,'ADD NODE TORUS_P/USAGE=NUMERIC'   ;add torus_p node
         MDSTCL,'ADD NODE DUCT_Z/USAGE=NUMERIC'   ;add duct_p node
         MDSTCL,'ADD NODE DUCT_P/USAGE=NUMERIC'   ;add duct_z node


         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number +'.INPUT'  
         MDSTCL,'ADD NODE N_E_PROF/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.N_E_PROF'

         MDSTCL,'ADD NODE n_e_coord/USAGE=NUMERIC'   ;add n_e_coord node
         MDSTCL,'ADD NODE n_e_raw/USAGE=NUMERIC'   ;add n_e_raw node
         MDSTCL,'ADD NODE n_e_raw_r/USAGE=NUMERIC'   ;add n_e_raw_r node
         MDSTCL,'ADD NODE n_e_raw_er/USAGE=NUMERIC'   ;add n_e_raw_er node
         MDSTCL,'ADD NODE n_e/USAGE=NUMERIC'   ;add n_e node
         MDSTCL,'ADD NODE n_e_r/USAGE=NUMERIC'   ;add n_e_r node
         MDSTCL,'ADD NODE n_e_er/USAGE=NUMERIC'   ;add n_e_er node
 
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT'   
         MDSTCL,'ADD NODE T_E_PROF/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.T_E_PROF'

         MDSTCL,'ADD NODE t_e_coord/USAGE=NUMERIC'   ;add t_e_coord node
         MDSTCL,'ADD NODE t_e_raw/USAGE=NUMERIC'   ;add t_e_raw node
         MDSTCL,'ADD NODE t_e_raw_r/USAGE=NUMERIC'   ;add t_e_raw_r node
         MDSTCL,'ADD NODE t_e_raw_er/USAGE=NUMERIC'   ;add t_e_raw_er node
         MDSTCL,'ADD NODE t_e/USAGE=NUMERIC'   ;add t_e node
         MDSTCL,'ADD NODE t_e_r/USAGE=NUMERIC'   ;add t_e_r node
         MDSTCL,'ADD NODE t_e_er/USAGE=NUMERIC'   ;add t_e_er node

         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number  +'.INPUT' 
         MDSTCL,'ADD NODE Z_EFF_PROF/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.Z_Eff_PROF'

         MDSTCL,'ADD NODE z_eff_coord/USAGE=NUMERIC'   ;add z_eff_coord node
         MDSTCL,'ADD NODE z_eff_raw/USAGE=NUMERIC'   ;add z_eff_raw node
         MDSTCL,'ADD NODE z_eff_raw_r/USAGE=NUMERIC'   ;add z_eff_raw_r node
         MDSTCL,'ADD NODE z_eff_raw_er/USAGE=NUMERIC'   ;add z_eff_raw_er node
         MDSTCL,'ADD NODE z_eff/USAGE=NUMERIC'   ;add z_eff node
         MDSTCL,'ADD NODE z_eff_r/USAGE=NUMERIC'   ;add z_eff_r node
         MDSTCL,'ADD NODE z_eff_er/USAGE=NUMERIC'   ;add z_eff_er node

         MDSTCL,'WRITE'                                ;save the changes to the tree
      endif else begin
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up
         MDSTCL,'DIR/NOFULL',output=output
         if output(0) ne "" then runs=strtrim(STRSPLIT(strjoin(output(3:n_elements(output)-4)),' ', ESCAPE=':', /EXTRACT),1) else runs=' '
         if (where(runs eq run_number))(0) ne -1 then  MDSTCL,'DELETE NODE '+run_number+' /NOCONFIRM'  ;delete run node
         MDSTCL,'ADD NODE '+run_number+'/USAGE=STRUCTURE'  ;data and time, text
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number
         MDSTCL,'ADD NODE TIME_STAMP/USAGE=TEXT'  ;data and time, text
         MDSTCL,'ADD NODE DIV_TYPE/USAGE=TEXT'  ;divergence type, text
         MDSTCL,'ADD NODE ATTEN_TYPE/USAGE=TEXT'  ;attenuation type, text
         MDSTCL,'ADD NODE VEL_DIS_TYPE/USAGE=TEXT'  ;velocity distribution type, text
         MDSTCL,'ADD NODE EXC_PLSM_CS/USAGE=TEXT'  ;excitation type, text
         MDSTCL,'ADD NODE STOP_PLSM_CS/USAGE=TEXT'  ;stoppping type, text
         MDSTCL,'ADD NODE time_interv/USAGE=NUMERIC'  ;time_interval, [numeric,numeric]
      
         MDSTCL,'ADD NODE RESULTS/USAGE=STRUCTURE'  ;;subtree for output results
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.RESULTS' 
         MDSTCL,'ADD NODE n_beam/USAGE=SIGNAL'  ;4D array of the beam density
         MDSTCL,'ADD NODE exc_n2_frac/USAGE=SIGNAL'  ;4D array of the excited fraction n=2
         MDSTCL,'ADD NODE exc_n3_frac/USAGE=SIGNAL'  ;4D array of the excited fraction n=3
         if vel_dis_type eq 0 then begin
           MDSTCL,'ADD NODE vel_vec_x/USAGE=NUMERIC'  ;3D array of X coord for vel vect
           MDSTCL,'ADD NODE vel_vec_y/USAGE=NUMERIC'  ;3D array of X coord for vel vect
           MDSTCL,'ADD NODE vel_vec_coef/USAGE=NUMERIC'  ;5D array of vel vect coefs
         endif  

         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number
         MDSTCL,'ADD NODE INPUT/USAGE=STRUCTURE'  ;subtree for input data used for calculation
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT' 
       
         MDSTCL,'ADD NODE CODE_GRID/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.CODE_GRID'
         MDSTCL,'ADD NODE Z_MIN/USAGE=NUMERIC'       ;add z_min
         MDSTCL,'ADD NODE Z_STEP1/USAGE=NUMERIC'       ;add z_step1
         MDSTCL,'ADD NODE Z_MID/USAGE=NUMERIC'       ;add z_mid
         MDSTCL,'ADD NODE Z_STEP2/USAGE=NUMERIC'       ;add z_step2
         MDSTCL,'ADD NODE Z_MAX/USAGE=NUMERIC'       ;add z_max
         MDSTCL,'ADD NODE X_MIN/USAGE=NUMERIC'       ;add x_min
         MDSTCL,'ADD NODE X_STEP/USAGE=NUMERIC'       ;add x_step
         MDSTCL,'ADD NODE X_MAX/USAGE=NUMERIC'       ;add x_max
         MDSTCL,'ADD NODE Y_MIN/USAGE=NUMERIC'       ;add y_min
         MDSTCL,'ADD NODE Y_STEP/USAGE=NUMERIC'       ;add y_step
         MDSTCL,'ADD NODE Y_MAX/USAGE=NUMERIC'       ;add y_max

         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT'
         MDSTCL,'ADD NODE BEAM_GEOM/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM'
         MDSTCL,'ADD NODE BEAM_APERTUR/USAGE=NUMERIC'       ;add x_bml,y_bml
         MDSTCL,'ADD NODE GRID_AP_DIAM/USAGE=NUMERIC'       ;add grid_ap_diam
         MDSTCL,'ADD NODE X_GRID_FOCUS/USAGE=NUMERIC'       ;add grid_focus node
         MDSTCL,'ADD NODE Y_GRID_FOCUS/USAGE=NUMERIC'       ;add grid_focus node
         MDSTCL,'ADD NODE BEAM_PORT_PHI/USAGE=NUMERIC'   ;add beam_port_phi node
         MDSTCL,'ADD NODE BEAM_PORT/USAGE=TEXT'   ;add beam_port node
         MDSTCL,'ADD NODE R_GRID/USAGE=NUMERIC'   ;add R_grid node
         MDSTCL,'ADD NODE Z_GRID/USAGE=NUMERIC'   ;add Z_grid node
         MDSTCL,'ADD NODE PHI_GRID/USAGE=NUMERIC'   ;add PHI_grid node
         MDSTCL,'ADD NODE R_WALL/USAGE=NUMERIC'   ;add R_wall node
         MDSTCL,'ADD NODE Z_WALL/USAGE=NUMERIC'   ;add Z_wall node
         MDSTCL,'ADD NODE PHI_WALL/USAGE=NUMERIC'   ;add PHI_wall node
         MDSTCL,'ADD NODE TANK_FRONT/USAGE=NUMERIC'   ;add tank_front node
         MDSTCL,'ADD NODE TANK_SIZE/USAGE=NUMERIC'   ;add tank_size node
         MDSTCL,'ADD NODE TANK_DIAM/USAGE=NUMERIC'   ;add tank_diam node
         MDSTCL,'ADD NODE NEUTR_FRONT/USAGE=NUMERIC'   ;add neutr_front_dist node
         MDSTCL,'ADD NODE NEUTR_SIZE/USAGE=NUMERIC'   ;add neutr_size node
         MDSTCL,'ADD NODE NEUTR_DIAM/USAGE=NUMERIC'   ;add neutr_diam node
         MDSTCL,'ADD NODE TANK_MAGNET/USAGE=NUMERIC'   ;add tank_magnet node
         MDSTCL,'ADD NODE MAGNET_SIZE/USAGE=NUMERIC'   ;add magnet_size node
         MDSTCL,'ADD NODE MAGNET_DIAM/USAGE=NUMERIC'   ;add magnet_diam node
         MDSTCL,'ADD NODE TANK_CAL/USAGE=NUMERIC'   ;add tank_cal node

           
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT'
         MDSTCL,'ADD NODE BEAM_PARAM/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.BEAM_PARAM'
         MDSTCL,'ADD NODE BEAM_ATOM/USAGE=TEXT'   ;add beam_atom node 
         MDSTCL,'ADD NODE E_FULL/USAGE=NUMERIC'   ;add e_full node 
         MDSTCL,'ADD NODE E_FRAC/USAGE=NUMERIC'   ;add e_frac node
         MDSTCL,'ADD NODE I_BEAM/USAGE=NUMERIC'   ;add i_beam node
         MDSTCL,'ADD NODE I_FRAC/USAGE=NUMERIC'   ;add i_frac node
         MDSTCL,'ADD NODE I_OPT/USAGE=NUMERIC'   ;add i_opt node
         MDSTCL,'ADD NODE I_DENS_PAR/USAGE=NUMERIC'   ;add i_dens_par node     
         MDSTCL,'ADD NODE XDIV_BML_OPT/USAGE=NUMERIC'   ;add div_bml_opt node
         MDSTCL,'ADD NODE YDIV_BML_OPT/USAGE=NUMERIC'   ;add div_bml_opt node
         MDSTCL,'ADD NODE DIV_DIST_PAR/USAGE=NUMERIC'   ;add div_dist_par node 
           
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT'
         MDSTCL,'ADD NODE BEAM_LIMITER/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.BEAM_LIMITER'
         MDSTCL,'ADD NODE N_LIMITERS/USAGE=NUMERIC'   ;add n_limiters
         MDSTCL,'ADD NODE LIM_TABLE/USAGE=TEXT'       ;add limiters table
         
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT'
         MDSTCL,'ADD NODE PLASMA_GEOM/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.PLASMA_GEOM'
         MDSTCL,'ADD NODE R_MAJOR/USAGE=NUMERIC'       ;add r_major node
         MDSTCL,'ADD NODE Z_MAJOR/USAGE=NUMERIC'       ;add  z_major node
         MDSTCL,'ADD NODE R_MINOR/USAGE=NUMERIC'   ;add r_minor node
         MDSTCL,'ADD NODE ELONG/USAGE=NUMERIC'   ;add elong node
         MDSTCL,'ADD NODE TRIANG_U/USAGE=NUMERIC'   ;add trinag_u node
         MDSTCL,'ADD NODE TRIANG_L/USAGE=NUMERIC'   ;add triang_l node
        
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT'
         MDSTCL,'ADD NODE PLASMA_PARAM/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.PLASMA_PARAM'
         MDSTCL,'ADD NODE MAIN_ION/USAGE=TEXT'       ;add main_ion node
         MDSTCL,'ADD NODE N_IMPUR/USAGE=NUMERIC'       ;add  n_impur node
         MDSTCL,'ADD NODE IMPUR_TABLE/USAGE=TEXT'       ;add impurities table

         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT'
         MDSTCL,'ADD NODE NEUTR_GAS/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.NEUTR_GAS'
         MDSTCL,'ADD NODE TANK_P/USAGE=NUMERIC'   ;add tank_p node
         MDSTCL,'ADD NODE TORUS_P/USAGE=NUMERIC'   ;add torus_p node
         MDSTCL,'ADD NODE DUCT_Z/USAGE=NUMERIC'   ;add duct_p node
         MDSTCL,'ADD NODE DUCT_P/USAGE=NUMERIC'   ;add duct_z node

         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number +'.INPUT'  
         MDSTCL,'ADD NODE N_E_PROF/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.N_E_PROF'

         MDSTCL,'ADD NODE n_e_coord/USAGE=NUMERIC'   ;add n_e_coord node
         MDSTCL,'ADD NODE n_e_raw/USAGE=NUMERIC'   ;add n_e_raw node
         MDSTCL,'ADD NODE n_e_raw_r/USAGE=NUMERIC'   ;add n_e_raw_r node
         MDSTCL,'ADD NODE n_e_raw_er/USAGE=NUMERIC'   ;add n_e_raw_er node
         MDSTCL,'ADD NODE n_e/USAGE=NUMERIC'   ;add n_e node
         MDSTCL,'ADD NODE n_e_r/USAGE=NUMERIC'   ;add n_e_r node
         MDSTCL,'ADD NODE n_e_er/USAGE=NUMERIC'   ;add n_e_er node
 
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT'   
         MDSTCL,'ADD NODE T_E_PROF/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.T_E_PROF'

         MDSTCL,'ADD NODE t_e_coord/USAGE=NUMERIC'   ;add t_e_coord node
         MDSTCL,'ADD NODE t_e_raw/USAGE=NUMERIC'   ;add t_e_raw node
         MDSTCL,'ADD NODE t_e_raw_r/USAGE=NUMERIC'   ;add t_e_raw_r node
         MDSTCL,'ADD NODE t_e_raw_er/USAGE=NUMERIC'   ;add t_e_raw_er node
         MDSTCL,'ADD NODE t_e/USAGE=NUMERIC'   ;add t_e node
         MDSTCL,'ADD NODE t_e_r/USAGE=NUMERIC'   ;add t_e_r node
         MDSTCL,'ADD NODE t_e_er/USAGE=NUMERIC'   ;add t_e_er node

         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT'   
         MDSTCL,'ADD NODE Z_EFF_PROF/USAGE=STRUCTURE'  ;add structure
         MDSTCL,'SET DEFAULT \DNB::TOP.ALCBEAM.'+user_up+'.'+run_number+'.INPUT.Z_Eff_PROF'

         MDSTCL,'ADD NODE z_eff_coord/USAGE=NUMERIC'   ;add z_eff_coord node
         MDSTCL,'ADD NODE z_eff_raw/USAGE=NUMERIC'   ;add z_eff_raw node
         MDSTCL,'ADD NODE z_eff_raw_r/USAGE=NUMERIC'   ;add z_eff_raw_r node
         MDSTCL,'ADD NODE z_eff_raw_er/USAGE=NUMERIC'   ;add z_eff_raw_er node
         MDSTCL,'ADD NODE z_eff/USAGE=NUMERIC'   ;add z_eff node
         MDSTCL,'ADD NODE z_eff_r/USAGE=NUMERIC'   ;add z_eff_r node
         MDSTCL,'ADD NODE z_eff_er/USAGE=NUMERIC'   ;add z_eff_er node
         MDSTCL,'WRITE'                                 ;save the changes to the tree        
       endelse
      ;now save the output data to mdsplus
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.RESULTS.n_beam','build_signal(build_with_units($,$),*,build_with_units($,$),'+$
       'build_with_units($,$),build_with_units($,$),build_with_units($,$))',n_beam,'cm-3',E_beam, 'keV', z_beam,'m',x_beam,'m',y_beam,'m'
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.RESULTS.exc_n2_frac','build_signal(build_with_units($,$),*,build_with_units($,$),'+$
       'build_with_units($,$),build_with_units($,$),build_with_units($,$))',exc_n2_frac,'%',E_beam, 'keV', z_beam,'m',x_beam,'m',y_beam,'m'
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.RESULTS.exc_n3_frac','build_signal(build_with_units($,$),*,build_with_units($,$),'+$
       'build_with_units($,$),build_with_units($,$),build_with_units($,$))',exc_n3_frac,'%',E_beam, 'keV', z_beam,'m',x_beam,'m',y_beam,'m'
       if vel_dis_type eq 0 then begin
         MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.RESULTS.vel_vec_x',"$",vel_vec_x
         MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.RESULTS.vel_vec_y',"$",vel_vec_y
         MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.RESULTS.vel_vec_coef',"$",vel_vec_coef
       endif    
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.time_interv',"$",[t1,t2]
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.time_stamp',"$",[systime(),'ALCBEAM (ver. '+alcbeam_ver+')']
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.div_type',"$",strtrim(div_type_names(div_type),2)
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.atten_type',"$",strtrim(atten_type_names(atten_type),2)
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.vel_dis_type',"$",strtrim(vel_dis_names(vel_dis_type),2)
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.stop_plsm_cs',"$",strtrim(stop_plasma_type_names(stop_plasma_type),2)
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.exc_plsm_cs',"$",strtrim(exc_plasma_type_names(exc_plasma_type),2)
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.CODE_GRID.z_min',"$",code_grid_arr.z(0)
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.CODE_GRID.z_step1',"$",code_grid_arr.z(1)
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.CODE_GRID.z_mid',"$",code_grid_arr.z(2)
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.CODE_GRID.z_step2',"$",code_grid_arr.z(3)
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.CODE_GRID.z_max',"$",code_grid_arr.z(4)
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.CODE_GRID.x_min',"$",code_grid_arr.x(0)
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.CODE_GRID.x_step',"$",code_grid_arr.x(1)
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.CODE_GRID.x_max',"$",code_grid_arr.x(2)
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.CODE_GRID.y_min',"$",code_grid_arr.y(0)
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.CODE_GRID.y_step',"$",code_grid_arr.y(1)
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.CODE_GRID.y_max',"$",code_grid_arr.y(2)

       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.x_grid_focus',"$",x_grid_focus
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.y_grid_focus',"$",y_grid_focus
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.beam_port_phi',"$",beam_port_phi
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.beam_port',"$",beam_port

       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.R_grid',"$",R_grid
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.Z_grid',"$",z_grid
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.Phi_grid',"$",phi_grid
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.R_wall',"$",R_wall
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.Z_wall',"$",z_wall
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.Phi_wall',"$",phi_wall
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.tank_front',"$",tank_front_dist
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.tank_size',"$",tank_size
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.tank_diam',"$",tank_diam
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.neutr_size',"$",neutr_size
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.neutr_front',"$",neutr_front_dist
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.neutr_diam',"$",neutr_diam
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.tank_magnet',"$",tank_magnet_dist
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.magnet_size',"$",magnet_size
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.magnet_diam',"$",magnet_diam,neutr_front_dist       
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.tank_cal',"$",tank_cal_dist
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.beam_apertur',"$",[[x_bml],[y_bml]]
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_GEOM.grid_ap_diam',"$",grid_ap_diam

       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.NEUTR_GAS.tank_p',"$",tank_pressure
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.NEUTR_GAS.torus_p',"$",torus_pressure
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.NEUTR_GAS.duct_p',"$",duct_pressure
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.NEUTR_GAS.duct_z',"$",duct_pressure_loc

       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_PARAM.beam_atom',"$",beam_atom
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_PARAM.e_full',"$",e_full
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_PARAM.e_frac',"$",e_frac
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_PARAM.i_beam',"$",i_beam
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_PARAM.i_frac',"$",i_frac
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_PARAM.i_opt',"$",i_opt
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_PARAM.i_dens_par',"$",i_dens_par
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_PARAM.xdiv_bml_opt',"$",x_div_bml_opt
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_PARAM.ydiv_bml_opt',"$",y_div_bml_opt
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_PARAM.div_dist_par',"$",div_dist_par
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.PLASMA_GEOM.r_major',"$",r_major
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.PLASMA_GEOM.z_major',"$",z_major
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.PLASMA_GEOM.r_minor',"$",r_minor
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.PLASMA_GEOM.elong',"$",elong
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.PLASMA_GEOM.triang_u',"$",triang_upper
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.PLASMA_GEOM.triang_l',"$",triang_lower
 
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.PLASMA_PARAM.main_ion',"$",main_ion
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.PLASMA_PARAM.n_impur',"$",n_impur
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.PLASMA_PARAM.impur_table',"$",impur_table

       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_LIMITER.N_LIMITERS',"$",n_limiters  
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.BEAM_LIMITER.LIM_TABLE',"$",limiters_table
      
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.N_E_PROF.N_E_COORD',"$",n_e_coord
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.N_E_PROF.N_E_RAW',"$",n_e_raw
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.N_E_PROF.N_E_RAW_R',"$",n_e_raw_r
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.N_E_PROF.N_E_RAW_ER',"$",n_e_raw_err
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.N_E_PROF.N_E',"$",n_e
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.N_E_PROF.N_E_R',"$",n_e_r
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.N_E_PROF.n_E_ER',"$",n_e_err

       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.T_E_PROF.T_E_COORD',"$",t_e_coord
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.T_E_PROF.T_E_RAW',"$",t_e_raw
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.T_E_PROF.T_E_RAW_R',"$",t_e_raw_r
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.T_E_PROF.T_E_RAW_ER',"$",t_e_raw_err
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.T_E_PROF.T_E',"$",t_e
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.T_E_PROF.T_E_R',"$",t_e_r
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.T_E_PROF.T_E_ER',"$",t_e_err

       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.Z_Eff_PROF.Z_Eff_COORD',"$",z_eff_coord
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.Z_Eff_PROF.Z_Eff_RAW',"$",z_eff_raw
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.Z_Eff_PROF.Z_Eff_RAW_R',"$",z_eff_raw_r
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.Z_Eff_PROF.Z_Eff_RAW_ER',"$",z_eff_raw_err
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.Z_Eff_PROF.Z_Eff',"$",z_eff
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.Z_Eff_PROF.Z_Eff_R',"$",z_eff_r
       MDSPUT,'\dnb::top.alcbeam.'+user_up+'.'+run_number+'.INPUT.Z_Eff_PROF.Z_Eff_ER',"$",z_eff_err
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Shot: '+strtrim(string(Shot),1)+', selected run: '+user_up+'.'+run_number+', Type: '+strtrim(div_type_names(div_type),2)+', The results were saved to MDSPLUS']], Set_text_top_line=n_elements(status_tx)-4              
     endif else begin
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : This shot does not exist in MDSPLUS. Data was not saved.'+' *** Shot #'+strtrim(string(Shot),1)]], Set_text_top_line=n_elements(status_tx)-4
     endelse

          
     endif
     if save_output_type eq 1 then begin
       save_output_to_file
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Selected run: '+user_up+'.'+run_number+', Type: '+strtrim(div_type_names(div_type),2)+', The results were saved to output file']], Set_text_top_line=n_elements(status_tx)-4
     endif
     ;update slider values   
     prepare_sliders,ev.top
     if st_err eq 0 then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plotting Sliders are updated.']], Set_text_top_line=n_elements(status_tx)-4
     endif else begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error occured during prepare_sliders procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
     endelse
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plot_Button'),Sensitive=1
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Export_Button'),Sensitive=1
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plot_Choice_Droplist'),Sensitive=1
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Calc_Base'),Sensitive=1
     ;Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Preview_Data_Base'),Sensitive=0
     ;Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Save_Param_Button'),Sensitive=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Preview_Arr_Base'),Sensitive=1
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Ready_Button'), Set_Value='FINISH RUN'
     WIDGET_CONTROL,Widget_Info(ev.top, FIND_BY_UNAME='Result_Plot') , GET_VALUE=drawID
     Wset,drawID
     Erase

   end
   ;---------------------Construct Data Button
   Widget_Info(ev.id, FIND_BY_UNAME='Construct_Data_Button'): begin
    st_err=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'), Get_Value=shot
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'), Get_Value=beam
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_1'), Get_Value=t1_txt
     t1=float(t1_txt)
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_2'), Get_Value=t2_txt
     t2=float(t2_txt)
     ;construct x_beam, y_beam, z_beam from the code_grid_arr parameters
     make_beam_grid
     if st_err eq 0 then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Code grid was constructed successfully']], Set_text_top_line=n_elements(status_tx)-4
     endif else begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error occured during make_lim_arr procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       return
     endelse
     ;construction of the 3D flux_surface_arr
     if strpos(strtrim(beam,2),'ALCATOR') eq -1 and flux_surf_arr_type eq 2 then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : EFIT flux surfaces can only be used for ALCATOR C-Mod shots. Please change the source for Flux surface reconstruction.']], Set_text_top_line=n_elements(status_tx)-4
       return
     endif 
     make_flux_surf
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error occured during make_flux_surf procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       return
     endif
     ;construction of the 3D electron density array
     make_n_e_arr
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error occured during make_n_e_arr procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       return
     endif
     ;construction of the 3D electron temperature array
     make_t_e_arr
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error occured during make_t_e_arr procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       return
     endif
     ;construction of the 3D z_eff array
     make_z_eff_arr
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error occured during make_z_eff_arr procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       return
     endif
     ;construction of the 3D neutral gas density array
     make_gas_arr
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error occured during make_gas_arr procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       return
     endif
     ;construction of the 3D gas beam stopping cross sections array
     make_stop_gas_arr
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Error occured during make_stop_gas_arr procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       return
     endif
     ;construction of the 3D Beam limiters array
     make_lim_arr
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error occured during make_lim_arr procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       return
     endif
     ;construction of the 3D plasma beam stopping cross sections array
     make_stop_cs_arr
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error occured during make_stop_cs_arr procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       return
     endif
     ;construction of the 3D plasma beam excitation fractions n=2,3 arrays
     make_exc_arr
     if st_err then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error occured during make_exc_arr procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       return
     endif
     ;update slider values   
     prepare_sliders,ev.top
     if st_err eq 0 then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plotting Sliders are updated.']], Set_text_top_line=n_elements(status_tx)-4
     endif else begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error occured during prepare_sliders procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
       st_err=0
       return
     endelse
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Ready to CALC the code or Preview the constructed data']], Set_text_top_line=n_elements(status_tx)-4
   Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Calc_Base'),Sensitive=1
   ;Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Preview_Data_Base'),Sensitive=0
   Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Construct_Base'),Sensitive=0
   Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Preview_Arr_Base'),Sensitive=1
   end 
   ;---------------------Load Data Button
   Widget_Info(ev.id, FIND_BY_UNAME='Load_Data_Button'): begin
     st_err=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'), Get_Value=shot
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'), Get_Value=beam
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_1'), Get_Value=t1_txt
     t1=float(t1_txt)
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_2'), Get_Value=t2_txt
     t2=float(t2_txt)
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_1'),Editable=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_2'),Editable=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'),Editable=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'),Editable=0
     
     if general_type eq 1 then begin
       load_general_file
       if st_err eq 0 then begin
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'), Set_Value=shot
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_1'), Set_Value=strtrim(string(t1,format='(F10.3)'),2)
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Time_Interval_Text_2'), Set_Value=strtrim(string(t2,format='(F10.3)'),2)
         Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'), Set_Value=beam
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Beam Type, Shot number, Time interval were loaded successfully from file.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD General procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return
       endelse
     endif
     if beam_geom_type eq 0 then begin
       load_beam_geometry
       if st_err eq 0 then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Beam Geometry data was loaded successfully.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Beam Geometry procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return  
       endelse
     endif
     if beam_geom_type eq 1 then begin
       load_beam_geometry_file
       if st_err eq 0 then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Beam Geometry data was loaded successfully from file.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Beam Geometry procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return
       endelse
     endif     
     if beam_geom_type eq 2 then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Beam Geometry data was NOT loaded (previous value retained).']], Set_text_top_line=n_elements(status_tx)-4
     endif 
     if beam_lim_type eq 0 then begin
       load_beam_lim
       if st_err eq 0 then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Beam Limiters data was loaded successfully.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Beam Limiters procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return
       endelse
     endif
     if beam_lim_type eq 1 then begin
       load_beam_lim_file
       if st_err eq 0 then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Beam Limiters data was loaded successfully from file.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Beam Limiters procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return
       endelse
     endif     
     if beam_lim_type eq 2 then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Beam Limiters data was NOT loaded (previous value retained).']], Set_text_top_line=n_elements(status_tx)-4
     endif      
     if beam_param_type eq 0 then begin
       load_beam_param
       if st_err eq 0 then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Beam Parameters were loaded successfully.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Beam Parameters procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif
     if beam_param_type eq 1 then begin
       load_beam_param_file
       if st_err eq 0 then begin      
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Beam Parameters were loaded successfully from file.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Beam Parameters procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif
     if beam_param_type eq 2 then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Beam Parameters were NOT loaded (previous value retained).']], Set_text_top_line=n_elements(status_tx)-4
     endif
     if plasma_geom_type eq 0 then begin
       load_plasma_geom
       if st_err eq 0 then begin
         flux_surf_names=[['Miller equilib'],['Hakkarainen eq'],['EFIT (MDSPLUS)      '],['skip']]
         flux_surf_arr_type=2
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plasma Geometry data was loaded successfully.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Plasma Geometry procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif
     if plasma_geom_type eq 1 then begin
       load_plasma_geom_efit_file
       if st_err eq 0 then begin
         flux_surf_names=[['Miller equilib'],['Hakkarainen eq'],['EFIT (EQDSK files)  '],['skip']]
         flux_surf_arr_type=2
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plasma Geometry data was loaded successfully.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Plasma Geometry procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif
     if plasma_geom_type eq 2 then begin
       load_plasma_geom_vmec_file
       if st_err eq 0 then begin
         flux_surf_names=[['VMEC (wout file)  '],['skip']]
         flux_surf_arr_type=0
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plasma Geometry data was loaded successfully.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Plasma Geometry procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif
     if plasma_geom_type eq 3 then begin
       load_plasma_geom_file
       if st_err eq 0 then begin       
         flux_surf_arr_type=0
         flux_surf_names=[['Miller equilib'],['Hakkarainen eq'],['skip                ']]
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plasma Geometry data was loaded successfully from file.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Plasma Geometry procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif     
     if plasma_geom_type eq 4 then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plasma Geometry data was NOT loaded (previous value retained).']], Set_text_top_line=n_elements(status_tx)-4
     endif     
     if plasma_param_type eq 0 then begin
       load_plasma_param
       if st_err eq 0 then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plasma Parameters data was loaded successfully.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Plasma Parameters procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif     
     if plasma_param_type eq 1 then begin
       load_plasma_param_file
       if st_err eq 0 then begin       
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plasma Parameters data was loaded successfully from file.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Plasma Parameters procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif     
     if plasma_param_type eq 2 then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plasma Parameters data was NOT loaded (previous value retained).']], Set_text_top_line=n_elements(status_tx)-4
     endif  
     if ne_type eq 0 then begin
       quickfit_ne
       if st_err eq 0 then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Electron Density data was loaded successfully from QuickFit.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Electron Density procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif
     if ne_type eq 1 then begin
       dens_e
       if st_err eq 0 then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Electron Density data was loaded successfully.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Electron Density procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif   
     if ne_type eq 2 then begin
       get_ne_fits,ne_file
       if st_err eq 0 then begin       
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Electron density data was loaded successfully from TS data.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Electron Density procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif
     if ne_type eq 3 then begin
       get_ne_file
       if st_err eq 0 then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Electron Density data was loaded successfully from file.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Electron Density procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif     
     if ne_type eq 4 then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Electron Density data was NOT loaded (previous value retained).']], Set_text_top_line=n_elements(status_tx)-4
     endif
     if te_type eq 0 then begin
       quickfit_te
       if st_err eq 0 then begin 
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Electron Temperature data was loaded successfully from QuickFit.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Electron Temperature procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif
     if te_type eq 1 then begin
       temp_e
       if st_err eq 0 then begin 
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Electron Temperature data was loaded successfully from TS data.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Electron Temperature procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif
      if te_type eq 2 then begin
       get_ece_temp
       if st_err eq 0 then begin 
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Electron Temperature data was loaded successfully from ECE data.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Electron Temperature procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif    
     if te_type eq 3 then begin
       get_te_fits,te_file
       if st_err eq 0 then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Electron Temperature data was loaded successfully.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Electron Temperature procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif
     if te_type eq 4 then begin
       get_te_file
       if st_err eq 0 then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Electron Temperature data was loaded successfully from file.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Electron Temperature procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif
     if te_type eq 5 then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Electron Temperature data was NOT loaded (previous value retained).']], Set_text_top_line=n_elements(status_tx)-4
     endif   
    if z_eff_type eq 0 then begin
       get_z_eff
       if st_err eq 0 then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Z_eff data was loaded successfully.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Z_eff procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
    endif
    if z_eff_type eq 1 then begin
       get_z_eff
       if st_err eq 0  then begin 
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Z_eff data was loaded successfully.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Z_eff procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
    endif    
    if z_eff_type eq 2 then begin
       get_z_eff
       if st_err eq 0  then begin 
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Z_eff data was set to constant successfully.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Z_eff procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
    endif  
    if z_eff_type eq 3 then begin
       get_z_eff
       if st_err eq 0  then begin 
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Z_eff data was loaded successfully from z_neo_ave file.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Z_eff procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
    endif  
    if z_eff_type eq 4 then begin
       get_z_eff_file
       if st_err eq 0 then begin 
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Z_eff data was loaded successfully from file.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Z_eff procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif 
    if z_eff_type eq 5 then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Z_eff data was NOT loaded (previous value retained).']], Set_text_top_line=n_elements(status_tx)-4
     endif       
     if gas_type eq 0 then begin
       load_neutral_gas
       if st_err eq 0  then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Neutral Gas data was loaded successfully.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Neutral Gas procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif
     if gas_type eq 1 then begin
       load_neutral_gas_file
       if st_err eq 0  then begin       
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Neutral Gas data was loaded successfully from file.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Neutral Gas procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif
     if gas_type eq 2 then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Neutral Gas data was NOT loaded (previous value retained).']], Set_text_top_line=n_elements(status_tx)-4
     endif     
     if grid_type eq 0 then begin
       load_beam_grid
       if st_err eq 0  then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Code Grid/Mesh data was loaded successfully.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Code Grid/Mesh procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif
     if grid_type eq 1 then begin
       load_beam_grid_file
       if st_err eq 0 then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Code Grid/Mesh data was loaded successfully from file.']], Set_text_top_line=n_elements(status_tx)-4
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during LOAD Code Calculation Grid procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         return    
       endelse
     endif    
     if grid_type eq 2 then begin
       Widget_control, status_wid, Get_Value=status_tx
       Widget_Control, status_wid,$
       Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Code Grid/Mesh data was NOT loaded (previous value retained).']], Set_text_top_line=n_elements(status_tx)-4
     endif
     Widget_control, status_wid, Get_Value=status_tx
     Widget_Control, status_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Ready to Construct the code arrays or Preview the loaded data.']], Set_text_top_line=n_elements(status_tx)-4
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Construct_Base'),Sensitive=1
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Load_Base'),Sensitive=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Preview_Data_Base'),Sensitive=1
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Save_Param_Button'),Sensitive=1
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Export_Button'),Sensitive=1
     ;Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Preview_Arr_Base'),Sensitive=0
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Calc_Base'),Sensitive=0
   end 
   ;-----------------------Smooth button
   Widget_Info(ev.id, FIND_BY_UNAME='Smooth_Button'): begin
     st_err=0
     plot_val=Widget_Info(Widget_Info(ev.top, FIND_BY_UNAME='Preview_Data_Droplist'), /Droplist_Select)
     Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Smooth_Text'), Get_Value=sm_coef_txt
     sm_coef=10^(-(13.0-float(sm_coef_txt)))
     if plot_val eq 2 then begin
       smooth_ne,sm_coef
       if st_err then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during Smooth procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         st_err=0
         return    
       endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Data was smoothed, Smoothed data is saved. It will be used for array construction.']], Set_text_top_line=n_elements(status_tx)-4 
       endelse
       plot_input,ev.top
       endif
     if plot_val eq 3 then begin
       smooth_te,sm_coef
       if st_err then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during Smooth procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         st_err=0
         return    
      endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Data was smoothed, Smoothed data is saved. It will be used for array construction.']], Set_text_top_line=n_elements(status_tx)-4 
       endelse
       plot_input,ev.top
     endif
     if plot_val eq 4 then begin
       smooth_z_eff,sm_coef
       if st_err then begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error during Smooth procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
         st_err=0
         return    
      endif else begin
         Widget_control, status_wid, Get_Value=status_tx
         Widget_Control, status_wid,$
         Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Data was smoothed, Smoothed data is saved. It will be used for array construction.']], Set_text_top_line=n_elements(status_tx)-4 
       endelse       
       plot_input,ev.top
     endif 
   end
   ;---------------------Prepare ALCBEAM Driver
    Widget_Info(ev.id, FIND_BY_UNAME='Show_Driver_Button'): begin
    st_err=0
    Widget_Control, ev.id, Get_Value=button_val
    if button_val eq 'Prepare ALCBEAM Driver' then begin 
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Show_Driver_Button'), Set_Value='Back to NORMAL mode' 
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Read_Base'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Param_Base'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Run_Base'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_B_Label'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_B_Start'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_B_End'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='X_B_Label'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='X_B_Start'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='X_B_End'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Y_B_Label'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Y_B_Start'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Y_B_End'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Label_top'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Label_1'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Check_1'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Label_2'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Check_2'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Label_3'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Check_3'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Label_4'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Check_4'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Label_5'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Check_5'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Label_bot'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='exc_B_Label_bot'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='exc_B_Check'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Scale_Check'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plot_Button'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Export_Button'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plot_Choice_Droplist'),Sensitive=0
      Widget_Control,Widget_Info(ev.top, FIND_BY_UNAME='Result_Plot') , GET_VALUE=drawID
      wset,drawID
      Erase

      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'),Editable=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'),Editable=0
      show_driver_window,ev.top 
    endif else begin
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Show_Driver_Button'), Set_Value='Prepare ALCBEAM Driver' 
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Read_Base'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Param_Base'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Run_Base'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_B_Label'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_B_Start'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_B_End'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Z_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='X_B_Label'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='X_B_Start'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='X_B_End'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='X_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Y_B_Label'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Y_B_Start'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Y_B_End'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Y_B_Slider'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Label_top'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Label_1'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Check_1'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Label_2'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Check_2'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Label_3'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Check_3'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Label_4'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Check_4'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Label_5'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Check_5'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='E_B_Label_bot'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='exc_B_Label_top'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='exc_B_Label_bot'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='exc_B_Check'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Scale_Check'),Sensitive=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plot_Button'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Export_Button'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Plot_Choice_Droplist'),Sensitive=0
      ;update slider values (turned off)  
      ;prepare_sliders,ev.top
      ;if st_err eq 0 then begin
      ;  Widget_control, status_wid, Get_Value=status_tx
      ;  Widget_Control, status_wid,$
      ;  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Plotting Sliders are updated.']], Set_text_top_line=n_elements(status_tx)-4
      ;endif else begin
      ;  Widget_control, status_wid, Get_Value=status_tx
      ;  Widget_Control, status_wid,$
      ;  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error occured during prepare_sliders procedure. Please review previous message.']], Set_text_top_line=n_elements(status_tx)-4
      ;  st_err=0
      ; return
      ;endelse
      Widget_control, status_wid, Get_Value=status_tx
      Widget_Control, status_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : ALCBEAM Driver was cancelled. Returned to normal mode.']], Set_text_top_line=n_elements(status_tx)-4
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Ready_Button'), Set_Value='PREPARE A RUN'
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Load_Base'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Construct_Base'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Preview_Arr_Base'),Sensitive=0
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Calc_Base'),Sensitive=0
  
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Shot_Number_Text'),Editable=1
      Widget_Control, Widget_Info(ev.top, FIND_BY_UNAME='Beam_Text'),Editable=1
    endelse
    end
  else:
 endcase
end

;---------------------------------------------------------------------------------------------------------------------------------------
;This is the driver procedure, which runs ALCBEAM for multiple times
;---------------------------------------------------------------------------------------------------------------------------------------
Pro run_driver, Main_Base
;the following commonblock contains the id of the main widget
common main_widget,widget_id, driver_id
;The following common block is used to hold the array of beam intervals
common beam_intervals,b_t1,b_t2
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir,adas_dir
;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration
;calculation 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,$
ne_type,ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
;The following common block contains some of the settings of how to
;run the beam attenuation and penetration calculation.
common run_settings, div_type,div_type_names,atten_type, atten_type_names, vel_dis_type,vel_dis_names,save_output_type,save_output_file
;The following common block contains some of the settings of "saving
;run settings to the file"
common settings_file, save_set_file
;The following common block is used to transfer the pointer to the status window and availability states of each data set
common status, status_wid,error_catch,st_err

;Error handler---------------------------------------
driver_wid=widget_info(driver_id,FIND_BY_UNAME='Driver_Status_Text')
if error_catch then begin
   Catch,error_status
   if error_status ne 0 then begin
     err_msg=strjoin(strsplit(!Error_State.MSG,string(10B),/extract))
     Widget_control, driver_wid, Get_Value=status_tx
     Widget_Control, driver_wid,$
     Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : IDL Error. Error Status: '+strtrim(string(error_status),2)+', Error message: '+err_msg]], Set_text_top_line=n_elements(status_tx)-4
     catch,/cancel
     st_err=1
     return
   endif
 endif
;-----------------------------------------------------
Widget_Control, Widget_Info(widget_id, FIND_BY_UNAME='Shot_Number_Text'), Get_Value=shot
Widget_Control, Widget_Info(widget_id, FIND_BY_UNAME='Param_Base'),Sensitive=0
Widget_Control, Widget_Info(driver_id, FIND_BY_UNAME='Run_Driver_Button'), Get_Value=driver_val
Widget_Control, Widget_Info(driver_id, FIND_BY_UNAME='Run_Driver_Button'), Set_Value='Pause Driver'
Widget_Control, Widget_Info(driver_id, FIND_BY_UNAME='Driver_Quit_Button'), Sensitive=0
Widget_Control, Widget_Info(widget_id, FIND_BY_UNAME='Beam_Text'), Get_Value=beam
Widget_Control, Widget_Info(driver_id, FIND_BY_UNAME='Driver_Filename_Text'),get_value=save_set_file
Widget_Control, Widget_Info(driver_id, FIND_BY_UNAME='Driver_Shots_Text'),get_value=driver_shots
;generate shot list from driver_shots
shot_list=long(0)
extr1=strsplit(driver_shots,', ',/extract)
for k=0, n_elements(extr1)-1 do begin
  extr2=strsplit(extr1(k),'- ',/extract)
  if n_elements(extr2) eq 1 then shot_list=long([shot_list,long(extr2(0))])
  if n_elements(extr2) eq 2 then shot_list=long([shot_list,long(extr2(0))+long(make_array(long(extr2(1))-long(extr2(0))+1,/index))])
endfor
shot_list=shot_list(1:*)
;-------------------------------------

Widget_control, driver_wid, Get_Value=status_tx
if driver_val ne 'Continue' then Widget_Control, driver_wid,$
Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : ALCBEAM Driver was activated.']], Set_text_top_line=n_elements(status_tx)-4
if driver_val eq 'Continue' then Widget_Control, driver_wid,$
Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : ALCBEAM Driver was resumed.']], Set_text_top_line=n_elements(status_tx)-4
Widget_control, driver_wid, Get_Value=status_tx
if driver_val ne 'Continue' then Widget_Control, driver_wid,$
Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+$
' : Driver has accepted '+strtrim(string(n_elements(shot_list)),2)+' shots for ALCBEAM analysis.']], Set_text_top_line=n_elements(status_tx)-4

Widget_Control, Widget_Info(widget_id, FIND_BY_UNAME='Time_Interval_Text_1'), Get_Value=t1_val
t1=float(t1_val)
Widget_Control, Widget_Info(widget_id, FIND_BY_UNAME='Time_Interval_Text_2'), Get_Value=t2_val
t2=float(t2_val)
load_set_from_file
if st_err ne 1 then begin
  general_type=2 ;do not need to reload shot number and beam label
  ; loop on shots
  l1=0
  if driver_val eq 'Continue' then l1=(locate(shot_list,long(shot)))(0)
  for l=l1, n_elements(shot_list)-1 do begin
  ;----------------------------------------
  Widget_Control, Widget_Info(widget_id, FIND_BY_UNAME='Shot_Number_Text'), Set_Value=strtrim(string(shot_list(l)),2)
  ;adjust TS fits file names
  ;--------------------------------------------
  if ne_type eq 2 then begin
    ne_file_new=strsplit(ne_file,'fits_',/extract,/regex)
    ne_file=ne_file_new(0)+'fits_'+strtrim(string(shot),2)+'.save' 
  endif
  if te_type eq 3 then begin
    te_file_new=strsplit(te_file,'fits_',/extract,/regex)
    te_file=te_file_new(0)+'fits_'+strtrim(string(shot),2)+'.save' 
  endif
  if z_eff_type eq 3 then begin
    z_eff_file_new=strsplit(z_eff_file,'z_neo_ave_',/extract,/regex)
    z_eff_file=z_eff_file_new(0)+'z_neo_ave_'+strtrim(string(shot),2)+'.sav' 
  endif  
  ;-------------------------------------------
  b_t1=t1
  b_t2=t2
  f1=0
  if beam eq 'DNBI_ALCATOR' then begin
    Widget_control, driver_wid, Get_Value=status_tx
    Widget_Control, driver_wid,$
    Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Shot: '+strtrim(string(shot_list(l)),2)]], Set_text_top_line=n_elements(status_tx)-4
    shot=shot_list(l)
    find_beam_intervals
    if driver_val eq 'Continue' then dud=min(abs(b_t1-t1(0)),f1)
    for i=f1, n_elements(b_t1)-1 do begin
      t1=b_t1(i)
      t2=b_t2(i)
      Widget_control, driver_wid, Get_Value=status_tx
      status_tx=status_tx(0:n_elements(status_tx)-2)
      Widget_Control, driver_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Shot: '+strtrim(string(shot_list(l)),2)+', time: '+strtrim(string(t1,format='(F10.3)'),2)+'-'+$
      strtrim(string(t2,format='(F10.3)'),2)+' sec. Press Pause Driver to pause.']], Set_text_top_line=n_elements(status_tx)-4
      run=i+1
      Widget_Control, Widget_Info(widget_id, FIND_BY_UNAME='Run_Number_Text'), set_value=strtrim(string(run,format='(I2)'),2)
      ;adjust save output file name-------------------------------
      dud=strsplit(save_output_file,'_',/extract)
      dud1=dud(n_elements(dud)-1)
      dud2=strmid(save_output_file,0,strlen(save_output_file)-strlen(dud1)-1)
      save_output_file=dud2+'_'+strtrim(string(run),2)+'.abo'
      ;-------------------------------------------------------
      save_output_file=file_dir+'/'+beam+'_'+strtrim(string(run),2)+'.abo'
      Widget_Control, Widget_Info(widget_id, FIND_BY_UNAME='Time_Interval_Text_1'), set_value=strtrim(string(t1,format='(F10.3)'),2)
      Widget_Control, Widget_Info(widget_id, FIND_BY_UNAME='Time_Interval_Text_2'), set_value=strtrim(string(t2,format='(F10.3)'),2)  
      ev={id:Widget_Info(widget_id, FIND_BY_UNAME='Load_Data_Button'),top:widget_id}
      Main_Widget_event,ev
      if st_err then begin
        Widget_control, driver_wid, Get_Value=status_tx
        Widget_Control, driver_wid,$
        Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error in loading procedure: ALCBEAM Driver has stopped']], Set_text_top_line=n_elements(status_tx)-4
        Widget_Control, Widget_Info(driver_id, FIND_BY_UNAME='Driver_Quit_Button'), Sensitive=1
        st_err=0 
        return
      endif
      ev={id:Widget_Info(widget_id, FIND_BY_UNAME='Construct_Data_Button'),top:widget_id}
      Main_Widget_event,ev
      if st_err then begin
        Widget_control, driver_wid, Get_Value=status_tx
        Widget_Control, driver_wid,$
        Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error in construction procedure: ALCBEAM Driver has stopped']], Set_text_top_line=n_elements(status_tx)-4
        Widget_Control, Widget_Info(driver_id, FIND_BY_UNAME='Driver_Quit_Button'), Sensitive=1
        st_err=0 
        return
      endif   
      ev={id:Widget_Info(widget_id, FIND_BY_UNAME='Run_Button'),top:widget_id}
      Main_Widget_event,ev
      if st_err eq 1 then begin
        Widget_control, driver_wid, Get_Value=status_tx
        Widget_Control, driver_wid,$
        Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Error in run procedure: ALCBEAM Driver has stopped']], Set_text_top_line=n_elements(status_tx)-4
        Widget_Control, Widget_Info(driver_id, FIND_BY_UNAME='Driver_Quit_Button'), Sensitive=1
        st_err=0 
        return
      endif        
      res=Widget_Event(Widget_Info(driver_id, FIND_BY_UNAME='Run_Driver_Button'),/nowait)
      if res.ID eq Widget_Info(driver_id, FIND_BY_UNAME='Run_Driver_Button') or st_err eq 3 then begin
        Widget_control, status_wid, Get_Value=status_tx
        status_tx=status_tx(0:n_elements(status_tx)-2)
        Widget_Control, status_wid,$
        Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : ALCBEAM run was cancelled']], Set_text_top_line=n_elements(status_tx)-4
        Widget_control, driver_wid, Get_Value=status_tx
        status_tx=status_tx(0:n_elements(status_tx)-2)
        Widget_Control, driver_wid,$
        Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : ALCBEAM Driver was interrupted. Press Continue to continue.']], Set_text_top_line=n_elements(status_tx)-4
        Widget_Control, Widget_Info(driver_id, FIND_BY_UNAME='Run_Driver_Button'), Set_Value='Continue'
        Widget_Control, Widget_Info(driver_id, FIND_BY_UNAME='Driver_Quit_Button'), Sensitive=1
        Widget_Control, Widget_Info(widget_id, FIND_BY_UNAME='Param_Base'),Sensitive=1
        Widget_Control, Widget_Info(widget_id, FIND_BY_UNAME='Time_Interval_Text_1'),Editable=1
        Widget_Control, Widget_Info(widget_id, FIND_BY_UNAME='Time_Interval_Text_2'),Editable=1            
        st_err=0 
        return
      endif 
      Widget_control, driver_wid, Get_Value=status_tx
      status_tx=status_tx(0:n_elements(status_tx)-2)
      Widget_Control, driver_wid,$
      Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : Shot: '+strtrim(string(shot_list(l)),2)+'. Done.']], Set_text_top_line=n_elements(status_tx)-4 
   endfor   
  endif else begin
    Widget_control, driver_wid, Get_Value=status_tx
    Widget_Control, driver_wid,$
    Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : ALCBEAM Driver can currently be used only for DNBI_ALCATOR']], Set_text_top_line=n_elements(status_tx)-4
    Widget_Control, Widget_Info(driver_id, FIND_BY_UNAME='Driver_Quit_Button'), Sensitive=1 
    st_err=1
    return
  endelse
  ;-------------------------------------------------------------------
  endfor
  Widget_control, driver_wid, Get_Value=status_tx
  Widget_Control, driver_wid,$
  Set_Value=[status_tx,[strtrim(string(Fix(status_tx(n_elements(status_tx)-1))+1),1)+' : ALCBEAM Driver has finished']], Set_text_top_line=n_elements(status_tx)-4
  Widget_Control, Widget_Info(driver_id, FIND_BY_UNAME='Run_Driver_Button'), Set_Value='RUN Driver'
  Widget_Control, Widget_Info(driver_id, FIND_BY_UNAME='Driver_Quit_Button'), Sensitive=1
endif


end

;Some external functions (only for C-Mod)
@/usr/local/rsi/idl_6.3/lib/mean.pro
@/home/bespam/quickfit/quick_fit.pro
@/usr/local/mdsplus/idl/mdsvalue.pro
@/usr/local/mdsplus/idl/mdsput.pro
@/usr/local/mdsplus/idl/mdsopen.pro
@/usr/local/mdsplus/idl/mdstcl.pro
;---------------------------------------------------------------------------------------------------------------------------------------
;This is the MAIN procedure
;---------------------------------------------------------------------------------------------------------------------------------------
pro alcbeam
;The following common block contains the hostname
common hostname, hostname
;The following common block which contains the settings for the
;ALCBEAM driver
common driver_settings, driver_shots,driver_set_file, driver_time
;the following commonblock contains the id of the main widget
common main_widget,widget_id, driver_id
; The following common block contains general parameters: which user,
; what beam, what shot and time interval
common general, alcbeam_ver,user,beam,shot,t1,t2,run,cur_dir,file_dir,adas_dir
;The following common block contains the parameter which data is
;curently plotted
common draw_request,draw_req
;The following common block contains X,Y,Z coordinate arrays used for the beam
 ;calculation grid and output 3D arrays of the beam density and excitation fracitons
common beam_data,n_beam,e_beam,z_beam,x_beam,y_beam,exc_n2_frac,exc_n3_frac,vel_vec_x,vel_vec_y,vel_vec_coef
;The following common block contains the parameters which describe the geometry
;and position of the beam tank and all components needed for calculation.
common beam_geometry, x_bml,y_bml,grid_ap_diam,x_grid_focus,y_grid_focus,beam_port,beam_port_phi,r_grid, z_grid, phi_grid, r_wall, z_wall, phi_wall, tank_front_dist,tank_size,neutr_size,tank_magnet_dist,magnet_size,tank_cal_dist,tank_diam,neutr_diam,magnet_diam,neutr_front_dist
;The following common block contains some of the settings for loading of
;the input data used for the beam attenuation and penetration
;calculation 
common load_settings, load_set_def,load_choice,general_type, general_file, beam_geom_type,beam_geom_file,beam_lim_type,beam_lim_file,beam_param_type,beam_param_file,ne_type,$
ne_file,te_type,te_file,z_eff_type,z_eff_file,plasma_geom_type,plasma_geom_file,gas_type,gas_file,grid_type,grid_file,plasma_param_type,plasma_param_file
;The following common block contains neutral gas parameters used in
;calculation of the beam attenuation in the gas.
common neutral_gas,tank_pressure,torus_pressure,duct_pressure,duct_pressure_loc,n0_arr,n0_stop_cross_section
;The following common block contains the parameters which describe the geometry
;and position of the machine plasma
common plasma_geometry, r_major,z_major,r_minor,elong,triang_upper,triang_lower
;The following common block contains some of the settings of how to
;run the beam attenuation and penetration calculation.
common run_settings, div_type,div_type_names,atten_type, atten_type_names, vel_dis_type,vel_dis_names,save_output_type,save_output_file
;The following common block contains the parameters which describe the non-geometrical
;parameters of the beam (particle and energy distribution) 
common beam_param, beam_atom, e_full, E_frac, I_beam, I_frac, I_opt, I_dens_par, neutr_dens_ns_tot,neutr_dens_frac,x_div_bml_opt, y_div_bml_opt,div_dist_par
;The following common block contains the parameters which describe
;some relative  global parameters of the plasma 
common plasma_param, main_ion,n_impur,impur_table
;The following common block contains the parameters which describe the
;positions and sizes of the beam limiters.
common beam_limiters, n_limiters, limiters_table,limiters_arr
;The following common block contains the table of the parameters which
;defile the 3D spatial grid which used for calculation
common grid_arr, code_grid_arr
;The following common block contains some of the settings for construction
;of the arrays used for the beam attenuation and penetration
;calculation. flux_surf_arr_type parameter defines which way to
;construct 3D rho array.
common construct_settings, flux_surf_names, flux_surf_arr_type,ne_arr_type,te_arr_type,z_eff_arr_type,stop_plasma_type, stop_plasma_type_names,exc_plasma_type, $
exc_plasma_type_names,gas_arr_type,stop_gas_type,lim_arr_type,grid_aper_names,grid_aper_type
;The following common block is used to transfer the pointer to the
;status window and availability states of each data set
common status, status_wid,error_catch,st_err
;The following common block contains some of the settings of "saving
;parameters to the file"
common save_param, save_param_file 
;The following common block contains some of the settings of "saving
;run settings to the file"
common settings_file, save_set_file
;The following common block contains some of the settings of "export
;graph to the file"
common export_file, export_file,export_sel,export_flag

  alcbeam_ver='4.14'
  ;debuging parameter (default=1:catch errors, debug=0:pass errors)  
  error_catch=1
  st_err=0;initial error status 0
  ;-------------------load default settings for code and zero values for
  ;all the parameters 
  



  ;general
  beam='DNBI_ALCATOR'
  shot='1070831028'
  t1=1.080
  t2=1.100
  run=1
  spawn,'echo $USER',user
  spawn,'echo $HOSTNAME',hostname
  spawn,'echo $HOME',file_dir
  hostname=hostname(0)
  user=user(0)
  file_dir=file_dir(0)
  cd, current=cur_dir
  cd, file_dir
  dir1=file_search('alcbeam',count=count,/test_directory)
  if count eq 1 then file_dir=file_dir+'/alcbeam'
  cd, cur_dir
  adas_dir='/usr/local/cmod/codes/dnb/alcbeam/adas'
  
  ;load settings
  load_set_def=[0,0,0,0,0,0,0,0,1,0,0]
  load_choice=0
  general_type=load_set_def(0)
  general_file=file_dir+'/'+beam+'.abi' 
  beam_geom_type=load_set_def(1)
  beam_geom_file=file_dir+'/'+beam+'.abi'
  beam_lim_type=load_set_def(2)
  beam_lim_file=file_dir+'/'+beam+'.abi'
  beam_param_type=load_set_def(3)
  beam_param_file=file_dir+'/'+beam+'.abi'
  plasma_geom_type=load_set_def(4)
  plasma_geom_file=file_dir+'/'+beam+'.abi'
  plasma_param_type=load_set_def(5)
  plasma_param_file=file_dir+'/'+beam+'.abi' 
  ne_type=load_set_def(6)
  ne_file=file_dir+'/fits_'+shot+'.save'
  te_type=load_set_def(7)
  te_file=file_dir+'/fits_'+shot+'.save'
  z_eff_type=load_set_def(8)
  z_eff_file='1.5'      
  gas_type=load_set_def(9)
  gas_file=file_dir+'/'+beam+'.abi'  
  grid_type=load_set_def(10)
  grid_file=file_dir+'/'+beam+'.abi'   
  ;construct_settings
  flux_surf_names=[['Miller equilib  '],['Hakkarainen eq '],['EFIT (MDSPLUS)       '],['skip']]
  flux_surf_arr_type=2
  ne_arr_type=0
  te_arr_type=0
  z_eff_arr_type=0
  stop_plasma_type=0
  stop_plasma_type_names=[['ADAS Delabie  (stop)'],['ADAS v3_1 (stop)    '],['ADAS v3_0 (stop)    '],['Suzuki (stop)     '],['skip']]
  exc_plasma_type=0
  exc_plasma_type_names=[['ADAS Delabie   (exc)'],['ADAS v3_1 (exc)     '],['ADAS v3_0 (exc)     '],['Ian Hutchinson '],['skip']]
  gas_arr_type=0
  lim_arr_type=0
  stop_gas_type=0
  grid_aper_names=[['all'],['2']]
  grid_aper_type=0
  ;calc_settings
  div_type=0
  atten_type=0
  div_type_names=[['INTERPOLATING'],['RAY TRACING'],['ANALYTIC     ']]
  atten_type_names=[['Full attenuation '],['Plasma only'],['Gas only'],['Limiters only'],['Gas + Limiters'],['Skip attenuation']]
  vel_dis_names=[['YES'],['NO']]
  vel_dis_type=1
  save_output_type=2
  save_output_file=file_dir+'/'+beam+'_'+strtrim(string(run),2)+'.abo' 
  ;grid_arr
  code_grid_arr={z:[0.0,0.0,0.0,0.0,0.0],x:[0.0,0.0,0.0],y:[0.0,0.0,0.0]}
  ;beam_geometry
  x_bml=0.0 & y_bml=0.0 & grid_ap_diam=0.0 & x_grid_focus=0.0 & y_grid_focus=0.0 & beam_port='?' & beam_port_phi = 0.0 & r_grid=0.0 & z_grid=0.0 & phi_grid=0.0 & r_wall=0.0 & z_wall=0.0 & phi_wall=0.0 & tank_front_dist=0.0 & tank_size=0.0 & neutr_size=0.0 & tank_diam=0.0 & neutr_diam=0.0 & magnet_diam=0.0 & neutr_front_dist=0.0
  tank_magnet_dist=0.0 & magnet_size=0.0 & tank_cal_dist=0.0
  ;beam_param
  beam_atom='H' & e_full=0.0 & E_frac=[1.0,1.0,1.0,1.0] & I_beam=0.0 & I_frac=[0.0,0.0,0.0,0.0] & I_opt=0.0 & I_dens_par=0.0 & neutr_dens_ns_tot=0.0 & neutr_dens_frac=[0.0,0.0,0.0,0.0] & x_div_bml_opt=0.0 & y_div_bml_opt=0.0 & div_dist_par=0.0
  ;plasma param
  main_ion='D' & n_impur=1 & impur_table=[['B'],['5'],['1.000']]
  ;beam_limiters
  n_limiters=0
  limiters_table='';[['none','0.000','0.000','0.000','','']]
  ;plasma_geometry
  r_major=0.0 & z_major=0.0 & r_minor=0.0 & elong=0.0 & triang_upper=0.0 & triang_lower=0.0
  ;neutral_gas
  tank_pressure=0.0 & torus_pressure=0.0 & duct_pressure=0.0 & duct_pressure_loc=0.0 
  ;save_param
  save_param_file=file_dir+'/'+beam+'.abi'
  save_set_file=file_dir+'/'+beam+'.aset'
  export_file=file_dir+'/'+beam+'.png'
  export_sel=0
  export_flag=0 ; no export by default
  driver_shots=shot
  driver_time='0.00'
  driver_set_file=file_dir+'/'+beam+'.aset'

  ;-------------------------------------------------------------------------------------

  Device, Decomposed=0, retain=2, true=24
  loadct, 5, /silent
  ;TVLCT, 255, 0, 0, 110
  scr_xsz=1000
  scr_ysz=850
  Main_Widget = Widget_Base( $
      UNAME='Main_Widget' ,XOFFSET=30 ,YOFFSET=30  $
      ,SCR_XSIZE=scr_xsz, SCR_YSIZE=scr_ysz,TITLE='ALCBEAM - neutral beam formation and propagation code (ver. '+alcbeam_ver+')'$
     ,/TLB_size_events)
  ; Definition of the Main Frame Base
  Main_Base = Widget_base(Main_Widget, UNAME='Main_Base'  $
      ,XOFFSET=4,YOFFSET=4,Frame=1$
      ,XSIZE=scr_xsz-10,YSIZE=scr_ysz-10)
  Result = WIDGET_INFO( Main_Base,/Geometry)

  
  Result = WIDGET_INFO( Main_Base,/Geometry)
 
  Shot_Number_text = Widget_text(Main_base, UNAME='Shot_Number_Text'  $
      ,XOFFSET=360, YOFFSET=8,SCR_XSIZE=78 ,SCR_YSIZE=30,/editable $
      ,VALUE=shot ,XSIZE=20 ,YSIZE=1)

  Shot_Number_label = Widget_Label(Main_base, UNAME='Shot_Number_Label'  $
      ,XOFFSET=258, YOFFSET=6, SCR_XSIZE=100 , SCR_YSIZE=33 $
      ,VALUE= 'Selected Shot:' ,XSIZE=5 ,YSIZE=1)

  Beam_label = Widget_Label(Main_Base, UNAME='Beam_Label'  $
      ,XOFFSET=8, YOFFSET=6, SCR_XSIZE=65 , SCR_YSIZE=33 $
      ,VALUE= 'Beam Type: ' ,XSIZE=5 ,YSIZE=23,/Align_left)
      
  Beam_Text = Widget_text(Main_Base, UNAME='Beam_Text'  $
      ,XOFFSET=75, YOFFSET=8,SCR_XSIZE=130 ,SCR_YSIZE=30,/editable $
      ,VALUE=beam ,XSIZE=20 ,YSIZE=1)
     
  Show_Driver_Button = Widget_Button(Main_Base, UNAME='Show_Driver_Button'  $
      ,XOFFSET=810, YOFFSET=4, SCR_XSIZE=170, SCR_YSIZE=35 $
      ,VALUE= 'Prepare ALCBEAM Driver' ,XSIZE=35 ,YSIZE=35, /Align_Center)

  Read_Base = Widget_base(Main_Base, UNAME='Read_Base'  $
      ,XOFFSET=8,YOFFSET=44,Frame=1$
      ,XSIZE=435,YSIZE=100)
 
  Read_Label = Widget_Label(Read_Base, UNAME='Read_Label'  $
      ,XOFFSET=8 ,YOFFSET=8 ,XSIZE=415,YSIZE=23 $
      ,/ALIGN_Center ,VALUE='Read/View Results from Previous Runs', /sunken_frame)  

  Get_Old_Runs_Button = Widget_Button(read_Base, UNAME='Get_Old_Runs_Button'  $
      ,XOFFSET=8, YOFFSET=40, SCR_XSIZE=140, SCR_YSIZE=25 $
      ,VALUE= 'Search Available Runs' ,XSIZE=25 ,YSIZE=25, /Align_Center)

  User_Droplist=Widget_Droplist(Read_Base, UNAME='User_Droplist'$
      ,XOFFSET=145,YOFFSET=35,XSIZE=120,YSIZE=12,value=' ')
  
  Read_Results_Button = Widget_Button(Read_Base, UNAME='Read_Results_Button'  $
      ,XOFFSET=338, YOFFSET=40, SCR_XSIZE=90, SCR_YSIZE=25 $
      ,VALUE= 'Read Results' ,XSIZE=25 ,YSIZE=25, /Align_Center)

  Widget_Control, Read_Results_Button,Sensitive=0

  Ready_Del_Check = CW_BGROUP(Read_Base, 'READY TO DEL', UNAME='Ready_Del_Check' ,XOFFSET=205$
      ,YOFFSET=70 ,/nonEXCLUSIVE, Space=0, Ypad=0)
   
  Del_Node_Button = Widget_Button(Read_Base, UNAME='Del_Node_Button'  $
      ,XOFFSET=308, YOFFSET=70, SCR_XSIZE=120, SCR_YSIZE=25 $
      ,VALUE= 'Delete Node/File' ,XSIZE=415 ,YSIZE=23, /Align_Center)

  File_Dir_Text = Widget_text(Read_Base, UNAME='File_Dir_Text'  $
      ,XOFFSET=7, YOFFSET=65,SCR_XSIZE=140 ,SCR_YSIZE=30,/editable $
      ,VALUE=file_dir ,XSIZE=20 ,YSIZE=1)
  

  Widget_Control, Del_Node_Button,Sensitive=0

 

  Param_Base = Widget_base(Main_Base, UNAME='Param_Base'  $
      ,XOFFSET=8,YOFFSET=156,Frame=1$
      ,XSIZE=435,YSIZE=282)
   
  Param_Label = Widget_Label(Param_Base, UNAME='Param_Label'  $
      ,XOFFSET=8 ,YOFFSET=8 ,XSIZE=415,YSIZE=23 $
      ,/ALIGN_Center ,VALUE='Preview/Change Input Parameters and Profiles:', /sunken_frame)

  Code_Grid_Button = Widget_Button(Param_Base, UNAME='Code_Grid_Button'  $
      ,XOFFSET=3, YOFFSET=68, SCR_XSIZE=105, SCR_YSIZE=25 $
      ,VALUE= 'Code Grid/Mesh' ,XSIZE=415 ,YSIZE=23, /Align_Center)
  
  Beam_Geometry_Button = Widget_Button(Param_Base, UNAME='Beam_Geometry_Button'  $
      ,XOFFSET=108, YOFFSET=68, SCR_XSIZE=105, SCR_YSIZE=25 $
      ,VALUE= 'Beam Geometry' ,XSIZE=415 ,YSIZE=23, /Align_Center)
 
  Beam_Param_Button = Widget_Button(Param_Base, UNAME='Beam_Param_Button'  $
      ,XOFFSET=108, YOFFSET=96, SCR_XSIZE=105, SCR_YSIZE=25 $
      ,VALUE= 'Beam Parameters' ,XSIZE=415 ,YSIZE=23, /Align_Center)  
 
  Gas_Button = Widget_Button(Param_Base, UNAME='Gas_Button'  $
      ,XOFFSET=213, YOFFSET=68, SCR_XSIZE=105, SCR_YSIZE=25 $
      ,VALUE= 'Neutral Gas' ,XSIZE=415 ,YSIZE=23, /Align_Center)
 
  Beam_Limiters_Button = Widget_Button(Param_Base, UNAME='Beam_Limiters_Button'  $
      ,XOFFSET=213, YOFFSET=96, SCR_XSIZE=105, SCR_YSIZE=25 $
      ,VALUE= 'Beam Limiters' ,XSIZE=415 ,YSIZE=23, /Align_Center) 
   
  Plasma_Geometry_Button = Widget_Button(Param_Base, UNAME='Plasma_Geometry_Button'  $
      ,XOFFSET=318, YOFFSET=68, SCR_XSIZE=111, SCR_YSIZE=25 $
      ,VALUE= 'Plasma Geometry' ,XSIZE=415 ,YSIZE=23, /Align_Center)
  
  Plasma_Param_Button = Widget_Button(Param_Base, UNAME='Plasma_Param_Button'  $
      ,XOFFSET=318, YOFFSET=96, SCR_XSIZE=111, SCR_YSIZE=25 $
      ,VALUE= 'Plasma Parameters' ,XSIZE=415 ,YSIZE=23, /Align_Center)


  Time_Interval_Text_1 = Widget_text(Param_Base, UNAME='Time_Interval_Text_1'  $
      ,XOFFSET=175, YOFFSET=37,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(t1,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)

  Time_Interval_Label = Widget_Label(Param_Base, UNAME='Time_Interval_Label'  $
      ,XOFFSET=8, YOFFSET=37, SCR_XSIZE=222 , SCR_YSIZE=33 $
      ,VALUE= 'Selected time interval, sec         -' ,XSIZE=5 ,YSIZE=1)
  
  Time_Interval_Text_2 = Widget_text(Param_Base, UNAME='Time_Interval_Text_2'  $
      ,XOFFSET=230, YOFFSET=37,SCR_XSIZE=48 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(t2,format='(F10.3)'),1) ,XSIZE=20 ,YSIZE=1)

 
  Preview_Data_Base = Widget_base(Param_Base, UNAME='Preview_Data_Base'  $
      ,XOFFSET=8,YOFFSET=129,Frame=1 $
      ,XSIZE=415,YSIZE=68)   

  Preview_Data_Button = Widget_Button(Preview_Data_Base, UNAME='Preview_Data_Button'  $
      ,XOFFSET=180, YOFFSET=0, SCR_XSIZE=70, SCR_YSIZE=37 $
      ,VALUE= 'Plot' ,XSIZE=415 ,YSIZE=23, /Align_Center)
  
  Preview_Data_Label_1 = Widget_Label(Preview_Data_Base, UNAME='Preview_Data_Label_1'  $
      ,XOFFSET=15, YOFFSET=2, SCR_XSIZE=200 , SCR_YSIZE=33 $
      ,VALUE= 'Preview input data' ,XSIZE=5 ,YSIZE=1,/align_left)

  Preview_Data_Label_2 = Widget_Label(Preview_Data_Base, UNAME='Preview_Data_Label_2'  $
      ,XOFFSET=15, YOFFSET=22, SCR_XSIZE=100 , SCR_YSIZE=33 $
      ,VALUE= 'in the Viewer' ,XSIZE=5 ,YSIZE=1,/align_left)

  Preview_Data_Droplist=Widget_Droplist(Preview_Data_Base, UNAME='Preview_Data_Droplist'$
      ,XOFFSET=245,YOFFSET=0,SCR_XSIZE=90,SCR_YSIZE=37,value=[['All grid apertures'],['Source density dist'],$
  ['n_e'],['t_e'],['z_eff']])



  Smooth_Button = Widget_Button(Preview_Data_Base, UNAME='Smooth_Button'  $
      ,XOFFSET=180, YOFFSET=37, SCR_XSIZE=60, SCR_YSIZE=25 $
      ,VALUE= 'Smooth' ,XSIZE=25 ,YSIZE=25, /Align_Center)
  
  Smooth_Text = Widget_text(Preview_Data_Base, UNAME='Smooth_Text'  $
      ,XOFFSET=315, YOFFSET=35,SCR_XSIZE=45 ,SCR_YSIZE=30,/editable $
      ,VALUE='10.0' ,XSIZE=20 ,YSIZE=1)

  Smooth_label = Widget_Label(Preview_Data_Base, UNAME='Smooth_Label'  $
      ,XOFFSET=245, YOFFSET=33, SCR_XSIZE=190 , SCR_YSIZE=33 $
      ,VALUE= 'with value         (0-15.0)' ,XSIZE=5 ,YSIZE=1,/align_left)




  Preview_Arr_Base = Widget_base(Param_Base, UNAME='Preview_Arr_Base'  $
      ,XOFFSET=8,YOFFSET=206,Frame=1 $
      ,XSIZE=415,YSIZE=38)   

  Preview_Arr_Button = Widget_Button(Preview_Arr_Base, UNAME='Preview_Arr_Button'  $
      ,XOFFSET=180, YOFFSET=0, SCR_XSIZE=70, SCR_YSIZE=37 $
      ,VALUE= 'Plot' ,XSIZE=415 ,YSIZE=23, /Align_Center)
  
  Preview_Arr_Label = Widget_Label(Preview_Arr_Base, UNAME='Preview_Arr_Label'  $
      ,XOFFSET=15, YOFFSET=2, SCR_XSIZE=200 , SCR_YSIZE=33 $
      ,VALUE= 'Preview constructed arrays' ,XSIZE=5 ,YSIZE=1,/align_left)
  
  Preview_Arr_Droplist=Widget_Droplist(Preview_Arr_Base, UNAME='Preview_Arr_Droplist'$
      ,XOFFSET=245,YOFFSET=2,SCR_XSIZE=90,SCR_YSIZE=37,value=[['used grid apertures'],['flux surfaces'],['n_e_arr contour'],['n_e_arr vs z_beam'],['n_e_arr vs r_major'],['n_e_arr vs x_beam'],['n_e_arr vs y_beam'],$
  ['t_e_arr contour'],['t_e_arr vs z_beam'],['t_arr vs r_major'],['t_e_arr vs x_beam'],['t_e_arr vs y_beam'],['z_eff_arr contour'],['z_eff_arr vs z_beam'],$
  ['z_eff_arr vs x_beam'],['z_eff_arr vs y_beam'],['n0_arr contour'],['n0_arr vs z_beam'],['n0_arr vs x_beam'],['n0_arr vs y_beam'],['n=2 exc contour'],$
  ['n=2 exc. vs z_beam'],['n=2 exc vs r_major'],['n=2 exc. vs x_beam'],['n=2 exc. vs y_beam'],['n=3 exc contour'],$
  ['n=3 exc. vs z_beam'],['n=3 exc vs r_major'],['n=3 exc. vs x_beam'],['n=3 exc. vs y_beam'],['limiters contour'],$
  ['limiters vs z_beam'],['limiters vs x_beam'],['limiters vs y_beam']])


  Save_Param_Button = Widget_Button(Param_Base, UNAME='Save_Param_Button'  $
      ,XOFFSET=3, YOFFSET=255, SCR_XSIZE=235, SCR_YSIZE=25 $
      ,VALUE= 'Save Input Data to (*.abi) input file' ,XSIZE=415 ,YSIZE=23, /Align_Center)
  
  Widget_Control, Save_Param_Button,Sensitive=0
  

  
  


  
  Run_Base = Widget_base(Main_Base, UNAME='Run_Base'  $
      ,XOFFSET=8,YOFFSET=454+18,Frame=1 $
      ,XSIZE=435,YSIZE=205)
   
  Run_Label = Widget_Label(Run_Base, UNAME='Run_Label'  $
      ,XOFFSET=8 ,YOFFSET=8 ,XSIZE=315,YSIZE=23 $
      ,/ALIGN_Center ,VALUE='Run The Code:', /sunken_frame)

  Ready_Button = Widget_Button(Run_Base, UNAME='Ready_Button'  $
      ,XOFFSET=333, YOFFSET=6, SCR_XSIZE=94, SCR_YSIZE=30 $
      ,VALUE= 'PREPARE A RUN' ,XSIZE=415 ,YSIZE=23, /Align_Center)
  
  Load_Base = Widget_base(Run_Base, UNAME='Load_Base'  $
      ,XOFFSET=8,YOFFSET=38,Frame=1 $
      ,XSIZE=415,YSIZE=38)   

  Load_Data_Button = Widget_Button(Load_Base, UNAME='Load_Data_Button'  $
      ,XOFFSET=0, YOFFSET=0, SCR_XSIZE=70, SCR_YSIZE=37 $
      ,VALUE= 'LOAD' ,XSIZE=415 ,YSIZE=23, /Align_Center)
  
  Load_Data_Label = Widget_Label(Load_Base, UNAME='Load_Data_Label'  $
      ,XOFFSET=75, YOFFSET=2, SCR_XSIZE=240 , SCR_YSIZE=33 $
      ,VALUE= 'input data needed for the calculation' ,XSIZE=5 ,YSIZE=1,/align_left)
  
  Load_Settings_Button=Widget_Button(Load_Base, UNAME='Load_Settings_Button'$
      ,XOFFSET=322,YOFFSET=6,SCR_XSIZE=90,SCR_YSIZE=27,value='Settings',/Align_Center,XSIZE=5, YSIZE=1)

  

  
  Construct_Base = Widget_base(Run_Base, UNAME='Construct_Base'  $
      ,XOFFSET=8,YOFFSET=85,Frame=1 $
      ,XSIZE=415,YSIZE=38)   

  Construct_Data_Button = Widget_Button(Construct_Base, UNAME='Construct_Data_Button'  $
      ,XOFFSET=0, YOFFSET=0, SCR_XSIZE=70, SCR_YSIZE=37 $
      ,VALUE= 'CONSTRUCT' ,XSIZE=415 ,YSIZE=23, /Align_Center)
 
  Construct_Data_Label = Widget_Label(Construct_Base, UNAME='Construct_Data_Label'  $
      ,XOFFSET=75, YOFFSET=2, SCR_XSIZE=240 , SCR_YSIZE=33 $
      ,VALUE= 'data arrays needed for the calculation' ,XSIZE=5 ,YSIZE=1,/align_left)
  
  Construct_Settings_Button=Widget_Button(Construct_Base, UNAME='Construct_Settings_Button'$
      ,XOFFSET=322,YOFFSET=6,SCR_XSIZE=90,SCR_YSIZE=27,value='Settings',/Align_Center,XSIZE=5, YSIZE=1)
  




    
  Calc_Base = Widget_base(Run_Base, UNAME='Calc_Base'  $
      ,XOFFSET=8,YOFFSET=132,Frame=1 $
      ,XSIZE=415,YSIZE=38)   

  Run_Button = Widget_Button(Calc_Base, UNAME='Run_Button'  $
      ,XOFFSET=0, YOFFSET=0, SCR_XSIZE=70, SCR_YSIZE=37 $
      ,VALUE= 'CALC' ,XSIZE=415 ,YSIZE=23, /Align_Center)
 
  Calc_Label = Widget_Label(Calc_Base, UNAME='Calc_Label'  $
      ,XOFFSET=75, YOFFSET=2, SCR_XSIZE=60 , SCR_YSIZE=33 $
      ,VALUE= 'beam code' ,XSIZE=5 ,YSIZE=1,/align_left)
  
 
  Run_User_label = Widget_Label(Calc_Base, UNAME='Run_User_Label'  $
      ,XOFFSET=127, YOFFSET=2, SCR_XSIZE=130 , SCR_YSIZE=33 $
      ,VALUE= '(user: '+user+')' ,XSIZE=5 ,YSIZE=1)
  
  Run_Number_label = Widget_Label(Calc_Base, UNAME='Run_Number_Label'  $
      ,XOFFSET=255, YOFFSET=2, SCR_XSIZE=35 , SCR_YSIZE=33 $
      ,VALUE= 'Run:' ,XSIZE=5 ,YSIZE=1)
 
  Run_Number_text = Widget_text(Calc_Base, UNAME='Run_Number_Text'  $
      ,XOFFSET=290, YOFFSET=3,SCR_XSIZE=31 ,SCR_YSIZE=30,/editable $
      ,VALUE=strtrim(string(run,format='(I2)'),1) ,XSIZE=20 ,YSIZE=1)
  
  Calc_Settings_Button=Widget_Button(Calc_Base, UNAME='Calc_Settings_Button'$
      ,XOFFSET=322,YOFFSET=6,SCR_XSIZE=90,SCR_YSIZE=27,value='Settings',/Align_Center,XSIZE=5, YSIZE=1)

 
  Save_Set_File_Button = Widget_Button(Run_Base, UNAME='Save_Set_File_Button'  $
      ,XOFFSET=3, YOFFSET=177, SCR_XSIZE=200, SCR_YSIZE=25 $
      ,VALUE= 'Save Settings to (*.aset) file' ,XSIZE=415 ,YSIZE=23, /Align_Center)

  Load_Set_File_Button = Widget_Button(Run_Base, UNAME='Load_Set_File_Button'  $
      ,XOFFSET=220, YOFFSET=177, SCR_XSIZE=210, SCR_YSIZE=25 $
      ,VALUE= 'Load Settings from (*.aset) file' ,XSIZE=415 ,YSIZE=23, /Align_Center) 


 ; Calc_Base = Widget_base(Run_Base, UNAME='Calc_Base'  $
 ;     ,XOFFSET=8,YOFFSET=250,Frame=1 $
 ;     ,XSIZE=415,YSIZE=68) 
  
 
 
 ; Run_Code_Button = Widget_Button(Perform_Base, UNAME='Run_Code_Button'  $
 ;     ,XOFFSET=0, YOFFSET=0, SCR_XSIZE=64, SCR_YSIZE=67 $
 ;     ,VALUE= 'Run ' ,XSIZE=415 ,YSIZE=23, /Align_Center);





  
  Widget_Control, Load_Base,Sensitive=0
  Widget_Control, Construct_Base,Sensitive=0
  Widget_Control, Calc_Base,Sensitive=0
  Widget_Control, Preview_Data_Base,Sensitive=0
  Widget_Control, Preview_Arr_Base,Sensitive=0

  Result_Plot = Widget_Draw(Main_Base, UNAME='Result_Plot'  $
      ,XOFFSET=455,YOFFSET=8+36,Frame=5, Retain=2, /Button_events $
      ,XSIZE=516,YSIZE=415$
      ,Graphics_Level=0)
  
  ;Time_Label = Widget_Label(Main_Base, UNAME='Time_Label' ,XOFFSET=455,/align_center  $
  ;    ,YOFFSET=436 ,XSIZE=524 ,ysize=15, Value='Time: 1.000 sec',/sunken_frame)
  ;Time_Start = Widget_Label(Main_Base, UNAME='Time_Start' ,XOFFSET=455, Value='0.00 sec' $
  ;    ,/ALIGN_Center ,YOFFSET=454 ,XSIZE=50 ,YSIZE=15, /sunken_frame)
  ;Time_End = Widget_Label(Main_Base, UNAME='Time_End' ,XOFFSET=925, Value='2.00 sec'  $
  ;    ,/ALIGN_Center ,YOFFSET=454 ,XSIZE=53 ,YSIZE=15, /sunken_frame)
  ;Time_Slider = Widget_Slider(Main_Base, UNAME='Time_Slider'  $
  ;    ,XOFFSET=505 ,YOFFSET=454,XSIZE=420 ,YSIZE=16,sensitive=0  $
  ;    ,MINIMUM=0 ,MAXIMUM=100 ,VALUE=10,scroll=1, /suppress_value)

  Z_B_Label = Widget_Label(Main_Base, UNAME='Z_B_Label' ,XOFFSET=455,/align_center  $
      ,YOFFSET=436+36 ,XSIZE=524 ,ysize=15, Value='Distance from Accelerating Grids z_beam: 0.000 m',/sunken_frame)
  Z_B_Start = Widget_Label(Main_Base, UNAME='Z_B_Start' ,XOFFSET=455, Value=' 0.00 m ' $
      ,/ALIGN_Center ,YOFFSET=454+36 ,XSIZE=50 ,YSIZE=15, /sunken_frame)
  Z_B_End = Widget_Label(Main_Base, UNAME='Z_B_End' ,XOFFSET=925, Value='0.00 m '  $
      ,/ALIGN_Center ,YOFFSET=454+36 ,XSIZE=53 ,YSIZE=15, /sunken_frame)
  Z_B_Slider = Widget_Slider(Main_Base, UNAME='Z_B_Slider'  $
      ,XOFFSET=505 ,YOFFSET=454+36,XSIZE=420 ,YSIZE=16,sensitive=0  $
      ,MINIMUM=0 ,MAXIMUM=100 ,VALUE=0,scroll=1, /suppress_value) 

  X_B_Label = Widget_Label(Main_Base, UNAME='X_B_Label' ,XOFFSET=455,/align_center  $
      ,YOFFSET=476+36 ,XSIZE=524 ,ysize=15, Value='Beam X coordinate: 0.000 m',/sunken_frame)
  X_B_Start = Widget_Label(Main_Base, UNAME='X_B_Start' ,XOFFSET=455, Value='-0.00 m' $
      ,/ALIGN_Center ,YOFFSET=494+36 ,XSIZE=50 ,YSIZE=15, /sunken_frame)
  X_B_End = Widget_Label(Main_Base, UNAME='X_B_End' ,XOFFSET=925, Value='0.00 m '  $
      ,/ALIGN_Center ,YOFFSET=494+36 ,XSIZE=53 ,YSIZE=15, /sunken_frame)
  X_B_Slider = Widget_Slider(Main_Base, UNAME='X_B_Slider'  $
      ,XOFFSET=505 ,YOFFSET=494+36,XSIZE=420 ,YSIZE=16,sensitive=0  $
      ,MINIMUM=0 ,MAXIMUM=900 ,VALUE=450,scroll=1, /suppress_value)


  Y_B_Label = Widget_Label(Main_Base, UNAME='Y_B_Label' ,XOFFSET=455,/align_center  $
      ,YOFFSET=516+36 ,XSIZE=524 ,ysize=15, Value='Beam Y coordinate: 0.000 m',/sunken_frame)
  Y_B_Start = Widget_Label(Main_Base, UNAME='Y_B_Start' ,XOFFSET=455, Value='-0.00 m' $
      ,/ALIGN_Center ,YOFFSET=534+36 ,XSIZE=50 ,YSIZE=15, /sunken_frame)
  Y_B_End = Widget_Label(Main_Base, UNAME='Y_B_End' ,XOFFSET=925, Value='0.00 m '  $
      ,/ALIGN_Center ,YOFFSET=534+36 ,XSIZE=53 ,YSIZE=15, /sunken_frame)
  Y_B_Slider = Widget_Slider(Main_Base, UNAME='Y_B_Slider'  $
      ,XOFFSET=505 ,YOFFSET=534+36,XSIZE=420 ,YSIZE=16,sensitive=0  $
      ,MINIMUM=0 ,MAXIMUM=900 ,VALUE=450,scroll=1, /suppress_value)

  E_B_Label_top = Widget_Label(Main_Base, UNAME='E_B_Label_top' ,XOFFSET=455,/align_center  $
      ,YOFFSET=556+36 ,XSIZE=524 ,ysize=15, Value='Beam Energy components, keV',/sunken_frame)
  
  E_B_Label_1 = Widget_Label(Main_Base, UNAME='E_B_Label_1' ,XOFFSET=475,/align_left  $
      ,YOFFSET=580+36 ,XSIZE=80 ,ysize=15, Value='E_full: 000.0')
  E_B_Check_1 = CW_BGROUP(Main_Base, '             ', UNAME='E_B_Check_1' ,XOFFSET=456$
      ,YOFFSET=576+36 ,/nonEXCLUSIVE, Space=8, Ypad=0)
  
  E_B_Label_2 = Widget_Label(Main_Base, UNAME='E_B_Label_2' ,XOFFSET=583,/align_left  $
      ,YOFFSET=580+36 ,XSIZE=70 ,ysize=15, Value='E/00: 000.0')
  E_B_Check_2 = CW_BGROUP(Main_Base, '           ', UNAME='E_B_Check_2' ,XOFFSET=564$
      ,YOFFSET=576+36 ,/nonEXCLUSIVE, Space=8, Ypad=0)
  
  E_B_Label_3 = Widget_Label(Main_Base, UNAME='E_B_Label_3' ,XOFFSET=686,/align_left  $
      ,YOFFSET=580+36 ,XSIZE=70 ,ysize=15, Value='E/00: 000.0')
  E_B_Check_3 = CW_BGROUP(Main_Base, '           ', UNAME='E_B_Check_3' ,XOFFSET=667$
      ,YOFFSET=576+36 ,/nonEXCLUSIVE, Space=8, Ypad=0)

  E_B_Label_4 = Widget_Label(Main_Base, UNAME='E_B_Label_4' ,XOFFSET=789,/align_left  $
      ,YOFFSET=580+36 ,XSIZE=70 ,ysize=15, Value='E/00: 000.0')
  E_B_Check_4 = CW_BGROUP(Main_Base, '           ', UNAME='E_B_Check_4' ,XOFFSET=770$
      ,YOFFSET=576+36 ,/nonEXCLUSIVE, Space=8, Ypad=0)

  E_B_Label_5 = Widget_Label(Main_Base, UNAME='E_B_Label_5' ,XOFFSET=892,/align_left  $
      ,YOFFSET=580+36 ,XSIZE=70 ,ysize=15, Value='E/00: 000.0')
  E_B_Check_5 = CW_BGROUP(Main_Base, '           ', UNAME='E_B_Check_5' ,XOFFSET=873$
      ,YOFFSET=576+36 ,/nonEXCLUSIVE, Space=8, Ypad=0)

  Widget_Control, E_B_Check_1,Sensitive=0 
  Widget_Control, E_B_Label_1,Sensitive=0
  Widget_Control, E_B_Check_2,Sensitive=0 
  Widget_Control, E_B_Label_2,Sensitive=0
  Widget_Control, E_B_Check_3,Sensitive=0 
  Widget_Control, E_B_Label_3,Sensitive=0
  Widget_Control, E_B_Check_4,Sensitive=0 
  Widget_Control, E_B_Label_4,Sensitive=0
  Widget_Control, E_B_Check_5,Sensitive=0 
  Widget_Control, E_B_Label_5,Sensitive=0 

  E_B_Label_bot = Widget_Label(Main_Base, UNAME='E_B_Label_bot' ,XOFFSET=455,/align_center  $
      ,YOFFSET=574+36 ,XSIZE=524 ,ysize=28, Value=' ',/sunken_frame)

  exc_B_Label_top = Widget_Label(Main_Base, UNAME='exc_B_Label_top' ,XOFFSET=455,/align_center  $
      ,YOFFSET=608+36 ,XSIZE=524 ,ysize=15, Value='Beam atoms excitation states',/sunken_frame)

  exc_B_Check = CW_BGROUP(Main_Base, ['n=1,2,3 (total)','n=1 (ground)','n=2 (first excited)','n=3 (second excited)'], UNAME='exc_B_Check' ,XOFFSET=456$
      ,YOFFSET=628+36 ,/EXCLUSIVE, Space=10, Ypad=0,column=4)
  
  Widget_Control, exc_B_Check,Sensitive=1
  Widget_Control, exc_B_Check,Set_Value=0
 

  exc_B_Label_bot = Widget_Label(Main_Base, UNAME='exc_B_Label_bot' ,XOFFSET=455,/align_center  $
      ,YOFFSET=626+36 ,XSIZE=524 ,ysize=28, Value=' ',/sunken_frame)

  Scale_Check = CW_BGROUP(Main_Base, 'Y Axis LOCK', UNAME='Scale_Check' ,XOFFSET=860$
      ,YOFFSET=662+36 ,/nonEXCLUSIVE, Space=0, Ypad=0)

  Plot_Button = Widget_Button(Main_Base, UNAME='Plot_Button'  $
      ,XOFFSET=455, YOFFSET=662+36, SCR_XSIZE=60, SCR_YSIZE=25 $
      ,VALUE= 'Plot' ,XSIZE=25 ,YSIZE=25, /Align_Center)
 
  Export_Button = Widget_Button(Main_Base, UNAME='Export_Button'  $
      ,XOFFSET=750, YOFFSET=662+36, SCR_XSIZE=60, SCR_YSIZE=25 $
      ,VALUE= 'Export' ,XSIZE=25 ,YSIZE=25, /Align_Center)
  

  Plot_Choice_Droplist=Widget_Droplist(Main_Base, UNAME='Plot_Choice_Droplist'$
      ,XOFFSET=510,YOFFSET=693,XSIZE=120,YSIZE=15,value=[['n_beam volume'],['n_beam contour'],['beam line density vs z_beam'],['beam line density vs r_major'],$
['beam deposition vs rho'],['total beam power (in atoms)'],['beam horizontal width'],['beam vertical width'],['n_beam vs z_beam'],['n_beam vs r_major'],$
['n_beam vs x_beam'],['n_beam vs y_beam'],['lost atoms line density'],['beam power loss'],['velocity contour']])  

  Widget_Control, Plot_Button,Sensitive=0
  Widget_Control, Export_Button,Sensitive=0
  Widget_Control, Plot_Choice_Droplist,Sensitive=0  
 
  ;Status_Label = Widget_Label(Main_Base, UNAME='Status_Label'  $
  ;    ,XOFFSET=8 ,YOFFSET=Result.ysize-35-73-27 ,XSIZE=Result.xsize-554,YSIZE=23 $
  ;    ,/ALIGN_Center ,VALUE='Session Log', /sunken_frame) 
 
  Save_Log_Button = Widget_Button(Main_Base, UNAME='Save_Log_Button'  $
      ,XOFFSET=8, YOFFSET=Result.ysize-35-73-30, SCR_XSIZE=140, SCR_YSIZE=25 $
      ,VALUE= 'Save Session Log to' ,XSIZE=25 ,YSIZE=25, /Align_Center)

  Save_Log_Text = Widget_Text(Main_Base, UNAME='Save_Log_Text'  $
      ,XOFFSET=149, YOFFSET=Result.ysize-35-73-34, SCR_XSIZE=240, SCR_YSIZE=33 $
      ,VALUE= file_dir+'/alcbeam.log' ,XSIZE=25 ,YSIZE=25, /Align_Center,/editable) 
 
  Status_wid = Widget_Text(Main_base, UNAME='Status_Text'  $
      ,YOFFSET=Result.ysize-35-73, XOFFSET=6, SCR_YSIZE=33+70 ,SCR_XSIZE=Result.xsize-13$
      ,VALUE=[[''],[''],[''],[':->>> Initializing ...']] ,XSIZE=20 ,YSIZE=1,/SCROLL)

  
Widget_Control,  Main_Widget, /REALIZE
widget_id=main_widget
XMANAGER, 'Main_Widget', Main_Widget, /No_block
Widget_control, Status_Wid, Get_Value=status_tx
Widget_Control, Status_Wid, Set_Value=[status_tx,['1 : '+systime()+' Ready !!!']], Set_text_top_line=n_elements(status_tx)-4
end
;---------------------------------------------------------------------------------------------------------------------------------------
